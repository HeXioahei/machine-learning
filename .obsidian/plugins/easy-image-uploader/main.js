'use strict';

var obsidian = require('obsidian');
var path$4 = require('path');
var require$$0 = require('fs');
var process$2 = require('node:process');
var require$$0$1 = require('child_process');
var require$$0$2 = require('os');
var require$$0$3 = require('assert');
var require$$2 = require('events');
var require$$0$5 = require('buffer');
var require$$0$4 = require('stream');
var require$$2$1 = require('util');
var node_os = require('node:os');
var node_buffer = require('node:buffer');
require('electron');
var require$$1 = require('string_decoder');
var require$$4 = require('timers');

function _interopNamespaceDefault(e) {
    var n = Object.create(null);
    if (e) {
        Object.keys(e).forEach(function (k) {
            if (k !== 'default') {
                var d = Object.getOwnPropertyDescriptor(e, k);
                Object.defineProperty(n, k, d.get ? d : {
                    enumerable: true,
                    get: function () { return e[k]; }
                });
            }
        });
    }
    n.default = e;
    return Object.freeze(n);
}

var path__namespace = /*#__PURE__*/_interopNamespaceDefault(path$4);
var require$$0__namespace = /*#__PURE__*/_interopNamespaceDefault(require$$0);

/******************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
/* global Reflect, Promise */

var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
    return extendStatics(d, b);
};

function __extends(d, b) {
    if (typeof b !== "function" && b !== null)
        throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

function __generator(thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
}

function __values(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}

function __read(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
}

function __spreadArray(to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
}

function __asyncValues(o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
}

var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

function getDefaultExportFromCjs (x) {
	return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
}

var execa$2 = {exports: {}};

var crossSpawn$1 = {exports: {}};

var windows;
var hasRequiredWindows;

function requireWindows () {
	if (hasRequiredWindows) return windows;
	hasRequiredWindows = 1;
	windows = isexe;
	isexe.sync = sync;

	var fs = require$$0;

	function checkPathExt (path, options) {
	  var pathext = options.pathExt !== undefined ?
	    options.pathExt : process.env.PATHEXT;

	  if (!pathext) {
	    return true
	  }

	  pathext = pathext.split(';');
	  if (pathext.indexOf('') !== -1) {
	    return true
	  }
	  for (var i = 0; i < pathext.length; i++) {
	    var p = pathext[i].toLowerCase();
	    if (p && path.substr(-p.length).toLowerCase() === p) {
	      return true
	    }
	  }
	  return false
	}

	function checkStat (stat, path, options) {
	  if (!stat.isSymbolicLink() && !stat.isFile()) {
	    return false
	  }
	  return checkPathExt(path, options)
	}

	function isexe (path, options, cb) {
	  fs.stat(path, function (er, stat) {
	    cb(er, er ? false : checkStat(stat, path, options));
	  });
	}

	function sync (path, options) {
	  return checkStat(fs.statSync(path), path, options)
	}
	return windows;
}

var mode;
var hasRequiredMode;

function requireMode () {
	if (hasRequiredMode) return mode;
	hasRequiredMode = 1;
	mode = isexe;
	isexe.sync = sync;

	var fs = require$$0;

	function isexe (path, options, cb) {
	  fs.stat(path, function (er, stat) {
	    cb(er, er ? false : checkStat(stat, options));
	  });
	}

	function sync (path, options) {
	  return checkStat(fs.statSync(path), options)
	}

	function checkStat (stat, options) {
	  return stat.isFile() && checkMode(stat, options)
	}

	function checkMode (stat, options) {
	  var mod = stat.mode;
	  var uid = stat.uid;
	  var gid = stat.gid;

	  var myUid = options.uid !== undefined ?
	    options.uid : process.getuid && process.getuid();
	  var myGid = options.gid !== undefined ?
	    options.gid : process.getgid && process.getgid();

	  var u = parseInt('100', 8);
	  var g = parseInt('010', 8);
	  var o = parseInt('001', 8);
	  var ug = u | g;

	  var ret = (mod & o) ||
	    (mod & g) && gid === myGid ||
	    (mod & u) && uid === myUid ||
	    (mod & ug) && myUid === 0;

	  return ret
	}
	return mode;
}

var core$1;
if (process.platform === 'win32' || commonjsGlobal.TESTING_WINDOWS) {
  core$1 = requireWindows();
} else {
  core$1 = requireMode();
}

var isexe_1 = isexe$1;
isexe$1.sync = sync;

function isexe$1 (path, options, cb) {
  if (typeof options === 'function') {
    cb = options;
    options = {};
  }

  if (!cb) {
    if (typeof Promise !== 'function') {
      throw new TypeError('callback not provided')
    }

    return new Promise(function (resolve, reject) {
      isexe$1(path, options || {}, function (er, is) {
        if (er) {
          reject(er);
        } else {
          resolve(is);
        }
      });
    })
  }

  core$1(path, options || {}, function (er, is) {
    // ignore EACCES because that just means we aren't allowed to run it
    if (er) {
      if (er.code === 'EACCES' || options && options.ignoreErrors) {
        er = null;
        is = false;
      }
    }
    cb(er, is);
  });
}

function sync (path, options) {
  // my kingdom for a filtered catch
  try {
    return core$1.sync(path, options || {})
  } catch (er) {
    if (options && options.ignoreErrors || er.code === 'EACCES') {
      return false
    } else {
      throw er
    }
  }
}

const isWindows = process.platform === 'win32' ||
    process.env.OSTYPE === 'cygwin' ||
    process.env.OSTYPE === 'msys';

const path$3 = path$4;
const COLON = isWindows ? ';' : ':';
const isexe = isexe_1;

const getNotFoundError = (cmd) =>
  Object.assign(new Error(`not found: ${cmd}`), { code: 'ENOENT' });

const getPathInfo = (cmd, opt) => {
  const colon = opt.colon || COLON;

  // If it has a slash, then we don't bother searching the pathenv.
  // just check the file itself, and that's it.
  const pathEnv = cmd.match(/\//) || isWindows && cmd.match(/\\/) ? ['']
    : (
      [
        // windows always checks the cwd first
        ...(isWindows ? [process.cwd()] : []),
        ...(opt.path || process.env.PATH ||
          /* istanbul ignore next: very unusual */ '').split(colon),
      ]
    );
  const pathExtExe = isWindows
    ? opt.pathExt || process.env.PATHEXT || '.EXE;.CMD;.BAT;.COM'
    : '';
  const pathExt = isWindows ? pathExtExe.split(colon) : [''];

  if (isWindows) {
    if (cmd.indexOf('.') !== -1 && pathExt[0] !== '')
      pathExt.unshift('');
  }

  return {
    pathEnv,
    pathExt,
    pathExtExe,
  }
};

const which$1 = (cmd, opt, cb) => {
  if (typeof opt === 'function') {
    cb = opt;
    opt = {};
  }
  if (!opt)
    opt = {};

  const { pathEnv, pathExt, pathExtExe } = getPathInfo(cmd, opt);
  const found = [];

  const step = i => new Promise((resolve, reject) => {
    if (i === pathEnv.length)
      return opt.all && found.length ? resolve(found)
        : reject(getNotFoundError(cmd))

    const ppRaw = pathEnv[i];
    const pathPart = /^".*"$/.test(ppRaw) ? ppRaw.slice(1, -1) : ppRaw;

    const pCmd = path$3.join(pathPart, cmd);
    const p = !pathPart && /^\.[\\\/]/.test(cmd) ? cmd.slice(0, 2) + pCmd
      : pCmd;

    resolve(subStep(p, i, 0));
  });

  const subStep = (p, i, ii) => new Promise((resolve, reject) => {
    if (ii === pathExt.length)
      return resolve(step(i + 1))
    const ext = pathExt[ii];
    isexe(p + ext, { pathExt: pathExtExe }, (er, is) => {
      if (!er && is) {
        if (opt.all)
          found.push(p + ext);
        else
          return resolve(p + ext)
      }
      return resolve(subStep(p, i, ii + 1))
    });
  });

  return cb ? step(0).then(res => cb(null, res), cb) : step(0)
};

const whichSync = (cmd, opt) => {
  opt = opt || {};

  const { pathEnv, pathExt, pathExtExe } = getPathInfo(cmd, opt);
  const found = [];

  for (let i = 0; i < pathEnv.length; i ++) {
    const ppRaw = pathEnv[i];
    const pathPart = /^".*"$/.test(ppRaw) ? ppRaw.slice(1, -1) : ppRaw;

    const pCmd = path$3.join(pathPart, cmd);
    const p = !pathPart && /^\.[\\\/]/.test(cmd) ? cmd.slice(0, 2) + pCmd
      : pCmd;

    for (let j = 0; j < pathExt.length; j ++) {
      const cur = p + pathExt[j];
      try {
        const is = isexe.sync(cur, { pathExt: pathExtExe });
        if (is) {
          if (opt.all)
            found.push(cur);
          else
            return cur
        }
      } catch (ex) {}
    }
  }

  if (opt.all && found.length)
    return found

  if (opt.nothrow)
    return null

  throw getNotFoundError(cmd)
};

var which_1 = which$1;
which$1.sync = whichSync;

var pathKey$1 = {exports: {}};

const pathKey = (options = {}) => {
	const environment = options.env || process.env;
	const platform = options.platform || process.platform;

	if (platform !== 'win32') {
		return 'PATH';
	}

	return Object.keys(environment).reverse().find(key => key.toUpperCase() === 'PATH') || 'Path';
};

pathKey$1.exports = pathKey;
// TODO: Remove this for the next major release
pathKey$1.exports.default = pathKey;

var pathKeyExports = pathKey$1.exports;

const path$2 = path$4;
const which = which_1;
const getPathKey = pathKeyExports;

function resolveCommandAttempt(parsed, withoutPathExt) {
    const env = parsed.options.env || process.env;
    const cwd = process.cwd();
    const hasCustomCwd = parsed.options.cwd != null;
    // Worker threads do not have process.chdir()
    const shouldSwitchCwd = hasCustomCwd && process.chdir !== undefined && !process.chdir.disabled;

    // If a custom `cwd` was specified, we need to change the process cwd
    // because `which` will do stat calls but does not support a custom cwd
    if (shouldSwitchCwd) {
        try {
            process.chdir(parsed.options.cwd);
        } catch (err) {
            /* Empty */
        }
    }

    let resolved;

    try {
        resolved = which.sync(parsed.command, {
            path: env[getPathKey({ env })],
            pathExt: withoutPathExt ? path$2.delimiter : undefined,
        });
    } catch (e) {
        /* Empty */
    } finally {
        if (shouldSwitchCwd) {
            process.chdir(cwd);
        }
    }

    // If we successfully resolved, ensure that an absolute path is returned
    // Note that when a custom `cwd` was used, we need to resolve to an absolute path based on it
    if (resolved) {
        resolved = path$2.resolve(hasCustomCwd ? parsed.options.cwd : '', resolved);
    }

    return resolved;
}

function resolveCommand$1(parsed) {
    return resolveCommandAttempt(parsed) || resolveCommandAttempt(parsed, true);
}

var resolveCommand_1 = resolveCommand$1;

var _escape = {};

// See http://www.robvanderwoude.com/escapechars.php
const metaCharsRegExp = /([()\][%!^"`<>&|;, *?])/g;

function escapeCommand(arg) {
    // Escape meta chars
    arg = arg.replace(metaCharsRegExp, '^$1');

    return arg;
}

function escapeArgument(arg, doubleEscapeMetaChars) {
    // Convert to string
    arg = `${arg}`;

    // Algorithm below is based on https://qntm.org/cmd

    // Sequence of backslashes followed by a double quote:
    // double up all the backslashes and escape the double quote
    arg = arg.replace(/(\\*)"/g, '$1$1\\"');

    // Sequence of backslashes followed by the end of the string
    // (which will become a double quote later):
    // double up all the backslashes
    arg = arg.replace(/(\\*)$/, '$1$1');

    // All other backslashes occur literally

    // Quote the whole thing:
    arg = `"${arg}"`;

    // Escape meta chars
    arg = arg.replace(metaCharsRegExp, '^$1');

    // Double escape meta chars if necessary
    if (doubleEscapeMetaChars) {
        arg = arg.replace(metaCharsRegExp, '^$1');
    }

    return arg;
}

_escape.command = escapeCommand;
_escape.argument = escapeArgument;

var shebangRegex$1 = /^#!(.*)/;

const shebangRegex = shebangRegex$1;

var shebangCommand$1 = (string = '') => {
	const match = string.match(shebangRegex);

	if (!match) {
		return null;
	}

	const [path, argument] = match[0].replace(/#! ?/, '').split(' ');
	const binary = path.split('/').pop();

	if (binary === 'env') {
		return argument;
	}

	return argument ? `${binary} ${argument}` : binary;
};

const fs = require$$0;
const shebangCommand = shebangCommand$1;

function readShebang$1(command) {
    // Read the first 150 bytes from the file
    const size = 150;
    const buffer = Buffer.alloc(size);

    let fd;

    try {
        fd = fs.openSync(command, 'r');
        fs.readSync(fd, buffer, 0, size, 0);
        fs.closeSync(fd);
    } catch (e) { /* Empty */ }

    // Attempt to extract shebang (null is returned if not a shebang)
    return shebangCommand(buffer.toString());
}

var readShebang_1 = readShebang$1;

const path$1 = path$4;
const resolveCommand = resolveCommand_1;
const escape$1 = _escape;
const readShebang = readShebang_1;

const isWin$2 = process.platform === 'win32';
const isExecutableRegExp = /\.(?:com|exe)$/i;
const isCmdShimRegExp = /node_modules[\\/].bin[\\/][^\\/]+\.cmd$/i;

function detectShebang(parsed) {
    parsed.file = resolveCommand(parsed);

    const shebang = parsed.file && readShebang(parsed.file);

    if (shebang) {
        parsed.args.unshift(parsed.file);
        parsed.command = shebang;

        return resolveCommand(parsed);
    }

    return parsed.file;
}

function parseNonShell(parsed) {
    if (!isWin$2) {
        return parsed;
    }

    // Detect & add support for shebangs
    const commandFile = detectShebang(parsed);

    // We don't need a shell if the command filename is an executable
    const needsShell = !isExecutableRegExp.test(commandFile);

    // If a shell is required, use cmd.exe and take care of escaping everything correctly
    // Note that `forceShell` is an hidden option used only in tests
    if (parsed.options.forceShell || needsShell) {
        // Need to double escape meta chars if the command is a cmd-shim located in `node_modules/.bin/`
        // The cmd-shim simply calls execute the package bin file with NodeJS, proxying any argument
        // Because the escape of metachars with ^ gets interpreted when the cmd.exe is first called,
        // we need to double escape them
        const needsDoubleEscapeMetaChars = isCmdShimRegExp.test(commandFile);

        // Normalize posix paths into OS compatible paths (e.g.: foo/bar -> foo\bar)
        // This is necessary otherwise it will always fail with ENOENT in those cases
        parsed.command = path$1.normalize(parsed.command);

        // Escape command & arguments
        parsed.command = escape$1.command(parsed.command);
        parsed.args = parsed.args.map((arg) => escape$1.argument(arg, needsDoubleEscapeMetaChars));

        const shellCommand = [parsed.command].concat(parsed.args).join(' ');

        parsed.args = ['/d', '/s', '/c', `"${shellCommand}"`];
        parsed.command = process.env.comspec || 'cmd.exe';
        parsed.options.windowsVerbatimArguments = true; // Tell node's spawn that the arguments are already escaped
    }

    return parsed;
}

function parse$1(command, args, options) {
    // Normalize arguments, similar to nodejs
    if (args && !Array.isArray(args)) {
        options = args;
        args = null;
    }

    args = args ? args.slice(0) : []; // Clone array to avoid changing the original
    options = Object.assign({}, options); // Clone object to avoid changing the original

    // Build our parsed object
    const parsed = {
        command,
        args,
        options,
        file: undefined,
        original: {
            command,
            args,
        },
    };

    // Delegate further parsing to shell or non-shell
    return options.shell ? parsed : parseNonShell(parsed);
}

var parse_1 = parse$1;

const isWin$1 = process.platform === 'win32';

function notFoundError(original, syscall) {
    return Object.assign(new Error(`${syscall} ${original.command} ENOENT`), {
        code: 'ENOENT',
        errno: 'ENOENT',
        syscall: `${syscall} ${original.command}`,
        path: original.command,
        spawnargs: original.args,
    });
}

function hookChildProcess(cp, parsed) {
    if (!isWin$1) {
        return;
    }

    const originalEmit = cp.emit;

    cp.emit = function (name, arg1) {
        // If emitting "exit" event and exit code is 1, we need to check if
        // the command exists and emit an "error" instead
        // See https://github.com/IndigoUnited/node-cross-spawn/issues/16
        if (name === 'exit') {
            const err = verifyENOENT(arg1, parsed);

            if (err) {
                return originalEmit.call(cp, 'error', err);
            }
        }

        return originalEmit.apply(cp, arguments); // eslint-disable-line prefer-rest-params
    };
}

function verifyENOENT(status, parsed) {
    if (isWin$1 && status === 1 && !parsed.file) {
        return notFoundError(parsed.original, 'spawn');
    }

    return null;
}

function verifyENOENTSync(status, parsed) {
    if (isWin$1 && status === 1 && !parsed.file) {
        return notFoundError(parsed.original, 'spawnSync');
    }

    return null;
}

var enoent$1 = {
    hookChildProcess,
    verifyENOENT,
    verifyENOENTSync,
    notFoundError,
};

const cp = require$$0$1;
const parse = parse_1;
const enoent = enoent$1;

function spawn(command, args, options) {
    // Parse the arguments
    const parsed = parse(command, args, options);

    // Spawn the child process
    const spawned = cp.spawn(parsed.command, parsed.args, parsed.options);

    // Hook into child process "exit" event to emit an error if the command
    // does not exists, see: https://github.com/IndigoUnited/node-cross-spawn/issues/16
    enoent.hookChildProcess(spawned, parsed);

    return spawned;
}

function spawnSync(command, args, options) {
    // Parse the arguments
    const parsed = parse(command, args, options);

    // Spawn the child process
    const result = cp.spawnSync(parsed.command, parsed.args, parsed.options);

    // Analyze if the command does not exist, see: https://github.com/IndigoUnited/node-cross-spawn/issues/16
    result.error = result.error || enoent.verifyENOENTSync(result.status, parsed);

    return result;
}

crossSpawn$1.exports = spawn;
crossSpawn$1.exports.spawn = spawn;
crossSpawn$1.exports.sync = spawnSync;

crossSpawn$1.exports._parse = parse;
crossSpawn$1.exports._enoent = enoent;

var crossSpawnExports = crossSpawn$1.exports;

var stripFinalNewline$1 = input => {
	const LF = typeof input === 'string' ? '\n' : '\n'.charCodeAt();
	const CR = typeof input === 'string' ? '\r' : '\r'.charCodeAt();

	if (input[input.length - 1] === LF) {
		input = input.slice(0, input.length - 1);
	}

	if (input[input.length - 1] === CR) {
		input = input.slice(0, input.length - 1);
	}

	return input;
};

var npmRunPath$1 = {exports: {}};

npmRunPath$1.exports;

(function (module) {
	const path = path$4;
	const pathKey = pathKeyExports;

	const npmRunPath = options => {
		options = {
			cwd: process.cwd(),
			path: process.env[pathKey()],
			execPath: process.execPath,
			...options
		};

		let previous;
		let cwdPath = path.resolve(options.cwd);
		const result = [];

		while (previous !== cwdPath) {
			result.push(path.join(cwdPath, 'node_modules/.bin'));
			previous = cwdPath;
			cwdPath = path.resolve(cwdPath, '..');
		}

		// Ensure the running `node` binary is used
		const execPathDir = path.resolve(options.cwd, options.execPath, '..');
		result.push(execPathDir);

		return result.concat(options.path).join(path.delimiter);
	};

	module.exports = npmRunPath;
	// TODO: Remove this for the next major release
	module.exports.default = npmRunPath;

	module.exports.env = options => {
		options = {
			env: process.env,
			...options
		};

		const env = {...options.env};
		const path = pathKey({env});

		options.path = env[path];
		env[path] = module.exports(options);

		return env;
	}; 
} (npmRunPath$1));

var npmRunPathExports = npmRunPath$1.exports;

var onetime$2 = {exports: {}};

var mimicFn$2 = {exports: {}};

const mimicFn$1 = (to, from) => {
	for (const prop of Reflect.ownKeys(from)) {
		Object.defineProperty(to, prop, Object.getOwnPropertyDescriptor(from, prop));
	}

	return to;
};

mimicFn$2.exports = mimicFn$1;
// TODO: Remove this for the next major release
mimicFn$2.exports.default = mimicFn$1;

var mimicFnExports = mimicFn$2.exports;

const mimicFn = mimicFnExports;

const calledFunctions = new WeakMap();

const onetime$1 = (function_, options = {}) => {
	if (typeof function_ !== 'function') {
		throw new TypeError('Expected a function');
	}

	let returnValue;
	let callCount = 0;
	const functionName = function_.displayName || function_.name || '<anonymous>';

	const onetime = function (...arguments_) {
		calledFunctions.set(onetime, ++callCount);

		if (callCount === 1) {
			returnValue = function_.apply(this, arguments_);
			function_ = null;
		} else if (options.throw === true) {
			throw new Error(`Function \`${functionName}\` can only be called once`);
		}

		return returnValue;
	};

	mimicFn(onetime, function_);
	calledFunctions.set(onetime, callCount);

	return onetime;
};

onetime$2.exports = onetime$1;
// TODO: Remove this for the next major release
onetime$2.exports.default = onetime$1;

onetime$2.exports.callCount = function_ => {
	if (!calledFunctions.has(function_)) {
		throw new Error(`The given function \`${function_.name}\` is not wrapped by the \`onetime\` package`);
	}

	return calledFunctions.get(function_);
};

var onetimeExports = onetime$2.exports;

var main = {};

var signals$2 = {};

var core = {};

Object.defineProperty(core,"__esModule",{value:true});core.SIGNALS=void 0;

const SIGNALS=[
{
name:"SIGHUP",
number:1,
action:"terminate",
description:"Terminal closed",
standard:"posix"},

{
name:"SIGINT",
number:2,
action:"terminate",
description:"User interruption with CTRL-C",
standard:"ansi"},

{
name:"SIGQUIT",
number:3,
action:"core",
description:"User interruption with CTRL-\\",
standard:"posix"},

{
name:"SIGILL",
number:4,
action:"core",
description:"Invalid machine instruction",
standard:"ansi"},

{
name:"SIGTRAP",
number:5,
action:"core",
description:"Debugger breakpoint",
standard:"posix"},

{
name:"SIGABRT",
number:6,
action:"core",
description:"Aborted",
standard:"ansi"},

{
name:"SIGIOT",
number:6,
action:"core",
description:"Aborted",
standard:"bsd"},

{
name:"SIGBUS",
number:7,
action:"core",
description:
"Bus error due to misaligned, non-existing address or paging error",
standard:"bsd"},

{
name:"SIGEMT",
number:7,
action:"terminate",
description:"Command should be emulated but is not implemented",
standard:"other"},

{
name:"SIGFPE",
number:8,
action:"core",
description:"Floating point arithmetic error",
standard:"ansi"},

{
name:"SIGKILL",
number:9,
action:"terminate",
description:"Forced termination",
standard:"posix",
forced:true},

{
name:"SIGUSR1",
number:10,
action:"terminate",
description:"Application-specific signal",
standard:"posix"},

{
name:"SIGSEGV",
number:11,
action:"core",
description:"Segmentation fault",
standard:"ansi"},

{
name:"SIGUSR2",
number:12,
action:"terminate",
description:"Application-specific signal",
standard:"posix"},

{
name:"SIGPIPE",
number:13,
action:"terminate",
description:"Broken pipe or socket",
standard:"posix"},

{
name:"SIGALRM",
number:14,
action:"terminate",
description:"Timeout or timer",
standard:"posix"},

{
name:"SIGTERM",
number:15,
action:"terminate",
description:"Termination",
standard:"ansi"},

{
name:"SIGSTKFLT",
number:16,
action:"terminate",
description:"Stack is empty or overflowed",
standard:"other"},

{
name:"SIGCHLD",
number:17,
action:"ignore",
description:"Child process terminated, paused or unpaused",
standard:"posix"},

{
name:"SIGCLD",
number:17,
action:"ignore",
description:"Child process terminated, paused or unpaused",
standard:"other"},

{
name:"SIGCONT",
number:18,
action:"unpause",
description:"Unpaused",
standard:"posix",
forced:true},

{
name:"SIGSTOP",
number:19,
action:"pause",
description:"Paused",
standard:"posix",
forced:true},

{
name:"SIGTSTP",
number:20,
action:"pause",
description:"Paused using CTRL-Z or \"suspend\"",
standard:"posix"},

{
name:"SIGTTIN",
number:21,
action:"pause",
description:"Background process cannot read terminal input",
standard:"posix"},

{
name:"SIGBREAK",
number:21,
action:"terminate",
description:"User interruption with CTRL-BREAK",
standard:"other"},

{
name:"SIGTTOU",
number:22,
action:"pause",
description:"Background process cannot write to terminal output",
standard:"posix"},

{
name:"SIGURG",
number:23,
action:"ignore",
description:"Socket received out-of-band data",
standard:"bsd"},

{
name:"SIGXCPU",
number:24,
action:"core",
description:"Process timed out",
standard:"bsd"},

{
name:"SIGXFSZ",
number:25,
action:"core",
description:"File too big",
standard:"bsd"},

{
name:"SIGVTALRM",
number:26,
action:"terminate",
description:"Timeout or timer",
standard:"bsd"},

{
name:"SIGPROF",
number:27,
action:"terminate",
description:"Timeout or timer",
standard:"bsd"},

{
name:"SIGWINCH",
number:28,
action:"ignore",
description:"Terminal window size changed",
standard:"bsd"},

{
name:"SIGIO",
number:29,
action:"terminate",
description:"I/O is available",
standard:"other"},

{
name:"SIGPOLL",
number:29,
action:"terminate",
description:"Watched event",
standard:"other"},

{
name:"SIGINFO",
number:29,
action:"ignore",
description:"Request for process information",
standard:"other"},

{
name:"SIGPWR",
number:30,
action:"terminate",
description:"Device running out of power",
standard:"systemv"},

{
name:"SIGSYS",
number:31,
action:"core",
description:"Invalid system call",
standard:"other"},

{
name:"SIGUNUSED",
number:31,
action:"terminate",
description:"Invalid system call",
standard:"other"}];core.SIGNALS=SIGNALS;

var realtime = {};

Object.defineProperty(realtime,"__esModule",{value:true});realtime.SIGRTMAX=realtime.getRealtimeSignals=void 0;
const getRealtimeSignals=function(){
const length=SIGRTMAX-SIGRTMIN+1;
return Array.from({length},getRealtimeSignal);
};realtime.getRealtimeSignals=getRealtimeSignals;

const getRealtimeSignal=function(value,index){
return {
name:`SIGRT${index+1}`,
number:SIGRTMIN+index,
action:"terminate",
description:"Application-specific signal (realtime)",
standard:"posix"};

};

const SIGRTMIN=34;
const SIGRTMAX=64;realtime.SIGRTMAX=SIGRTMAX;

Object.defineProperty(signals$2,"__esModule",{value:true});signals$2.getSignals=void 0;var _os$1=require$$0$2;

var _core=core;
var _realtime$1=realtime;



const getSignals=function(){
const realtimeSignals=(0, _realtime$1.getRealtimeSignals)();
const signals=[..._core.SIGNALS,...realtimeSignals].map(normalizeSignal);
return signals;
};signals$2.getSignals=getSignals;







const normalizeSignal=function({
name,
number:defaultNumber,
description,
action,
forced=false,
standard})
{
const{
signals:{[name]:constantSignal}}=
_os$1.constants;
const supported=constantSignal!==undefined;
const number=supported?constantSignal:defaultNumber;
return {name,number,description,supported,action,forced,standard};
};

Object.defineProperty(main,"__esModule",{value:true});main.signalsByNumber=main.signalsByName=void 0;var _os=require$$0$2;

var _signals=signals$2;
var _realtime=realtime;



const getSignalsByName=function(){
const signals=(0, _signals.getSignals)();
return signals.reduce(getSignalByName,{});
};

const getSignalByName=function(
signalByNameMemo,
{name,number,description,supported,action,forced,standard})
{
return {
...signalByNameMemo,
[name]:{name,number,description,supported,action,forced,standard}};

};

const signalsByName$1=getSignalsByName();main.signalsByName=signalsByName$1;




const getSignalsByNumber=function(){
const signals=(0, _signals.getSignals)();
const length=_realtime.SIGRTMAX+1;
const signalsA=Array.from({length},(value,number)=>
getSignalByNumber(number,signals));

return Object.assign({},...signalsA);
};

const getSignalByNumber=function(number,signals){
const signal=findSignalByNumber(number,signals);

if(signal===undefined){
return {};
}

const{name,description,supported,action,forced,standard}=signal;
return {
[number]:{
name,
number,
description,
supported,
action,
forced,
standard}};


};



const findSignalByNumber=function(number,signals){
const signal=signals.find(({name})=>_os.constants.signals[name]===number);

if(signal!==undefined){
return signal;
}

return signals.find(signalA=>signalA.number===number);
};

const signalsByNumber=getSignalsByNumber();main.signalsByNumber=signalsByNumber;

const {signalsByName} = main;

const getErrorPrefix = ({timedOut, timeout, errorCode, signal, signalDescription, exitCode, isCanceled}) => {
	if (timedOut) {
		return `timed out after ${timeout} milliseconds`;
	}

	if (isCanceled) {
		return 'was canceled';
	}

	if (errorCode !== undefined) {
		return `failed with ${errorCode}`;
	}

	if (signal !== undefined) {
		return `was killed with ${signal} (${signalDescription})`;
	}

	if (exitCode !== undefined) {
		return `failed with exit code ${exitCode}`;
	}

	return 'failed';
};

const makeError$1 = ({
	stdout,
	stderr,
	all,
	error,
	signal,
	exitCode,
	command,
	escapedCommand,
	timedOut,
	isCanceled,
	killed,
	parsed: {options: {timeout}}
}) => {
	// `signal` and `exitCode` emitted on `spawned.on('exit')` event can be `null`.
	// We normalize them to `undefined`
	exitCode = exitCode === null ? undefined : exitCode;
	signal = signal === null ? undefined : signal;
	const signalDescription = signal === undefined ? undefined : signalsByName[signal].description;

	const errorCode = error && error.code;

	const prefix = getErrorPrefix({timedOut, timeout, errorCode, signal, signalDescription, exitCode, isCanceled});
	const execaMessage = `Command ${prefix}: ${command}`;
	const isError = Object.prototype.toString.call(error) === '[object Error]';
	const shortMessage = isError ? `${execaMessage}\n${error.message}` : execaMessage;
	const message = [shortMessage, stderr, stdout].filter(Boolean).join('\n');

	if (isError) {
		error.originalMessage = error.message;
		error.message = message;
	} else {
		error = new Error(message);
	}

	error.shortMessage = shortMessage;
	error.command = command;
	error.escapedCommand = escapedCommand;
	error.exitCode = exitCode;
	error.signal = signal;
	error.signalDescription = signalDescription;
	error.stdout = stdout;
	error.stderr = stderr;

	if (all !== undefined) {
		error.all = all;
	}

	if ('bufferedData' in error) {
		delete error.bufferedData;
	}

	error.failed = true;
	error.timedOut = Boolean(timedOut);
	error.isCanceled = isCanceled;
	error.killed = killed && !timedOut;

	return error;
};

var error = makeError$1;

var stdio = {exports: {}};

const aliases = ['stdin', 'stdout', 'stderr'];

const hasAlias = options => aliases.some(alias => options[alias] !== undefined);

const normalizeStdio$1 = options => {
	if (!options) {
		return;
	}

	const {stdio} = options;

	if (stdio === undefined) {
		return aliases.map(alias => options[alias]);
	}

	if (hasAlias(options)) {
		throw new Error(`It's not possible to provide \`stdio\` in combination with one of ${aliases.map(alias => `\`${alias}\``).join(', ')}`);
	}

	if (typeof stdio === 'string') {
		return stdio;
	}

	if (!Array.isArray(stdio)) {
		throw new TypeError(`Expected \`stdio\` to be of type \`string\` or \`Array\`, got \`${typeof stdio}\``);
	}

	const length = Math.max(stdio.length, aliases.length);
	return Array.from({length}, (value, index) => stdio[index]);
};

stdio.exports = normalizeStdio$1;

// `ipc` is pushed unless it is already present
stdio.exports.node = options => {
	const stdio = normalizeStdio$1(options);

	if (stdio === 'ipc') {
		return 'ipc';
	}

	if (stdio === undefined || typeof stdio === 'string') {
		return [stdio, stdio, stdio, 'ipc'];
	}

	if (stdio.includes('ipc')) {
		return stdio;
	}

	return [...stdio, 'ipc'];
};

var stdioExports = stdio.exports;

var signalExit = {exports: {}};

var signals$1 = {exports: {}};

var hasRequiredSignals;

function requireSignals () {
	if (hasRequiredSignals) return signals$1.exports;
	hasRequiredSignals = 1;
	(function (module) {
		// This is not the set of all possible signals.
		//
		// It IS, however, the set of all signals that trigger
		// an exit on either Linux or BSD systems.  Linux is a
		// superset of the signal names supported on BSD, and
		// the unknown signals just fail to register, so we can
		// catch that easily enough.
		//
		// Don't bother with SIGKILL.  It's uncatchable, which
		// means that we can't fire any callbacks anyway.
		//
		// If a user does happen to register a handler on a non-
		// fatal signal like SIGWINCH or something, and then
		// exit, it'll end up firing `process.emit('exit')`, so
		// the handler will be fired anyway.
		//
		// SIGBUS, SIGFPE, SIGSEGV and SIGILL, when not raised
		// artificially, inherently leave the process in a
		// state from which it is not safe to try and enter JS
		// listeners.
		module.exports = [
		  'SIGABRT',
		  'SIGALRM',
		  'SIGHUP',
		  'SIGINT',
		  'SIGTERM'
		];

		if (process.platform !== 'win32') {
		  module.exports.push(
		    'SIGVTALRM',
		    'SIGXCPU',
		    'SIGXFSZ',
		    'SIGUSR2',
		    'SIGTRAP',
		    'SIGSYS',
		    'SIGQUIT',
		    'SIGIOT'
		    // should detect profiler and enable/disable accordingly.
		    // see #21
		    // 'SIGPROF'
		  );
		}

		if (process.platform === 'linux') {
		  module.exports.push(
		    'SIGIO',
		    'SIGPOLL',
		    'SIGPWR',
		    'SIGSTKFLT',
		    'SIGUNUSED'
		  );
		} 
	} (signals$1));
	return signals$1.exports;
}

// Note: since nyc uses this module to output coverage, any lines
// that are in the direct sync flow of nyc's outputCoverage are
// ignored, since we can never get coverage for them.
// grab a reference to node's real process object right away
var process$1 = commonjsGlobal.process;

const processOk = function (process) {
  return process &&
    typeof process === 'object' &&
    typeof process.removeListener === 'function' &&
    typeof process.emit === 'function' &&
    typeof process.reallyExit === 'function' &&
    typeof process.listeners === 'function' &&
    typeof process.kill === 'function' &&
    typeof process.pid === 'number' &&
    typeof process.on === 'function'
};

// some kind of non-node environment, just no-op
/* istanbul ignore if */
if (!processOk(process$1)) {
  signalExit.exports = function () {
    return function () {}
  };
} else {
  var assert = require$$0$3;
  var signals = requireSignals();
  var isWin = /^win/i.test(process$1.platform);

  var EE = require$$2;
  /* istanbul ignore if */
  if (typeof EE !== 'function') {
    EE = EE.EventEmitter;
  }

  var emitter;
  if (process$1.__signal_exit_emitter__) {
    emitter = process$1.__signal_exit_emitter__;
  } else {
    emitter = process$1.__signal_exit_emitter__ = new EE();
    emitter.count = 0;
    emitter.emitted = {};
  }

  // Because this emitter is a global, we have to check to see if a
  // previous version of this library failed to enable infinite listeners.
  // I know what you're about to say.  But literally everything about
  // signal-exit is a compromise with evil.  Get used to it.
  if (!emitter.infinite) {
    emitter.setMaxListeners(Infinity);
    emitter.infinite = true;
  }

  signalExit.exports = function (cb, opts) {
    /* istanbul ignore if */
    if (!processOk(commonjsGlobal.process)) {
      return function () {}
    }
    assert.equal(typeof cb, 'function', 'a callback must be provided for exit handler');

    if (loaded === false) {
      load();
    }

    var ev = 'exit';
    if (opts && opts.alwaysLast) {
      ev = 'afterexit';
    }

    var remove = function () {
      emitter.removeListener(ev, cb);
      if (emitter.listeners('exit').length === 0 &&
          emitter.listeners('afterexit').length === 0) {
        unload();
      }
    };
    emitter.on(ev, cb);

    return remove
  };

  var unload = function unload () {
    if (!loaded || !processOk(commonjsGlobal.process)) {
      return
    }
    loaded = false;

    signals.forEach(function (sig) {
      try {
        process$1.removeListener(sig, sigListeners[sig]);
      } catch (er) {}
    });
    process$1.emit = originalProcessEmit;
    process$1.reallyExit = originalProcessReallyExit;
    emitter.count -= 1;
  };
  signalExit.exports.unload = unload;

  var emit = function emit (event, code, signal) {
    /* istanbul ignore if */
    if (emitter.emitted[event]) {
      return
    }
    emitter.emitted[event] = true;
    emitter.emit(event, code, signal);
  };

  // { <signal>: <listener fn>, ... }
  var sigListeners = {};
  signals.forEach(function (sig) {
    sigListeners[sig] = function listener () {
      /* istanbul ignore if */
      if (!processOk(commonjsGlobal.process)) {
        return
      }
      // If there are no other listeners, an exit is coming!
      // Simplest way: remove us and then re-send the signal.
      // We know that this will kill the process, so we can
      // safely emit now.
      var listeners = process$1.listeners(sig);
      if (listeners.length === emitter.count) {
        unload();
        emit('exit', null, sig);
        /* istanbul ignore next */
        emit('afterexit', null, sig);
        /* istanbul ignore next */
        if (isWin && sig === 'SIGHUP') {
          // "SIGHUP" throws an `ENOSYS` error on Windows,
          // so use a supported signal instead
          sig = 'SIGINT';
        }
        /* istanbul ignore next */
        process$1.kill(process$1.pid, sig);
      }
    };
  });

  signalExit.exports.signals = function () {
    return signals
  };

  var loaded = false;

  var load = function load () {
    if (loaded || !processOk(commonjsGlobal.process)) {
      return
    }
    loaded = true;

    // This is the number of onSignalExit's that are in play.
    // It's important so that we can count the correct number of
    // listeners on signals, and don't wait for the other one to
    // handle it instead of us.
    emitter.count += 1;

    signals = signals.filter(function (sig) {
      try {
        process$1.on(sig, sigListeners[sig]);
        return true
      } catch (er) {
        return false
      }
    });

    process$1.emit = processEmit;
    process$1.reallyExit = processReallyExit;
  };
  signalExit.exports.load = load;

  var originalProcessReallyExit = process$1.reallyExit;
  var processReallyExit = function processReallyExit (code) {
    /* istanbul ignore if */
    if (!processOk(commonjsGlobal.process)) {
      return
    }
    process$1.exitCode = code || /* istanbul ignore next */ 0;
    emit('exit', process$1.exitCode, null);
    /* istanbul ignore next */
    emit('afterexit', process$1.exitCode, null);
    /* istanbul ignore next */
    originalProcessReallyExit.call(process$1, process$1.exitCode);
  };

  var originalProcessEmit = process$1.emit;
  var processEmit = function processEmit (ev, arg) {
    if (ev === 'exit' && processOk(commonjsGlobal.process)) {
      /* istanbul ignore else */
      if (arg !== undefined) {
        process$1.exitCode = arg;
      }
      var ret = originalProcessEmit.apply(this, arguments);
      /* istanbul ignore next */
      emit('exit', process$1.exitCode, null);
      /* istanbul ignore next */
      emit('afterexit', process$1.exitCode, null);
      /* istanbul ignore next */
      return ret
    } else {
      return originalProcessEmit.apply(this, arguments)
    }
  };
}

var signalExitExports = signalExit.exports;

const os = require$$0$2;
const onExit = signalExitExports;

const DEFAULT_FORCE_KILL_TIMEOUT = 1000 * 5;

// Monkey-patches `childProcess.kill()` to add `forceKillAfterTimeout` behavior
const spawnedKill$1 = (kill, signal = 'SIGTERM', options = {}) => {
	const killResult = kill(signal);
	setKillTimeout(kill, signal, options, killResult);
	return killResult;
};

const setKillTimeout = (kill, signal, options, killResult) => {
	if (!shouldForceKill(signal, options, killResult)) {
		return;
	}

	const timeout = getForceKillAfterTimeout(options);
	const t = setTimeout(() => {
		kill('SIGKILL');
	}, timeout);

	// Guarded because there's no `.unref()` when `execa` is used in the renderer
	// process in Electron. This cannot be tested since we don't run tests in
	// Electron.
	// istanbul ignore else
	if (t.unref) {
		t.unref();
	}
};

const shouldForceKill = (signal, {forceKillAfterTimeout}, killResult) => {
	return isSigterm(signal) && forceKillAfterTimeout !== false && killResult;
};

const isSigterm = signal => {
	return signal === os.constants.signals.SIGTERM ||
		(typeof signal === 'string' && signal.toUpperCase() === 'SIGTERM');
};

const getForceKillAfterTimeout = ({forceKillAfterTimeout = true}) => {
	if (forceKillAfterTimeout === true) {
		return DEFAULT_FORCE_KILL_TIMEOUT;
	}

	if (!Number.isFinite(forceKillAfterTimeout) || forceKillAfterTimeout < 0) {
		throw new TypeError(`Expected the \`forceKillAfterTimeout\` option to be a non-negative integer, got \`${forceKillAfterTimeout}\` (${typeof forceKillAfterTimeout})`);
	}

	return forceKillAfterTimeout;
};

// `childProcess.cancel()`
const spawnedCancel$1 = (spawned, context) => {
	const killResult = spawned.kill();

	if (killResult) {
		context.isCanceled = true;
	}
};

const timeoutKill = (spawned, signal, reject) => {
	spawned.kill(signal);
	reject(Object.assign(new Error('Timed out'), {timedOut: true, signal}));
};

// `timeout` option handling
const setupTimeout$1 = (spawned, {timeout, killSignal = 'SIGTERM'}, spawnedPromise) => {
	if (timeout === 0 || timeout === undefined) {
		return spawnedPromise;
	}

	let timeoutId;
	const timeoutPromise = new Promise((resolve, reject) => {
		timeoutId = setTimeout(() => {
			timeoutKill(spawned, killSignal, reject);
		}, timeout);
	});

	const safeSpawnedPromise = spawnedPromise.finally(() => {
		clearTimeout(timeoutId);
	});

	return Promise.race([timeoutPromise, safeSpawnedPromise]);
};

const validateTimeout$1 = ({timeout}) => {
	if (timeout !== undefined && (!Number.isFinite(timeout) || timeout < 0)) {
		throw new TypeError(`Expected the \`timeout\` option to be a non-negative integer, got \`${timeout}\` (${typeof timeout})`);
	}
};

// `cleanup` option handling
const setExitHandler$1 = async (spawned, {cleanup, detached}, timedPromise) => {
	if (!cleanup || detached) {
		return timedPromise;
	}

	const removeExitHandler = onExit(() => {
		spawned.kill();
	});

	return timedPromise.finally(() => {
		removeExitHandler();
	});
};

var kill = {
	spawnedKill: spawnedKill$1,
	spawnedCancel: spawnedCancel$1,
	setupTimeout: setupTimeout$1,
	validateTimeout: validateTimeout$1,
	setExitHandler: setExitHandler$1
};

const isStream$1 = stream =>
	stream !== null &&
	typeof stream === 'object' &&
	typeof stream.pipe === 'function';

isStream$1.writable = stream =>
	isStream$1(stream) &&
	stream.writable !== false &&
	typeof stream._write === 'function' &&
	typeof stream._writableState === 'object';

isStream$1.readable = stream =>
	isStream$1(stream) &&
	stream.readable !== false &&
	typeof stream._read === 'function' &&
	typeof stream._readableState === 'object';

isStream$1.duplex = stream =>
	isStream$1.writable(stream) &&
	isStream$1.readable(stream);

isStream$1.transform = stream =>
	isStream$1.duplex(stream) &&
	typeof stream._transform === 'function';

var isStream_1 = isStream$1;

var getStream$2 = {exports: {}};

const {PassThrough: PassThroughStream} = require$$0$4;

var bufferStream$1 = options => {
	options = {...options};

	const {array} = options;
	let {encoding} = options;
	const isBuffer = encoding === 'buffer';
	let objectMode = false;

	if (array) {
		objectMode = !(encoding || isBuffer);
	} else {
		encoding = encoding || 'utf8';
	}

	if (isBuffer) {
		encoding = null;
	}

	const stream = new PassThroughStream({objectMode});

	if (encoding) {
		stream.setEncoding(encoding);
	}

	let length = 0;
	const chunks = [];

	stream.on('data', chunk => {
		chunks.push(chunk);

		if (objectMode) {
			length = chunks.length;
		} else {
			length += chunk.length;
		}
	});

	stream.getBufferedValue = () => {
		if (array) {
			return chunks;
		}

		return isBuffer ? Buffer.concat(chunks, length) : chunks.join('');
	};

	stream.getBufferedLength = () => length;

	return stream;
};

const {constants: BufferConstants} = require$$0$5;
const stream$2 = require$$0$4;
const {promisify} = require$$2$1;
const bufferStream = bufferStream$1;

const streamPipelinePromisified = promisify(stream$2.pipeline);

class MaxBufferError extends Error {
	constructor() {
		super('maxBuffer exceeded');
		this.name = 'MaxBufferError';
	}
}

async function getStream$1(inputStream, options) {
	if (!inputStream) {
		throw new Error('Expected a stream');
	}

	options = {
		maxBuffer: Infinity,
		...options
	};

	const {maxBuffer} = options;
	const stream = bufferStream(options);

	await new Promise((resolve, reject) => {
		const rejectPromise = error => {
			// Don't retrieve an oversized buffer.
			if (error && stream.getBufferedLength() <= BufferConstants.MAX_LENGTH) {
				error.bufferedData = stream.getBufferedValue();
			}

			reject(error);
		};

		(async () => {
			try {
				await streamPipelinePromisified(inputStream, stream);
				resolve();
			} catch (error) {
				rejectPromise(error);
			}
		})();

		stream.on('data', () => {
			if (stream.getBufferedLength() > maxBuffer) {
				rejectPromise(new MaxBufferError());
			}
		});
	});

	return stream.getBufferedValue();
}

getStream$2.exports = getStream$1;
getStream$2.exports.buffer = (stream, options) => getStream$1(stream, {...options, encoding: 'buffer'});
getStream$2.exports.array = (stream, options) => getStream$1(stream, {...options, array: true});
getStream$2.exports.MaxBufferError = MaxBufferError;

var getStreamExports = getStream$2.exports;

const { PassThrough } = require$$0$4;

var mergeStream$1 = function (/*streams...*/) {
  var sources = [];
  var output  = new PassThrough({objectMode: true});

  output.setMaxListeners(0);

  output.add = add;
  output.isEmpty = isEmpty;

  output.on('unpipe', remove);

  Array.prototype.slice.call(arguments).forEach(add);

  return output

  function add (source) {
    if (Array.isArray(source)) {
      source.forEach(add);
      return this
    }

    sources.push(source);
    source.once('end', remove.bind(null, source));
    source.once('error', output.emit.bind(output, 'error'));
    source.pipe(output, {end: false});
    return this
  }

  function isEmpty () {
    return sources.length == 0;
  }

  function remove (source) {
    sources = sources.filter(function (it) { return it !== source });
    if (!sources.length && output.readable) { output.end(); }
  }
};

const isStream = isStream_1;
const getStream = getStreamExports;
const mergeStream = mergeStream$1;

// `input` option
const handleInput$1 = (spawned, input) => {
	// Checking for stdin is workaround for https://github.com/nodejs/node/issues/26852
	// @todo remove `|| spawned.stdin === undefined` once we drop support for Node.js <=12.2.0
	if (input === undefined || spawned.stdin === undefined) {
		return;
	}

	if (isStream(input)) {
		input.pipe(spawned.stdin);
	} else {
		spawned.stdin.end(input);
	}
};

// `all` interleaves `stdout` and `stderr`
const makeAllStream$1 = (spawned, {all}) => {
	if (!all || (!spawned.stdout && !spawned.stderr)) {
		return;
	}

	const mixed = mergeStream();

	if (spawned.stdout) {
		mixed.add(spawned.stdout);
	}

	if (spawned.stderr) {
		mixed.add(spawned.stderr);
	}

	return mixed;
};

// On failure, `result.stdout|stderr|all` should contain the currently buffered stream
const getBufferedData = async (stream, streamPromise) => {
	if (!stream) {
		return;
	}

	stream.destroy();

	try {
		return await streamPromise;
	} catch (error) {
		return error.bufferedData;
	}
};

const getStreamPromise = (stream, {encoding, buffer, maxBuffer}) => {
	if (!stream || !buffer) {
		return;
	}

	if (encoding) {
		return getStream(stream, {encoding, maxBuffer});
	}

	return getStream.buffer(stream, {maxBuffer});
};

// Retrieve result of child process: exit code, signal, error, streams (stdout/stderr/all)
const getSpawnedResult$1 = async ({stdout, stderr, all}, {encoding, buffer, maxBuffer}, processDone) => {
	const stdoutPromise = getStreamPromise(stdout, {encoding, buffer, maxBuffer});
	const stderrPromise = getStreamPromise(stderr, {encoding, buffer, maxBuffer});
	const allPromise = getStreamPromise(all, {encoding, buffer, maxBuffer: maxBuffer * 2});

	try {
		return await Promise.all([processDone, stdoutPromise, stderrPromise, allPromise]);
	} catch (error) {
		return Promise.all([
			{error, signal: error.signal, timedOut: error.timedOut},
			getBufferedData(stdout, stdoutPromise),
			getBufferedData(stderr, stderrPromise),
			getBufferedData(all, allPromise)
		]);
	}
};

const validateInputSync$1 = ({input}) => {
	if (isStream(input)) {
		throw new TypeError('The `input` option cannot be a stream in sync mode');
	}
};

var stream$1 = {
	handleInput: handleInput$1,
	makeAllStream: makeAllStream$1,
	getSpawnedResult: getSpawnedResult$1,
	validateInputSync: validateInputSync$1
};

const nativePromisePrototype = (async () => {})().constructor.prototype;
const descriptors = ['then', 'catch', 'finally'].map(property => [
	property,
	Reflect.getOwnPropertyDescriptor(nativePromisePrototype, property)
]);

// The return value is a mixin of `childProcess` and `Promise`
const mergePromise$1 = (spawned, promise) => {
	for (const [property, descriptor] of descriptors) {
		// Starting the main `promise` is deferred to avoid consuming streams
		const value = typeof promise === 'function' ?
			(...args) => Reflect.apply(descriptor.value, promise(), args) :
			descriptor.value.bind(promise);

		Reflect.defineProperty(spawned, property, {...descriptor, value});
	}

	return spawned;
};

// Use promises instead of `child_process` events
const getSpawnedPromise$1 = spawned => {
	return new Promise((resolve, reject) => {
		spawned.on('exit', (exitCode, signal) => {
			resolve({exitCode, signal});
		});

		spawned.on('error', error => {
			reject(error);
		});

		if (spawned.stdin) {
			spawned.stdin.on('error', error => {
				reject(error);
			});
		}
	});
};

var promise = {
	mergePromise: mergePromise$1,
	getSpawnedPromise: getSpawnedPromise$1
};

const normalizeArgs = (file, args = []) => {
	if (!Array.isArray(args)) {
		return [file];
	}

	return [file, ...args];
};

const NO_ESCAPE_REGEXP = /^[\w.-]+$/;
const DOUBLE_QUOTES_REGEXP = /"/g;

const escapeArg = arg => {
	if (typeof arg !== 'string' || NO_ESCAPE_REGEXP.test(arg)) {
		return arg;
	}

	return `"${arg.replace(DOUBLE_QUOTES_REGEXP, '\\"')}"`;
};

const joinCommand$1 = (file, args) => {
	return normalizeArgs(file, args).join(' ');
};

const getEscapedCommand$1 = (file, args) => {
	return normalizeArgs(file, args).map(arg => escapeArg(arg)).join(' ');
};

const SPACES_REGEXP = / +/g;

// Handle `execa.command()`
const parseCommand$1 = command => {
	const tokens = [];
	for (const token of command.trim().split(SPACES_REGEXP)) {
		// Allow spaces to be escaped by a backslash if not meant as a delimiter
		const previousToken = tokens[tokens.length - 1];
		if (previousToken && previousToken.endsWith('\\')) {
			// Merge previous token with current one
			tokens[tokens.length - 1] = `${previousToken.slice(0, -1)} ${token}`;
		} else {
			tokens.push(token);
		}
	}

	return tokens;
};

var command = {
	joinCommand: joinCommand$1,
	getEscapedCommand: getEscapedCommand$1,
	parseCommand: parseCommand$1
};

const path = path$4;
const childProcess = require$$0$1;
const crossSpawn = crossSpawnExports;
const stripFinalNewline = stripFinalNewline$1;
const npmRunPath = npmRunPathExports;
const onetime = onetimeExports;
const makeError = error;
const normalizeStdio = stdioExports;
const {spawnedKill, spawnedCancel, setupTimeout, validateTimeout, setExitHandler} = kill;
const {handleInput, getSpawnedResult, makeAllStream, validateInputSync} = stream$1;
const {mergePromise, getSpawnedPromise} = promise;
const {joinCommand, parseCommand, getEscapedCommand} = command;

const DEFAULT_MAX_BUFFER = 1000 * 1000 * 100;

const getEnv = ({env: envOption, extendEnv, preferLocal, localDir, execPath}) => {
	const env = extendEnv ? {...process.env, ...envOption} : envOption;

	if (preferLocal) {
		return npmRunPath.env({env, cwd: localDir, execPath});
	}

	return env;
};

const handleArguments = (file, args, options = {}) => {
	const parsed = crossSpawn._parse(file, args, options);
	file = parsed.command;
	args = parsed.args;
	options = parsed.options;

	options = {
		maxBuffer: DEFAULT_MAX_BUFFER,
		buffer: true,
		stripFinalNewline: true,
		extendEnv: true,
		preferLocal: false,
		localDir: options.cwd || process.cwd(),
		execPath: process.execPath,
		encoding: 'utf8',
		reject: true,
		cleanup: true,
		all: false,
		windowsHide: true,
		...options
	};

	options.env = getEnv(options);

	options.stdio = normalizeStdio(options);

	if (process.platform === 'win32' && path.basename(file, '.exe') === 'cmd') {
		// #116
		args.unshift('/q');
	}

	return {file, args, options, parsed};
};

const handleOutput = (options, value, error) => {
	if (typeof value !== 'string' && !Buffer.isBuffer(value)) {
		// When `execa.sync()` errors, we normalize it to '' to mimic `execa()`
		return error === undefined ? undefined : '';
	}

	if (options.stripFinalNewline) {
		return stripFinalNewline(value);
	}

	return value;
};

const execa = (file, args, options) => {
	const parsed = handleArguments(file, args, options);
	const command = joinCommand(file, args);
	const escapedCommand = getEscapedCommand(file, args);

	validateTimeout(parsed.options);

	let spawned;
	try {
		spawned = childProcess.spawn(parsed.file, parsed.args, parsed.options);
	} catch (error) {
		// Ensure the returned error is always both a promise and a child process
		const dummySpawned = new childProcess.ChildProcess();
		const errorPromise = Promise.reject(makeError({
			error,
			stdout: '',
			stderr: '',
			all: '',
			command,
			escapedCommand,
			parsed,
			timedOut: false,
			isCanceled: false,
			killed: false
		}));
		return mergePromise(dummySpawned, errorPromise);
	}

	const spawnedPromise = getSpawnedPromise(spawned);
	const timedPromise = setupTimeout(spawned, parsed.options, spawnedPromise);
	const processDone = setExitHandler(spawned, parsed.options, timedPromise);

	const context = {isCanceled: false};

	spawned.kill = spawnedKill.bind(null, spawned.kill.bind(spawned));
	spawned.cancel = spawnedCancel.bind(null, spawned, context);

	const handlePromise = async () => {
		const [{error, exitCode, signal, timedOut}, stdoutResult, stderrResult, allResult] = await getSpawnedResult(spawned, parsed.options, processDone);
		const stdout = handleOutput(parsed.options, stdoutResult);
		const stderr = handleOutput(parsed.options, stderrResult);
		const all = handleOutput(parsed.options, allResult);

		if (error || exitCode !== 0 || signal !== null) {
			const returnedError = makeError({
				error,
				exitCode,
				signal,
				stdout,
				stderr,
				all,
				command,
				escapedCommand,
				parsed,
				timedOut,
				isCanceled: context.isCanceled,
				killed: spawned.killed
			});

			if (!parsed.options.reject) {
				return returnedError;
			}

			throw returnedError;
		}

		return {
			command,
			escapedCommand,
			exitCode: 0,
			stdout,
			stderr,
			all,
			failed: false,
			timedOut: false,
			isCanceled: false,
			killed: false
		};
	};

	const handlePromiseOnce = onetime(handlePromise);

	handleInput(spawned, parsed.options.input);

	spawned.all = makeAllStream(spawned, parsed.options);

	return mergePromise(spawned, handlePromiseOnce);
};

execa$2.exports = execa;

execa$2.exports.sync = (file, args, options) => {
	const parsed = handleArguments(file, args, options);
	const command = joinCommand(file, args);
	const escapedCommand = getEscapedCommand(file, args);

	validateInputSync(parsed.options);

	let result;
	try {
		result = childProcess.spawnSync(parsed.file, parsed.args, parsed.options);
	} catch (error) {
		throw makeError({
			error,
			stdout: '',
			stderr: '',
			all: '',
			command,
			escapedCommand,
			parsed,
			timedOut: false,
			isCanceled: false,
			killed: false
		});
	}

	const stdout = handleOutput(parsed.options, result.stdout, result.error);
	const stderr = handleOutput(parsed.options, result.stderr, result.error);

	if (result.error || result.status !== 0 || result.signal !== null) {
		const error = makeError({
			stdout,
			stderr,
			error: result.error,
			signal: result.signal,
			exitCode: result.status,
			command,
			escapedCommand,
			parsed,
			timedOut: result.error && result.error.code === 'ETIMEDOUT',
			isCanceled: false,
			killed: result.signal !== null
		});

		if (!parsed.options.reject) {
			return error;
		}

		throw error;
	}

	return {
		command,
		escapedCommand,
		exitCode: 0,
		stdout,
		stderr,
		failed: false,
		timedOut: false,
		isCanceled: false,
		killed: false
	};
};

execa$2.exports.command = (command, options) => {
	const [file, ...args] = parseCommand(command);
	return execa(file, args, options);
};

execa$2.exports.commandSync = (command, options) => {
	const [file, ...args] = parseCommand(command);
	return execa.sync(file, args, options);
};

execa$2.exports.node = (scriptPath, args, options = {}) => {
	if (args && !Array.isArray(args) && typeof args === 'object') {
		options = args;
		args = [];
	}

	const stdio = normalizeStdio.node(options);
	const defaultExecArgv = process.execArgv.filter(arg => !arg.startsWith('--inspect'));

	const {
		nodePath = process.execPath,
		nodeOptions = defaultExecArgv
	} = options;

	return execa(
		nodePath,
		[
			...nodeOptions,
			scriptPath,
			...(Array.isArray(args) ? args : [])
		],
		{
			...options,
			stdin: undefined,
			stdout: undefined,
			stderr: undefined,
			stdio,
			shell: false
		}
	);
};

var execaExports = execa$2.exports;
var execa$1 = /*@__PURE__*/getDefaultExportFromCjs(execaExports);

function ansiRegex({onlyFirst = false} = {}) {
	const pattern = [
	    '[\\u001B\\u009B][[\\]()#;?]*(?:(?:(?:(?:;[-a-zA-Z\\d\\/#&.:=?%@~_]+)*|[a-zA-Z\\d]+(?:;[-a-zA-Z\\d\\/#&.:=?%@~_]*)*)?\\u0007)',
		'(?:(?:\\d{1,4}(?:;\\d{0,4})*)?[\\dA-PR-TZcf-ntqry=><~]))'
	].join('|');

	return new RegExp(pattern, onlyFirst ? undefined : 'g');
}

function stripAnsi(string) {
	if (typeof string !== 'string') {
		throw new TypeError(`Expected a \`string\`, got \`${typeof string}\``);
	}

	return string.replace(ansiRegex(), '');
}

const detectDefaultShell = () => {
	const {env} = process$2;

	if (process$2.platform === 'win32') {
		return env.COMSPEC || 'cmd.exe';
	}

	try {
		const {shell} = node_os.userInfo();
		if (shell) {
			return shell;
		}
	} catch {}

	if (process$2.platform === 'darwin') {
		return env.SHELL || '/bin/zsh';
	}

	return env.SHELL || '/bin/sh';
};

// Stores default shell when imported.
const defaultShell = detectDefaultShell();

const args = [
	'-ilc',
	'echo -n "_SHELL_ENV_DELIMITER_"; env; echo -n "_SHELL_ENV_DELIMITER_"; exit',
];

const env = {
	// Disables Oh My Zsh auto-update thing that can block the process.
	DISABLE_AUTO_UPDATE: 'true',
};

const parseEnv = env => {
	env = env.split('_SHELL_ENV_DELIMITER_')[1];
	const returnValue = {};

	for (const line of stripAnsi(env).split('\n').filter(line => Boolean(line))) {
		const [key, ...values] = line.split('=');
		returnValue[key] = values.join('=');
	}

	return returnValue;
};

function shellEnvSync(shell) {
	if (process$2.platform === 'win32') {
		return process$2.env;
	}

	try {
		const {stdout} = execa$1.sync(shell || defaultShell, args, {env});
		return parseEnv(stdout);
	} catch (error) {
		if (shell) {
			throw error;
		} else {
			return process$2.env;
		}
	}
}

function shellPathSync() {
	const {PATH} = shellEnvSync();
	return PATH;
}

function fixPath() {
	if (process$2.platform === 'win32') {
		return;
	}

	process$2.env.PATH = shellPathSync() || [
		'./node_modules/.bin',
		'/.nodebrew/current/bin',
		'/usr/local/bin',
		process$2.env.PATH,
	].join(':');
}

var lib$1 = {};

var readable = {exports: {}};

var stream;
var hasRequiredStream;

function requireStream () {
	if (hasRequiredStream) return stream;
	hasRequiredStream = 1;
	stream = require$$0$4;
	return stream;
}

var buffer_list;
var hasRequiredBuffer_list;

function requireBuffer_list () {
	if (hasRequiredBuffer_list) return buffer_list;
	hasRequiredBuffer_list = 1;

	function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
	function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
	function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
	function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
	function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
	function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
	var _require = require$$0$5,
	  Buffer = _require.Buffer;
	var _require2 = require$$2$1,
	  inspect = _require2.inspect;
	var custom = inspect && inspect.custom || 'inspect';
	function copyBuffer(src, target, offset) {
	  Buffer.prototype.copy.call(src, target, offset);
	}
	buffer_list = /*#__PURE__*/function () {
	  function BufferList() {
	    _classCallCheck(this, BufferList);
	    this.head = null;
	    this.tail = null;
	    this.length = 0;
	  }
	  _createClass(BufferList, [{
	    key: "push",
	    value: function push(v) {
	      var entry = {
	        data: v,
	        next: null
	      };
	      if (this.length > 0) this.tail.next = entry;else this.head = entry;
	      this.tail = entry;
	      ++this.length;
	    }
	  }, {
	    key: "unshift",
	    value: function unshift(v) {
	      var entry = {
	        data: v,
	        next: this.head
	      };
	      if (this.length === 0) this.tail = entry;
	      this.head = entry;
	      ++this.length;
	    }
	  }, {
	    key: "shift",
	    value: function shift() {
	      if (this.length === 0) return;
	      var ret = this.head.data;
	      if (this.length === 1) this.head = this.tail = null;else this.head = this.head.next;
	      --this.length;
	      return ret;
	    }
	  }, {
	    key: "clear",
	    value: function clear() {
	      this.head = this.tail = null;
	      this.length = 0;
	    }
	  }, {
	    key: "join",
	    value: function join(s) {
	      if (this.length === 0) return '';
	      var p = this.head;
	      var ret = '' + p.data;
	      while (p = p.next) ret += s + p.data;
	      return ret;
	    }
	  }, {
	    key: "concat",
	    value: function concat(n) {
	      if (this.length === 0) return Buffer.alloc(0);
	      var ret = Buffer.allocUnsafe(n >>> 0);
	      var p = this.head;
	      var i = 0;
	      while (p) {
	        copyBuffer(p.data, ret, i);
	        i += p.data.length;
	        p = p.next;
	      }
	      return ret;
	    }

	    // Consumes a specified amount of bytes or characters from the buffered data.
	  }, {
	    key: "consume",
	    value: function consume(n, hasStrings) {
	      var ret;
	      if (n < this.head.data.length) {
	        // `slice` is the same for buffers and strings.
	        ret = this.head.data.slice(0, n);
	        this.head.data = this.head.data.slice(n);
	      } else if (n === this.head.data.length) {
	        // First chunk is a perfect match.
	        ret = this.shift();
	      } else {
	        // Result spans more than one buffer.
	        ret = hasStrings ? this._getString(n) : this._getBuffer(n);
	      }
	      return ret;
	    }
	  }, {
	    key: "first",
	    value: function first() {
	      return this.head.data;
	    }

	    // Consumes a specified amount of characters from the buffered data.
	  }, {
	    key: "_getString",
	    value: function _getString(n) {
	      var p = this.head;
	      var c = 1;
	      var ret = p.data;
	      n -= ret.length;
	      while (p = p.next) {
	        var str = p.data;
	        var nb = n > str.length ? str.length : n;
	        if (nb === str.length) ret += str;else ret += str.slice(0, n);
	        n -= nb;
	        if (n === 0) {
	          if (nb === str.length) {
	            ++c;
	            if (p.next) this.head = p.next;else this.head = this.tail = null;
	          } else {
	            this.head = p;
	            p.data = str.slice(nb);
	          }
	          break;
	        }
	        ++c;
	      }
	      this.length -= c;
	      return ret;
	    }

	    // Consumes a specified amount of bytes from the buffered data.
	  }, {
	    key: "_getBuffer",
	    value: function _getBuffer(n) {
	      var ret = Buffer.allocUnsafe(n);
	      var p = this.head;
	      var c = 1;
	      p.data.copy(ret);
	      n -= p.data.length;
	      while (p = p.next) {
	        var buf = p.data;
	        var nb = n > buf.length ? buf.length : n;
	        buf.copy(ret, ret.length - n, 0, nb);
	        n -= nb;
	        if (n === 0) {
	          if (nb === buf.length) {
	            ++c;
	            if (p.next) this.head = p.next;else this.head = this.tail = null;
	          } else {
	            this.head = p;
	            p.data = buf.slice(nb);
	          }
	          break;
	        }
	        ++c;
	      }
	      this.length -= c;
	      return ret;
	    }

	    // Make sure the linked list only shows the minimal necessary information.
	  }, {
	    key: custom,
	    value: function value(_, options) {
	      return inspect(this, _objectSpread(_objectSpread({}, options), {}, {
	        // Only inspect one level.
	        depth: 0,
	        // It should not recurse.
	        customInspect: false
	      }));
	    }
	  }]);
	  return BufferList;
	}();
	return buffer_list;
}

var destroy_1;
var hasRequiredDestroy;

function requireDestroy () {
	if (hasRequiredDestroy) return destroy_1;
	hasRequiredDestroy = 1;

	// undocumented cb() API, needed for core, not for public API
	function destroy(err, cb) {
	  var _this = this;
	  var readableDestroyed = this._readableState && this._readableState.destroyed;
	  var writableDestroyed = this._writableState && this._writableState.destroyed;
	  if (readableDestroyed || writableDestroyed) {
	    if (cb) {
	      cb(err);
	    } else if (err) {
	      if (!this._writableState) {
	        process.nextTick(emitErrorNT, this, err);
	      } else if (!this._writableState.errorEmitted) {
	        this._writableState.errorEmitted = true;
	        process.nextTick(emitErrorNT, this, err);
	      }
	    }
	    return this;
	  }

	  // we set destroyed to true before firing error callbacks in order
	  // to make it re-entrance safe in case destroy() is called within callbacks

	  if (this._readableState) {
	    this._readableState.destroyed = true;
	  }

	  // if this is a duplex stream mark the writable part as destroyed as well
	  if (this._writableState) {
	    this._writableState.destroyed = true;
	  }
	  this._destroy(err || null, function (err) {
	    if (!cb && err) {
	      if (!_this._writableState) {
	        process.nextTick(emitErrorAndCloseNT, _this, err);
	      } else if (!_this._writableState.errorEmitted) {
	        _this._writableState.errorEmitted = true;
	        process.nextTick(emitErrorAndCloseNT, _this, err);
	      } else {
	        process.nextTick(emitCloseNT, _this);
	      }
	    } else if (cb) {
	      process.nextTick(emitCloseNT, _this);
	      cb(err);
	    } else {
	      process.nextTick(emitCloseNT, _this);
	    }
	  });
	  return this;
	}
	function emitErrorAndCloseNT(self, err) {
	  emitErrorNT(self, err);
	  emitCloseNT(self);
	}
	function emitCloseNT(self) {
	  if (self._writableState && !self._writableState.emitClose) return;
	  if (self._readableState && !self._readableState.emitClose) return;
	  self.emit('close');
	}
	function undestroy() {
	  if (this._readableState) {
	    this._readableState.destroyed = false;
	    this._readableState.reading = false;
	    this._readableState.ended = false;
	    this._readableState.endEmitted = false;
	  }
	  if (this._writableState) {
	    this._writableState.destroyed = false;
	    this._writableState.ended = false;
	    this._writableState.ending = false;
	    this._writableState.finalCalled = false;
	    this._writableState.prefinished = false;
	    this._writableState.finished = false;
	    this._writableState.errorEmitted = false;
	  }
	}
	function emitErrorNT(self, err) {
	  self.emit('error', err);
	}
	function errorOrDestroy(stream, err) {
	  // We have tests that rely on errors being emitted
	  // in the same tick, so changing this is semver major.
	  // For now when you opt-in to autoDestroy we allow
	  // the error to be emitted nextTick. In a future
	  // semver major update we should change the default to this.

	  var rState = stream._readableState;
	  var wState = stream._writableState;
	  if (rState && rState.autoDestroy || wState && wState.autoDestroy) stream.destroy(err);else stream.emit('error', err);
	}
	destroy_1 = {
	  destroy: destroy,
	  undestroy: undestroy,
	  errorOrDestroy: errorOrDestroy
	};
	return destroy_1;
}

var errors = {};

var hasRequiredErrors;

function requireErrors () {
	if (hasRequiredErrors) return errors;
	hasRequiredErrors = 1;

	const codes = {};

	function createErrorType(code, message, Base) {
	  if (!Base) {
	    Base = Error;
	  }

	  function getMessage (arg1, arg2, arg3) {
	    if (typeof message === 'string') {
	      return message
	    } else {
	      return message(arg1, arg2, arg3)
	    }
	  }

	  class NodeError extends Base {
	    constructor (arg1, arg2, arg3) {
	      super(getMessage(arg1, arg2, arg3));
	    }
	  }

	  NodeError.prototype.name = Base.name;
	  NodeError.prototype.code = code;

	  codes[code] = NodeError;
	}

	// https://github.com/nodejs/node/blob/v10.8.0/lib/internal/errors.js
	function oneOf(expected, thing) {
	  if (Array.isArray(expected)) {
	    const len = expected.length;
	    expected = expected.map((i) => String(i));
	    if (len > 2) {
	      return `one of ${thing} ${expected.slice(0, len - 1).join(', ')}, or ` +
	             expected[len - 1];
	    } else if (len === 2) {
	      return `one of ${thing} ${expected[0]} or ${expected[1]}`;
	    } else {
	      return `of ${thing} ${expected[0]}`;
	    }
	  } else {
	    return `of ${thing} ${String(expected)}`;
	  }
	}

	// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith
	function startsWith(str, search, pos) {
		return str.substr(!pos || pos < 0 ? 0 : +pos, search.length) === search;
	}

	// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith
	function endsWith(str, search, this_len) {
		if (this_len === undefined || this_len > str.length) {
			this_len = str.length;
		}
		return str.substring(this_len - search.length, this_len) === search;
	}

	// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/includes
	function includes(str, search, start) {
	  if (typeof start !== 'number') {
	    start = 0;
	  }

	  if (start + search.length > str.length) {
	    return false;
	  } else {
	    return str.indexOf(search, start) !== -1;
	  }
	}

	createErrorType('ERR_INVALID_OPT_VALUE', function (name, value) {
	  return 'The value "' + value + '" is invalid for option "' + name + '"'
	}, TypeError);
	createErrorType('ERR_INVALID_ARG_TYPE', function (name, expected, actual) {
	  // determiner: 'must be' or 'must not be'
	  let determiner;
	  if (typeof expected === 'string' && startsWith(expected, 'not ')) {
	    determiner = 'must not be';
	    expected = expected.replace(/^not /, '');
	  } else {
	    determiner = 'must be';
	  }

	  let msg;
	  if (endsWith(name, ' argument')) {
	    // For cases like 'first argument'
	    msg = `The ${name} ${determiner} ${oneOf(expected, 'type')}`;
	  } else {
	    const type = includes(name, '.') ? 'property' : 'argument';
	    msg = `The "${name}" ${type} ${determiner} ${oneOf(expected, 'type')}`;
	  }

	  msg += `. Received type ${typeof actual}`;
	  return msg;
	}, TypeError);
	createErrorType('ERR_STREAM_PUSH_AFTER_EOF', 'stream.push() after EOF');
	createErrorType('ERR_METHOD_NOT_IMPLEMENTED', function (name) {
	  return 'The ' + name + ' method is not implemented'
	});
	createErrorType('ERR_STREAM_PREMATURE_CLOSE', 'Premature close');
	createErrorType('ERR_STREAM_DESTROYED', function (name) {
	  return 'Cannot call ' + name + ' after a stream was destroyed';
	});
	createErrorType('ERR_MULTIPLE_CALLBACK', 'Callback called multiple times');
	createErrorType('ERR_STREAM_CANNOT_PIPE', 'Cannot pipe, not readable');
	createErrorType('ERR_STREAM_WRITE_AFTER_END', 'write after end');
	createErrorType('ERR_STREAM_NULL_VALUES', 'May not write null values to stream', TypeError);
	createErrorType('ERR_UNKNOWN_ENCODING', function (arg) {
	  return 'Unknown encoding: ' + arg
	}, TypeError);
	createErrorType('ERR_STREAM_UNSHIFT_AFTER_END_EVENT', 'stream.unshift() after end event');

	errors.codes = codes;
	return errors;
}

var state;
var hasRequiredState;

function requireState () {
	if (hasRequiredState) return state;
	hasRequiredState = 1;

	var ERR_INVALID_OPT_VALUE = requireErrors().codes.ERR_INVALID_OPT_VALUE;
	function highWaterMarkFrom(options, isDuplex, duplexKey) {
	  return options.highWaterMark != null ? options.highWaterMark : isDuplex ? options[duplexKey] : null;
	}
	function getHighWaterMark(state, options, duplexKey, isDuplex) {
	  var hwm = highWaterMarkFrom(options, isDuplex, duplexKey);
	  if (hwm != null) {
	    if (!(isFinite(hwm) && Math.floor(hwm) === hwm) || hwm < 0) {
	      var name = isDuplex ? duplexKey : 'highWaterMark';
	      throw new ERR_INVALID_OPT_VALUE(name, hwm);
	    }
	    return Math.floor(hwm);
	  }

	  // Default value
	  return state.objectMode ? 16 : 16 * 1024;
	}
	state = {
	  getHighWaterMark: getHighWaterMark
	};
	return state;
}

var inherits = {exports: {}};

var inherits_browser = {exports: {}};

var hasRequiredInherits_browser;

function requireInherits_browser () {
	if (hasRequiredInherits_browser) return inherits_browser.exports;
	hasRequiredInherits_browser = 1;
	if (typeof Object.create === 'function') {
	  // implementation from standard node.js 'util' module
	  inherits_browser.exports = function inherits(ctor, superCtor) {
	    if (superCtor) {
	      ctor.super_ = superCtor;
	      ctor.prototype = Object.create(superCtor.prototype, {
	        constructor: {
	          value: ctor,
	          enumerable: false,
	          writable: true,
	          configurable: true
	        }
	      });
	    }
	  };
	} else {
	  // old school shim for old browsers
	  inherits_browser.exports = function inherits(ctor, superCtor) {
	    if (superCtor) {
	      ctor.super_ = superCtor;
	      var TempCtor = function () {};
	      TempCtor.prototype = superCtor.prototype;
	      ctor.prototype = new TempCtor();
	      ctor.prototype.constructor = ctor;
	    }
	  };
	}
	return inherits_browser.exports;
}

var hasRequiredInherits;

function requireInherits () {
	if (hasRequiredInherits) return inherits.exports;
	hasRequiredInherits = 1;
	try {
	  var util = require('util');
	  /* istanbul ignore next */
	  if (typeof util.inherits !== 'function') throw '';
	  inherits.exports = util.inherits;
	} catch (e) {
	  /* istanbul ignore next */
	  inherits.exports = requireInherits_browser();
	}
	return inherits.exports;
}

var node;
var hasRequiredNode;

function requireNode () {
	if (hasRequiredNode) return node;
	hasRequiredNode = 1;
	/**
	 * For Node.js, simply re-export the core `util.deprecate` function.
	 */

	node = require$$2$1.deprecate;
	return node;
}

var _stream_writable;
var hasRequired_stream_writable;

function require_stream_writable () {
	if (hasRequired_stream_writable) return _stream_writable;
	hasRequired_stream_writable = 1;

	_stream_writable = Writable;

	// It seems a linked list but it is not
	// there will be only 2 of these for each stream
	function CorkedRequest(state) {
	  var _this = this;
	  this.next = null;
	  this.entry = null;
	  this.finish = function () {
	    onCorkedFinish(_this, state);
	  };
	}
	/* </replacement> */

	/*<replacement>*/
	var Duplex;
	/*</replacement>*/

	Writable.WritableState = WritableState;

	/*<replacement>*/
	var internalUtil = {
	  deprecate: requireNode()
	};
	/*</replacement>*/

	/*<replacement>*/
	var Stream = requireStream();
	/*</replacement>*/

	var Buffer = require$$0$5.Buffer;
	var OurUint8Array = (typeof commonjsGlobal !== 'undefined' ? commonjsGlobal : typeof window !== 'undefined' ? window : typeof self !== 'undefined' ? self : {}).Uint8Array || function () {};
	function _uint8ArrayToBuffer(chunk) {
	  return Buffer.from(chunk);
	}
	function _isUint8Array(obj) {
	  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
	}
	var destroyImpl = requireDestroy();
	var _require = requireState(),
	  getHighWaterMark = _require.getHighWaterMark;
	var _require$codes = requireErrors().codes,
	  ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE,
	  ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED,
	  ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK,
	  ERR_STREAM_CANNOT_PIPE = _require$codes.ERR_STREAM_CANNOT_PIPE,
	  ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED,
	  ERR_STREAM_NULL_VALUES = _require$codes.ERR_STREAM_NULL_VALUES,
	  ERR_STREAM_WRITE_AFTER_END = _require$codes.ERR_STREAM_WRITE_AFTER_END,
	  ERR_UNKNOWN_ENCODING = _require$codes.ERR_UNKNOWN_ENCODING;
	var errorOrDestroy = destroyImpl.errorOrDestroy;
	requireInherits()(Writable, Stream);
	function nop() {}
	function WritableState(options, stream, isDuplex) {
	  Duplex = Duplex || require_stream_duplex();
	  options = options || {};

	  // Duplex streams are both readable and writable, but share
	  // the same options object.
	  // However, some cases require setting options to different
	  // values for the readable and the writable sides of the duplex stream,
	  // e.g. options.readableObjectMode vs. options.writableObjectMode, etc.
	  if (typeof isDuplex !== 'boolean') isDuplex = stream instanceof Duplex;

	  // object stream flag to indicate whether or not this stream
	  // contains buffers or objects.
	  this.objectMode = !!options.objectMode;
	  if (isDuplex) this.objectMode = this.objectMode || !!options.writableObjectMode;

	  // the point at which write() starts returning false
	  // Note: 0 is a valid value, means that we always return false if
	  // the entire buffer is not flushed immediately on write()
	  this.highWaterMark = getHighWaterMark(this, options, 'writableHighWaterMark', isDuplex);

	  // if _final has been called
	  this.finalCalled = false;

	  // drain event flag.
	  this.needDrain = false;
	  // at the start of calling end()
	  this.ending = false;
	  // when end() has been called, and returned
	  this.ended = false;
	  // when 'finish' is emitted
	  this.finished = false;

	  // has it been destroyed
	  this.destroyed = false;

	  // should we decode strings into buffers before passing to _write?
	  // this is here so that some node-core streams can optimize string
	  // handling at a lower level.
	  var noDecode = options.decodeStrings === false;
	  this.decodeStrings = !noDecode;

	  // Crypto is kind of old and crusty.  Historically, its default string
	  // encoding is 'binary' so we have to make this configurable.
	  // Everything else in the universe uses 'utf8', though.
	  this.defaultEncoding = options.defaultEncoding || 'utf8';

	  // not an actual buffer we keep track of, but a measurement
	  // of how much we're waiting to get pushed to some underlying
	  // socket or file.
	  this.length = 0;

	  // a flag to see when we're in the middle of a write.
	  this.writing = false;

	  // when true all writes will be buffered until .uncork() call
	  this.corked = 0;

	  // a flag to be able to tell if the onwrite cb is called immediately,
	  // or on a later tick.  We set this to true at first, because any
	  // actions that shouldn't happen until "later" should generally also
	  // not happen before the first write call.
	  this.sync = true;

	  // a flag to know if we're processing previously buffered items, which
	  // may call the _write() callback in the same tick, so that we don't
	  // end up in an overlapped onwrite situation.
	  this.bufferProcessing = false;

	  // the callback that's passed to _write(chunk,cb)
	  this.onwrite = function (er) {
	    onwrite(stream, er);
	  };

	  // the callback that the user supplies to write(chunk,encoding,cb)
	  this.writecb = null;

	  // the amount that is being written when _write is called.
	  this.writelen = 0;
	  this.bufferedRequest = null;
	  this.lastBufferedRequest = null;

	  // number of pending user-supplied write callbacks
	  // this must be 0 before 'finish' can be emitted
	  this.pendingcb = 0;

	  // emit prefinish if the only thing we're waiting for is _write cbs
	  // This is relevant for synchronous Transform streams
	  this.prefinished = false;

	  // True if the error was already emitted and should not be thrown again
	  this.errorEmitted = false;

	  // Should close be emitted on destroy. Defaults to true.
	  this.emitClose = options.emitClose !== false;

	  // Should .destroy() be called after 'finish' (and potentially 'end')
	  this.autoDestroy = !!options.autoDestroy;

	  // count buffered requests
	  this.bufferedRequestCount = 0;

	  // allocate the first CorkedRequest, there is always
	  // one allocated and free to use, and we maintain at most two
	  this.corkedRequestsFree = new CorkedRequest(this);
	}
	WritableState.prototype.getBuffer = function getBuffer() {
	  var current = this.bufferedRequest;
	  var out = [];
	  while (current) {
	    out.push(current);
	    current = current.next;
	  }
	  return out;
	};
	(function () {
	  try {
	    Object.defineProperty(WritableState.prototype, 'buffer', {
	      get: internalUtil.deprecate(function writableStateBufferGetter() {
	        return this.getBuffer();
	      }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.', 'DEP0003')
	    });
	  } catch (_) {}
	})();

	// Test _writableState for inheritance to account for Duplex streams,
	// whose prototype chain only points to Readable.
	var realHasInstance;
	if (typeof Symbol === 'function' && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === 'function') {
	  realHasInstance = Function.prototype[Symbol.hasInstance];
	  Object.defineProperty(Writable, Symbol.hasInstance, {
	    value: function value(object) {
	      if (realHasInstance.call(this, object)) return true;
	      if (this !== Writable) return false;
	      return object && object._writableState instanceof WritableState;
	    }
	  });
	} else {
	  realHasInstance = function realHasInstance(object) {
	    return object instanceof this;
	  };
	}
	function Writable(options) {
	  Duplex = Duplex || require_stream_duplex();

	  // Writable ctor is applied to Duplexes, too.
	  // `realHasInstance` is necessary because using plain `instanceof`
	  // would return false, as no `_writableState` property is attached.

	  // Trying to use the custom `instanceof` for Writable here will also break the
	  // Node.js LazyTransform implementation, which has a non-trivial getter for
	  // `_writableState` that would lead to infinite recursion.

	  // Checking for a Stream.Duplex instance is faster here instead of inside
	  // the WritableState constructor, at least with V8 6.5
	  var isDuplex = this instanceof Duplex;
	  if (!isDuplex && !realHasInstance.call(Writable, this)) return new Writable(options);
	  this._writableState = new WritableState(options, this, isDuplex);

	  // legacy.
	  this.writable = true;
	  if (options) {
	    if (typeof options.write === 'function') this._write = options.write;
	    if (typeof options.writev === 'function') this._writev = options.writev;
	    if (typeof options.destroy === 'function') this._destroy = options.destroy;
	    if (typeof options.final === 'function') this._final = options.final;
	  }
	  Stream.call(this);
	}

	// Otherwise people can pipe Writable streams, which is just wrong.
	Writable.prototype.pipe = function () {
	  errorOrDestroy(this, new ERR_STREAM_CANNOT_PIPE());
	};
	function writeAfterEnd(stream, cb) {
	  var er = new ERR_STREAM_WRITE_AFTER_END();
	  // TODO: defer error events consistently everywhere, not just the cb
	  errorOrDestroy(stream, er);
	  process.nextTick(cb, er);
	}

	// Checks that a user-supplied chunk is valid, especially for the particular
	// mode the stream is in. Currently this means that `null` is never accepted
	// and undefined/non-string values are only allowed in object mode.
	function validChunk(stream, state, chunk, cb) {
	  var er;
	  if (chunk === null) {
	    er = new ERR_STREAM_NULL_VALUES();
	  } else if (typeof chunk !== 'string' && !state.objectMode) {
	    er = new ERR_INVALID_ARG_TYPE('chunk', ['string', 'Buffer'], chunk);
	  }
	  if (er) {
	    errorOrDestroy(stream, er);
	    process.nextTick(cb, er);
	    return false;
	  }
	  return true;
	}
	Writable.prototype.write = function (chunk, encoding, cb) {
	  var state = this._writableState;
	  var ret = false;
	  var isBuf = !state.objectMode && _isUint8Array(chunk);
	  if (isBuf && !Buffer.isBuffer(chunk)) {
	    chunk = _uint8ArrayToBuffer(chunk);
	  }
	  if (typeof encoding === 'function') {
	    cb = encoding;
	    encoding = null;
	  }
	  if (isBuf) encoding = 'buffer';else if (!encoding) encoding = state.defaultEncoding;
	  if (typeof cb !== 'function') cb = nop;
	  if (state.ending) writeAfterEnd(this, cb);else if (isBuf || validChunk(this, state, chunk, cb)) {
	    state.pendingcb++;
	    ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);
	  }
	  return ret;
	};
	Writable.prototype.cork = function () {
	  this._writableState.corked++;
	};
	Writable.prototype.uncork = function () {
	  var state = this._writableState;
	  if (state.corked) {
	    state.corked--;
	    if (!state.writing && !state.corked && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);
	  }
	};
	Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
	  // node::ParseEncoding() requires lower case.
	  if (typeof encoding === 'string') encoding = encoding.toLowerCase();
	  if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new ERR_UNKNOWN_ENCODING(encoding);
	  this._writableState.defaultEncoding = encoding;
	  return this;
	};
	Object.defineProperty(Writable.prototype, 'writableBuffer', {
	  // making it explicit this property is not enumerable
	  // because otherwise some prototype manipulation in
	  // userland will fail
	  enumerable: false,
	  get: function get() {
	    return this._writableState && this._writableState.getBuffer();
	  }
	});
	function decodeChunk(state, chunk, encoding) {
	  if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {
	    chunk = Buffer.from(chunk, encoding);
	  }
	  return chunk;
	}
	Object.defineProperty(Writable.prototype, 'writableHighWaterMark', {
	  // making it explicit this property is not enumerable
	  // because otherwise some prototype manipulation in
	  // userland will fail
	  enumerable: false,
	  get: function get() {
	    return this._writableState.highWaterMark;
	  }
	});

	// if we're already writing something, then just put this
	// in the queue, and wait our turn.  Otherwise, call _write
	// If we return false, then we need a drain event, so set that flag.
	function writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {
	  if (!isBuf) {
	    var newChunk = decodeChunk(state, chunk, encoding);
	    if (chunk !== newChunk) {
	      isBuf = true;
	      encoding = 'buffer';
	      chunk = newChunk;
	    }
	  }
	  var len = state.objectMode ? 1 : chunk.length;
	  state.length += len;
	  var ret = state.length < state.highWaterMark;
	  // we must ensure that previous needDrain will not be reset to false.
	  if (!ret) state.needDrain = true;
	  if (state.writing || state.corked) {
	    var last = state.lastBufferedRequest;
	    state.lastBufferedRequest = {
	      chunk: chunk,
	      encoding: encoding,
	      isBuf: isBuf,
	      callback: cb,
	      next: null
	    };
	    if (last) {
	      last.next = state.lastBufferedRequest;
	    } else {
	      state.bufferedRequest = state.lastBufferedRequest;
	    }
	    state.bufferedRequestCount += 1;
	  } else {
	    doWrite(stream, state, false, len, chunk, encoding, cb);
	  }
	  return ret;
	}
	function doWrite(stream, state, writev, len, chunk, encoding, cb) {
	  state.writelen = len;
	  state.writecb = cb;
	  state.writing = true;
	  state.sync = true;
	  if (state.destroyed) state.onwrite(new ERR_STREAM_DESTROYED('write'));else if (writev) stream._writev(chunk, state.onwrite);else stream._write(chunk, encoding, state.onwrite);
	  state.sync = false;
	}
	function onwriteError(stream, state, sync, er, cb) {
	  --state.pendingcb;
	  if (sync) {
	    // defer the callback if we are being called synchronously
	    // to avoid piling up things on the stack
	    process.nextTick(cb, er);
	    // this can emit finish, and it will always happen
	    // after error
	    process.nextTick(finishMaybe, stream, state);
	    stream._writableState.errorEmitted = true;
	    errorOrDestroy(stream, er);
	  } else {
	    // the caller expect this to happen before if
	    // it is async
	    cb(er);
	    stream._writableState.errorEmitted = true;
	    errorOrDestroy(stream, er);
	    // this can emit finish, but finish must
	    // always follow error
	    finishMaybe(stream, state);
	  }
	}
	function onwriteStateUpdate(state) {
	  state.writing = false;
	  state.writecb = null;
	  state.length -= state.writelen;
	  state.writelen = 0;
	}
	function onwrite(stream, er) {
	  var state = stream._writableState;
	  var sync = state.sync;
	  var cb = state.writecb;
	  if (typeof cb !== 'function') throw new ERR_MULTIPLE_CALLBACK();
	  onwriteStateUpdate(state);
	  if (er) onwriteError(stream, state, sync, er, cb);else {
	    // Check if we're actually ready to finish, but don't emit yet
	    var finished = needFinish(state) || stream.destroyed;
	    if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
	      clearBuffer(stream, state);
	    }
	    if (sync) {
	      process.nextTick(afterWrite, stream, state, finished, cb);
	    } else {
	      afterWrite(stream, state, finished, cb);
	    }
	  }
	}
	function afterWrite(stream, state, finished, cb) {
	  if (!finished) onwriteDrain(stream, state);
	  state.pendingcb--;
	  cb();
	  finishMaybe(stream, state);
	}

	// Must force callback to be called on nextTick, so that we don't
	// emit 'drain' before the write() consumer gets the 'false' return
	// value, and has a chance to attach a 'drain' listener.
	function onwriteDrain(stream, state) {
	  if (state.length === 0 && state.needDrain) {
	    state.needDrain = false;
	    stream.emit('drain');
	  }
	}

	// if there's something in the buffer waiting, then process it
	function clearBuffer(stream, state) {
	  state.bufferProcessing = true;
	  var entry = state.bufferedRequest;
	  if (stream._writev && entry && entry.next) {
	    // Fast case, write everything using _writev()
	    var l = state.bufferedRequestCount;
	    var buffer = new Array(l);
	    var holder = state.corkedRequestsFree;
	    holder.entry = entry;
	    var count = 0;
	    var allBuffers = true;
	    while (entry) {
	      buffer[count] = entry;
	      if (!entry.isBuf) allBuffers = false;
	      entry = entry.next;
	      count += 1;
	    }
	    buffer.allBuffers = allBuffers;
	    doWrite(stream, state, true, state.length, buffer, '', holder.finish);

	    // doWrite is almost always async, defer these to save a bit of time
	    // as the hot path ends with doWrite
	    state.pendingcb++;
	    state.lastBufferedRequest = null;
	    if (holder.next) {
	      state.corkedRequestsFree = holder.next;
	      holder.next = null;
	    } else {
	      state.corkedRequestsFree = new CorkedRequest(state);
	    }
	    state.bufferedRequestCount = 0;
	  } else {
	    // Slow case, write chunks one-by-one
	    while (entry) {
	      var chunk = entry.chunk;
	      var encoding = entry.encoding;
	      var cb = entry.callback;
	      var len = state.objectMode ? 1 : chunk.length;
	      doWrite(stream, state, false, len, chunk, encoding, cb);
	      entry = entry.next;
	      state.bufferedRequestCount--;
	      // if we didn't call the onwrite immediately, then
	      // it means that we need to wait until it does.
	      // also, that means that the chunk and cb are currently
	      // being processed, so move the buffer counter past them.
	      if (state.writing) {
	        break;
	      }
	    }
	    if (entry === null) state.lastBufferedRequest = null;
	  }
	  state.bufferedRequest = entry;
	  state.bufferProcessing = false;
	}
	Writable.prototype._write = function (chunk, encoding, cb) {
	  cb(new ERR_METHOD_NOT_IMPLEMENTED('_write()'));
	};
	Writable.prototype._writev = null;
	Writable.prototype.end = function (chunk, encoding, cb) {
	  var state = this._writableState;
	  if (typeof chunk === 'function') {
	    cb = chunk;
	    chunk = null;
	    encoding = null;
	  } else if (typeof encoding === 'function') {
	    cb = encoding;
	    encoding = null;
	  }
	  if (chunk !== null && chunk !== undefined) this.write(chunk, encoding);

	  // .end() fully uncorks
	  if (state.corked) {
	    state.corked = 1;
	    this.uncork();
	  }

	  // ignore unnecessary end() calls.
	  if (!state.ending) endWritable(this, state, cb);
	  return this;
	};
	Object.defineProperty(Writable.prototype, 'writableLength', {
	  // making it explicit this property is not enumerable
	  // because otherwise some prototype manipulation in
	  // userland will fail
	  enumerable: false,
	  get: function get() {
	    return this._writableState.length;
	  }
	});
	function needFinish(state) {
	  return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
	}
	function callFinal(stream, state) {
	  stream._final(function (err) {
	    state.pendingcb--;
	    if (err) {
	      errorOrDestroy(stream, err);
	    }
	    state.prefinished = true;
	    stream.emit('prefinish');
	    finishMaybe(stream, state);
	  });
	}
	function prefinish(stream, state) {
	  if (!state.prefinished && !state.finalCalled) {
	    if (typeof stream._final === 'function' && !state.destroyed) {
	      state.pendingcb++;
	      state.finalCalled = true;
	      process.nextTick(callFinal, stream, state);
	    } else {
	      state.prefinished = true;
	      stream.emit('prefinish');
	    }
	  }
	}
	function finishMaybe(stream, state) {
	  var need = needFinish(state);
	  if (need) {
	    prefinish(stream, state);
	    if (state.pendingcb === 0) {
	      state.finished = true;
	      stream.emit('finish');
	      if (state.autoDestroy) {
	        // In case of duplex streams we need a way to detect
	        // if the readable side is ready for autoDestroy as well
	        var rState = stream._readableState;
	        if (!rState || rState.autoDestroy && rState.endEmitted) {
	          stream.destroy();
	        }
	      }
	    }
	  }
	  return need;
	}
	function endWritable(stream, state, cb) {
	  state.ending = true;
	  finishMaybe(stream, state);
	  if (cb) {
	    if (state.finished) process.nextTick(cb);else stream.once('finish', cb);
	  }
	  state.ended = true;
	  stream.writable = false;
	}
	function onCorkedFinish(corkReq, state, err) {
	  var entry = corkReq.entry;
	  corkReq.entry = null;
	  while (entry) {
	    var cb = entry.callback;
	    state.pendingcb--;
	    cb(err);
	    entry = entry.next;
	  }

	  // reuse the free corkReq.
	  state.corkedRequestsFree.next = corkReq;
	}
	Object.defineProperty(Writable.prototype, 'destroyed', {
	  // making it explicit this property is not enumerable
	  // because otherwise some prototype manipulation in
	  // userland will fail
	  enumerable: false,
	  get: function get() {
	    if (this._writableState === undefined) {
	      return false;
	    }
	    return this._writableState.destroyed;
	  },
	  set: function set(value) {
	    // we ignore the value if the stream
	    // has not been initialized yet
	    if (!this._writableState) {
	      return;
	    }

	    // backward compatibility, the user is explicitly
	    // managing destroyed
	    this._writableState.destroyed = value;
	  }
	});
	Writable.prototype.destroy = destroyImpl.destroy;
	Writable.prototype._undestroy = destroyImpl.undestroy;
	Writable.prototype._destroy = function (err, cb) {
	  cb(err);
	};
	return _stream_writable;
}

var _stream_duplex;
var hasRequired_stream_duplex;

function require_stream_duplex () {
	if (hasRequired_stream_duplex) return _stream_duplex;
	hasRequired_stream_duplex = 1;

	/*<replacement>*/
	var objectKeys = Object.keys || function (obj) {
	  var keys = [];
	  for (var key in obj) keys.push(key);
	  return keys;
	};
	/*</replacement>*/

	_stream_duplex = Duplex;
	var Readable = require_stream_readable();
	var Writable = require_stream_writable();
	requireInherits()(Duplex, Readable);
	{
	  // Allow the keys array to be GC'ed.
	  var keys = objectKeys(Writable.prototype);
	  for (var v = 0; v < keys.length; v++) {
	    var method = keys[v];
	    if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];
	  }
	}
	function Duplex(options) {
	  if (!(this instanceof Duplex)) return new Duplex(options);
	  Readable.call(this, options);
	  Writable.call(this, options);
	  this.allowHalfOpen = true;
	  if (options) {
	    if (options.readable === false) this.readable = false;
	    if (options.writable === false) this.writable = false;
	    if (options.allowHalfOpen === false) {
	      this.allowHalfOpen = false;
	      this.once('end', onend);
	    }
	  }
	}
	Object.defineProperty(Duplex.prototype, 'writableHighWaterMark', {
	  // making it explicit this property is not enumerable
	  // because otherwise some prototype manipulation in
	  // userland will fail
	  enumerable: false,
	  get: function get() {
	    return this._writableState.highWaterMark;
	  }
	});
	Object.defineProperty(Duplex.prototype, 'writableBuffer', {
	  // making it explicit this property is not enumerable
	  // because otherwise some prototype manipulation in
	  // userland will fail
	  enumerable: false,
	  get: function get() {
	    return this._writableState && this._writableState.getBuffer();
	  }
	});
	Object.defineProperty(Duplex.prototype, 'writableLength', {
	  // making it explicit this property is not enumerable
	  // because otherwise some prototype manipulation in
	  // userland will fail
	  enumerable: false,
	  get: function get() {
	    return this._writableState.length;
	  }
	});

	// the no-half-open enforcer
	function onend() {
	  // If the writable side ended, then we're ok.
	  if (this._writableState.ended) return;

	  // no more data can be written.
	  // But allow more writes to happen in this tick.
	  process.nextTick(onEndNT, this);
	}
	function onEndNT(self) {
	  self.end();
	}
	Object.defineProperty(Duplex.prototype, 'destroyed', {
	  // making it explicit this property is not enumerable
	  // because otherwise some prototype manipulation in
	  // userland will fail
	  enumerable: false,
	  get: function get() {
	    if (this._readableState === undefined || this._writableState === undefined) {
	      return false;
	    }
	    return this._readableState.destroyed && this._writableState.destroyed;
	  },
	  set: function set(value) {
	    // we ignore the value if the stream
	    // has not been initialized yet
	    if (this._readableState === undefined || this._writableState === undefined) {
	      return;
	    }

	    // backward compatibility, the user is explicitly
	    // managing destroyed
	    this._readableState.destroyed = value;
	    this._writableState.destroyed = value;
	  }
	});
	return _stream_duplex;
}

var string_decoder = {};

var safeBuffer = {exports: {}};

/*! safe-buffer. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */

var hasRequiredSafeBuffer;

function requireSafeBuffer () {
	if (hasRequiredSafeBuffer) return safeBuffer.exports;
	hasRequiredSafeBuffer = 1;
	(function (module, exports) {
		/* eslint-disable node/no-deprecated-api */
		var buffer = require$$0$5;
		var Buffer = buffer.Buffer;

		// alternative to using Object.keys for old browsers
		function copyProps (src, dst) {
		  for (var key in src) {
		    dst[key] = src[key];
		  }
		}
		if (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {
		  module.exports = buffer;
		} else {
		  // Copy properties from require('buffer')
		  copyProps(buffer, exports);
		  exports.Buffer = SafeBuffer;
		}

		function SafeBuffer (arg, encodingOrOffset, length) {
		  return Buffer(arg, encodingOrOffset, length)
		}

		SafeBuffer.prototype = Object.create(Buffer.prototype);

		// Copy static methods from Buffer
		copyProps(Buffer, SafeBuffer);

		SafeBuffer.from = function (arg, encodingOrOffset, length) {
		  if (typeof arg === 'number') {
		    throw new TypeError('Argument must not be a number')
		  }
		  return Buffer(arg, encodingOrOffset, length)
		};

		SafeBuffer.alloc = function (size, fill, encoding) {
		  if (typeof size !== 'number') {
		    throw new TypeError('Argument must be a number')
		  }
		  var buf = Buffer(size);
		  if (fill !== undefined) {
		    if (typeof encoding === 'string') {
		      buf.fill(fill, encoding);
		    } else {
		      buf.fill(fill);
		    }
		  } else {
		    buf.fill(0);
		  }
		  return buf
		};

		SafeBuffer.allocUnsafe = function (size) {
		  if (typeof size !== 'number') {
		    throw new TypeError('Argument must be a number')
		  }
		  return Buffer(size)
		};

		SafeBuffer.allocUnsafeSlow = function (size) {
		  if (typeof size !== 'number') {
		    throw new TypeError('Argument must be a number')
		  }
		  return buffer.SlowBuffer(size)
		}; 
	} (safeBuffer, safeBuffer.exports));
	return safeBuffer.exports;
}

var hasRequiredString_decoder;

function requireString_decoder () {
	if (hasRequiredString_decoder) return string_decoder;
	hasRequiredString_decoder = 1;

	/*<replacement>*/

	var Buffer = requireSafeBuffer().Buffer;
	/*</replacement>*/

	var isEncoding = Buffer.isEncoding || function (encoding) {
	  encoding = '' + encoding;
	  switch (encoding && encoding.toLowerCase()) {
	    case 'hex':case 'utf8':case 'utf-8':case 'ascii':case 'binary':case 'base64':case 'ucs2':case 'ucs-2':case 'utf16le':case 'utf-16le':case 'raw':
	      return true;
	    default:
	      return false;
	  }
	};

	function _normalizeEncoding(enc) {
	  if (!enc) return 'utf8';
	  var retried;
	  while (true) {
	    switch (enc) {
	      case 'utf8':
	      case 'utf-8':
	        return 'utf8';
	      case 'ucs2':
	      case 'ucs-2':
	      case 'utf16le':
	      case 'utf-16le':
	        return 'utf16le';
	      case 'latin1':
	      case 'binary':
	        return 'latin1';
	      case 'base64':
	      case 'ascii':
	      case 'hex':
	        return enc;
	      default:
	        if (retried) return; // undefined
	        enc = ('' + enc).toLowerCase();
	        retried = true;
	    }
	  }
	}
	// Do not cache `Buffer.isEncoding` when checking encoding names as some
	// modules monkey-patch it to support additional encodings
	function normalizeEncoding(enc) {
	  var nenc = _normalizeEncoding(enc);
	  if (typeof nenc !== 'string' && (Buffer.isEncoding === isEncoding || !isEncoding(enc))) throw new Error('Unknown encoding: ' + enc);
	  return nenc || enc;
	}

	// StringDecoder provides an interface for efficiently splitting a series of
	// buffers into a series of JS strings without breaking apart multi-byte
	// characters.
	string_decoder.StringDecoder = StringDecoder;
	function StringDecoder(encoding) {
	  this.encoding = normalizeEncoding(encoding);
	  var nb;
	  switch (this.encoding) {
	    case 'utf16le':
	      this.text = utf16Text;
	      this.end = utf16End;
	      nb = 4;
	      break;
	    case 'utf8':
	      this.fillLast = utf8FillLast;
	      nb = 4;
	      break;
	    case 'base64':
	      this.text = base64Text;
	      this.end = base64End;
	      nb = 3;
	      break;
	    default:
	      this.write = simpleWrite;
	      this.end = simpleEnd;
	      return;
	  }
	  this.lastNeed = 0;
	  this.lastTotal = 0;
	  this.lastChar = Buffer.allocUnsafe(nb);
	}

	StringDecoder.prototype.write = function (buf) {
	  if (buf.length === 0) return '';
	  var r;
	  var i;
	  if (this.lastNeed) {
	    r = this.fillLast(buf);
	    if (r === undefined) return '';
	    i = this.lastNeed;
	    this.lastNeed = 0;
	  } else {
	    i = 0;
	  }
	  if (i < buf.length) return r ? r + this.text(buf, i) : this.text(buf, i);
	  return r || '';
	};

	StringDecoder.prototype.end = utf8End;

	// Returns only complete characters in a Buffer
	StringDecoder.prototype.text = utf8Text;

	// Attempts to complete a partial non-UTF-8 character using bytes from a Buffer
	StringDecoder.prototype.fillLast = function (buf) {
	  if (this.lastNeed <= buf.length) {
	    buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed);
	    return this.lastChar.toString(this.encoding, 0, this.lastTotal);
	  }
	  buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);
	  this.lastNeed -= buf.length;
	};

	// Checks the type of a UTF-8 byte, whether it's ASCII, a leading byte, or a
	// continuation byte. If an invalid byte is detected, -2 is returned.
	function utf8CheckByte(byte) {
	  if (byte <= 0x7F) return 0;else if (byte >> 5 === 0x06) return 2;else if (byte >> 4 === 0x0E) return 3;else if (byte >> 3 === 0x1E) return 4;
	  return byte >> 6 === 0x02 ? -1 : -2;
	}

	// Checks at most 3 bytes at the end of a Buffer in order to detect an
	// incomplete multi-byte UTF-8 character. The total number of bytes (2, 3, or 4)
	// needed to complete the UTF-8 character (if applicable) are returned.
	function utf8CheckIncomplete(self, buf, i) {
	  var j = buf.length - 1;
	  if (j < i) return 0;
	  var nb = utf8CheckByte(buf[j]);
	  if (nb >= 0) {
	    if (nb > 0) self.lastNeed = nb - 1;
	    return nb;
	  }
	  if (--j < i || nb === -2) return 0;
	  nb = utf8CheckByte(buf[j]);
	  if (nb >= 0) {
	    if (nb > 0) self.lastNeed = nb - 2;
	    return nb;
	  }
	  if (--j < i || nb === -2) return 0;
	  nb = utf8CheckByte(buf[j]);
	  if (nb >= 0) {
	    if (nb > 0) {
	      if (nb === 2) nb = 0;else self.lastNeed = nb - 3;
	    }
	    return nb;
	  }
	  return 0;
	}

	// Validates as many continuation bytes for a multi-byte UTF-8 character as
	// needed or are available. If we see a non-continuation byte where we expect
	// one, we "replace" the validated continuation bytes we've seen so far with
	// a single UTF-8 replacement character ('\ufffd'), to match v8's UTF-8 decoding
	// behavior. The continuation byte check is included three times in the case
	// where all of the continuation bytes for a character exist in the same buffer.
	// It is also done this way as a slight performance increase instead of using a
	// loop.
	function utf8CheckExtraBytes(self, buf, p) {
	  if ((buf[0] & 0xC0) !== 0x80) {
	    self.lastNeed = 0;
	    return '\ufffd';
	  }
	  if (self.lastNeed > 1 && buf.length > 1) {
	    if ((buf[1] & 0xC0) !== 0x80) {
	      self.lastNeed = 1;
	      return '\ufffd';
	    }
	    if (self.lastNeed > 2 && buf.length > 2) {
	      if ((buf[2] & 0xC0) !== 0x80) {
	        self.lastNeed = 2;
	        return '\ufffd';
	      }
	    }
	  }
	}

	// Attempts to complete a multi-byte UTF-8 character using bytes from a Buffer.
	function utf8FillLast(buf) {
	  var p = this.lastTotal - this.lastNeed;
	  var r = utf8CheckExtraBytes(this, buf);
	  if (r !== undefined) return r;
	  if (this.lastNeed <= buf.length) {
	    buf.copy(this.lastChar, p, 0, this.lastNeed);
	    return this.lastChar.toString(this.encoding, 0, this.lastTotal);
	  }
	  buf.copy(this.lastChar, p, 0, buf.length);
	  this.lastNeed -= buf.length;
	}

	// Returns all complete UTF-8 characters in a Buffer. If the Buffer ended on a
	// partial character, the character's bytes are buffered until the required
	// number of bytes are available.
	function utf8Text(buf, i) {
	  var total = utf8CheckIncomplete(this, buf, i);
	  if (!this.lastNeed) return buf.toString('utf8', i);
	  this.lastTotal = total;
	  var end = buf.length - (total - this.lastNeed);
	  buf.copy(this.lastChar, 0, end);
	  return buf.toString('utf8', i, end);
	}

	// For UTF-8, a replacement character is added when ending on a partial
	// character.
	function utf8End(buf) {
	  var r = buf && buf.length ? this.write(buf) : '';
	  if (this.lastNeed) return r + '\ufffd';
	  return r;
	}

	// UTF-16LE typically needs two bytes per character, but even if we have an even
	// number of bytes available, we need to check if we end on a leading/high
	// surrogate. In that case, we need to wait for the next two bytes in order to
	// decode the last character properly.
	function utf16Text(buf, i) {
	  if ((buf.length - i) % 2 === 0) {
	    var r = buf.toString('utf16le', i);
	    if (r) {
	      var c = r.charCodeAt(r.length - 1);
	      if (c >= 0xD800 && c <= 0xDBFF) {
	        this.lastNeed = 2;
	        this.lastTotal = 4;
	        this.lastChar[0] = buf[buf.length - 2];
	        this.lastChar[1] = buf[buf.length - 1];
	        return r.slice(0, -1);
	      }
	    }
	    return r;
	  }
	  this.lastNeed = 1;
	  this.lastTotal = 2;
	  this.lastChar[0] = buf[buf.length - 1];
	  return buf.toString('utf16le', i, buf.length - 1);
	}

	// For UTF-16LE we do not explicitly append special replacement characters if we
	// end on a partial character, we simply let v8 handle that.
	function utf16End(buf) {
	  var r = buf && buf.length ? this.write(buf) : '';
	  if (this.lastNeed) {
	    var end = this.lastTotal - this.lastNeed;
	    return r + this.lastChar.toString('utf16le', 0, end);
	  }
	  return r;
	}

	function base64Text(buf, i) {
	  var n = (buf.length - i) % 3;
	  if (n === 0) return buf.toString('base64', i);
	  this.lastNeed = 3 - n;
	  this.lastTotal = 3;
	  if (n === 1) {
	    this.lastChar[0] = buf[buf.length - 1];
	  } else {
	    this.lastChar[0] = buf[buf.length - 2];
	    this.lastChar[1] = buf[buf.length - 1];
	  }
	  return buf.toString('base64', i, buf.length - n);
	}

	function base64End(buf) {
	  var r = buf && buf.length ? this.write(buf) : '';
	  if (this.lastNeed) return r + this.lastChar.toString('base64', 0, 3 - this.lastNeed);
	  return r;
	}

	// Pass bytes on through for single-byte encodings (e.g. ascii, latin1, hex)
	function simpleWrite(buf) {
	  return buf.toString(this.encoding);
	}

	function simpleEnd(buf) {
	  return buf && buf.length ? this.write(buf) : '';
	}
	return string_decoder;
}

var endOfStream;
var hasRequiredEndOfStream;

function requireEndOfStream () {
	if (hasRequiredEndOfStream) return endOfStream;
	hasRequiredEndOfStream = 1;

	var ERR_STREAM_PREMATURE_CLOSE = requireErrors().codes.ERR_STREAM_PREMATURE_CLOSE;
	function once(callback) {
	  var called = false;
	  return function () {
	    if (called) return;
	    called = true;
	    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }
	    callback.apply(this, args);
	  };
	}
	function noop() {}
	function isRequest(stream) {
	  return stream.setHeader && typeof stream.abort === 'function';
	}
	function eos(stream, opts, callback) {
	  if (typeof opts === 'function') return eos(stream, null, opts);
	  if (!opts) opts = {};
	  callback = once(callback || noop);
	  var readable = opts.readable || opts.readable !== false && stream.readable;
	  var writable = opts.writable || opts.writable !== false && stream.writable;
	  var onlegacyfinish = function onlegacyfinish() {
	    if (!stream.writable) onfinish();
	  };
	  var writableEnded = stream._writableState && stream._writableState.finished;
	  var onfinish = function onfinish() {
	    writable = false;
	    writableEnded = true;
	    if (!readable) callback.call(stream);
	  };
	  var readableEnded = stream._readableState && stream._readableState.endEmitted;
	  var onend = function onend() {
	    readable = false;
	    readableEnded = true;
	    if (!writable) callback.call(stream);
	  };
	  var onerror = function onerror(err) {
	    callback.call(stream, err);
	  };
	  var onclose = function onclose() {
	    var err;
	    if (readable && !readableEnded) {
	      if (!stream._readableState || !stream._readableState.ended) err = new ERR_STREAM_PREMATURE_CLOSE();
	      return callback.call(stream, err);
	    }
	    if (writable && !writableEnded) {
	      if (!stream._writableState || !stream._writableState.ended) err = new ERR_STREAM_PREMATURE_CLOSE();
	      return callback.call(stream, err);
	    }
	  };
	  var onrequest = function onrequest() {
	    stream.req.on('finish', onfinish);
	  };
	  if (isRequest(stream)) {
	    stream.on('complete', onfinish);
	    stream.on('abort', onclose);
	    if (stream.req) onrequest();else stream.on('request', onrequest);
	  } else if (writable && !stream._writableState) {
	    // legacy streams
	    stream.on('end', onlegacyfinish);
	    stream.on('close', onlegacyfinish);
	  }
	  stream.on('end', onend);
	  stream.on('finish', onfinish);
	  if (opts.error !== false) stream.on('error', onerror);
	  stream.on('close', onclose);
	  return function () {
	    stream.removeListener('complete', onfinish);
	    stream.removeListener('abort', onclose);
	    stream.removeListener('request', onrequest);
	    if (stream.req) stream.req.removeListener('finish', onfinish);
	    stream.removeListener('end', onlegacyfinish);
	    stream.removeListener('close', onlegacyfinish);
	    stream.removeListener('finish', onfinish);
	    stream.removeListener('end', onend);
	    stream.removeListener('error', onerror);
	    stream.removeListener('close', onclose);
	  };
	}
	endOfStream = eos;
	return endOfStream;
}

var async_iterator;
var hasRequiredAsync_iterator;

function requireAsync_iterator () {
	if (hasRequiredAsync_iterator) return async_iterator;
	hasRequiredAsync_iterator = 1;

	var _Object$setPrototypeO;
	function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
	function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
	function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
	var finished = requireEndOfStream();
	var kLastResolve = Symbol('lastResolve');
	var kLastReject = Symbol('lastReject');
	var kError = Symbol('error');
	var kEnded = Symbol('ended');
	var kLastPromise = Symbol('lastPromise');
	var kHandlePromise = Symbol('handlePromise');
	var kStream = Symbol('stream');
	function createIterResult(value, done) {
	  return {
	    value: value,
	    done: done
	  };
	}
	function readAndResolve(iter) {
	  var resolve = iter[kLastResolve];
	  if (resolve !== null) {
	    var data = iter[kStream].read();
	    // we defer if data is null
	    // we can be expecting either 'end' or
	    // 'error'
	    if (data !== null) {
	      iter[kLastPromise] = null;
	      iter[kLastResolve] = null;
	      iter[kLastReject] = null;
	      resolve(createIterResult(data, false));
	    }
	  }
	}
	function onReadable(iter) {
	  // we wait for the next tick, because it might
	  // emit an error with process.nextTick
	  process.nextTick(readAndResolve, iter);
	}
	function wrapForNext(lastPromise, iter) {
	  return function (resolve, reject) {
	    lastPromise.then(function () {
	      if (iter[kEnded]) {
	        resolve(createIterResult(undefined, true));
	        return;
	      }
	      iter[kHandlePromise](resolve, reject);
	    }, reject);
	  };
	}
	var AsyncIteratorPrototype = Object.getPrototypeOf(function () {});
	var ReadableStreamAsyncIteratorPrototype = Object.setPrototypeOf((_Object$setPrototypeO = {
	  get stream() {
	    return this[kStream];
	  },
	  next: function next() {
	    var _this = this;
	    // if we have detected an error in the meanwhile
	    // reject straight away
	    var error = this[kError];
	    if (error !== null) {
	      return Promise.reject(error);
	    }
	    if (this[kEnded]) {
	      return Promise.resolve(createIterResult(undefined, true));
	    }
	    if (this[kStream].destroyed) {
	      // We need to defer via nextTick because if .destroy(err) is
	      // called, the error will be emitted via nextTick, and
	      // we cannot guarantee that there is no error lingering around
	      // waiting to be emitted.
	      return new Promise(function (resolve, reject) {
	        process.nextTick(function () {
	          if (_this[kError]) {
	            reject(_this[kError]);
	          } else {
	            resolve(createIterResult(undefined, true));
	          }
	        });
	      });
	    }

	    // if we have multiple next() calls
	    // we will wait for the previous Promise to finish
	    // this logic is optimized to support for await loops,
	    // where next() is only called once at a time
	    var lastPromise = this[kLastPromise];
	    var promise;
	    if (lastPromise) {
	      promise = new Promise(wrapForNext(lastPromise, this));
	    } else {
	      // fast path needed to support multiple this.push()
	      // without triggering the next() queue
	      var data = this[kStream].read();
	      if (data !== null) {
	        return Promise.resolve(createIterResult(data, false));
	      }
	      promise = new Promise(this[kHandlePromise]);
	    }
	    this[kLastPromise] = promise;
	    return promise;
	  }
	}, _defineProperty(_Object$setPrototypeO, Symbol.asyncIterator, function () {
	  return this;
	}), _defineProperty(_Object$setPrototypeO, "return", function _return() {
	  var _this2 = this;
	  // destroy(err, cb) is a private API
	  // we can guarantee we have that here, because we control the
	  // Readable class this is attached to
	  return new Promise(function (resolve, reject) {
	    _this2[kStream].destroy(null, function (err) {
	      if (err) {
	        reject(err);
	        return;
	      }
	      resolve(createIterResult(undefined, true));
	    });
	  });
	}), _Object$setPrototypeO), AsyncIteratorPrototype);
	var createReadableStreamAsyncIterator = function createReadableStreamAsyncIterator(stream) {
	  var _Object$create;
	  var iterator = Object.create(ReadableStreamAsyncIteratorPrototype, (_Object$create = {}, _defineProperty(_Object$create, kStream, {
	    value: stream,
	    writable: true
	  }), _defineProperty(_Object$create, kLastResolve, {
	    value: null,
	    writable: true
	  }), _defineProperty(_Object$create, kLastReject, {
	    value: null,
	    writable: true
	  }), _defineProperty(_Object$create, kError, {
	    value: null,
	    writable: true
	  }), _defineProperty(_Object$create, kEnded, {
	    value: stream._readableState.endEmitted,
	    writable: true
	  }), _defineProperty(_Object$create, kHandlePromise, {
	    value: function value(resolve, reject) {
	      var data = iterator[kStream].read();
	      if (data) {
	        iterator[kLastPromise] = null;
	        iterator[kLastResolve] = null;
	        iterator[kLastReject] = null;
	        resolve(createIterResult(data, false));
	      } else {
	        iterator[kLastResolve] = resolve;
	        iterator[kLastReject] = reject;
	      }
	    },
	    writable: true
	  }), _Object$create));
	  iterator[kLastPromise] = null;
	  finished(stream, function (err) {
	    if (err && err.code !== 'ERR_STREAM_PREMATURE_CLOSE') {
	      var reject = iterator[kLastReject];
	      // reject if we are waiting for data in the Promise
	      // returned by next() and store the error
	      if (reject !== null) {
	        iterator[kLastPromise] = null;
	        iterator[kLastResolve] = null;
	        iterator[kLastReject] = null;
	        reject(err);
	      }
	      iterator[kError] = err;
	      return;
	    }
	    var resolve = iterator[kLastResolve];
	    if (resolve !== null) {
	      iterator[kLastPromise] = null;
	      iterator[kLastResolve] = null;
	      iterator[kLastReject] = null;
	      resolve(createIterResult(undefined, true));
	    }
	    iterator[kEnded] = true;
	  });
	  stream.on('readable', onReadable.bind(null, iterator));
	  return iterator;
	};
	async_iterator = createReadableStreamAsyncIterator;
	return async_iterator;
}

var from_1;
var hasRequiredFrom;

function requireFrom () {
	if (hasRequiredFrom) return from_1;
	hasRequiredFrom = 1;

	function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }
	function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }
	function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
	function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
	function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
	function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
	function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
	var ERR_INVALID_ARG_TYPE = requireErrors().codes.ERR_INVALID_ARG_TYPE;
	function from(Readable, iterable, opts) {
	  var iterator;
	  if (iterable && typeof iterable.next === 'function') {
	    iterator = iterable;
	  } else if (iterable && iterable[Symbol.asyncIterator]) iterator = iterable[Symbol.asyncIterator]();else if (iterable && iterable[Symbol.iterator]) iterator = iterable[Symbol.iterator]();else throw new ERR_INVALID_ARG_TYPE('iterable', ['Iterable'], iterable);
	  var readable = new Readable(_objectSpread({
	    objectMode: true
	  }, opts));
	  // Reading boolean to protect against _read
	  // being called before last iteration completion.
	  var reading = false;
	  readable._read = function () {
	    if (!reading) {
	      reading = true;
	      next();
	    }
	  };
	  function next() {
	    return _next2.apply(this, arguments);
	  }
	  function _next2() {
	    _next2 = _asyncToGenerator(function* () {
	      try {
	        var _yield$iterator$next = yield iterator.next(),
	          value = _yield$iterator$next.value,
	          done = _yield$iterator$next.done;
	        if (done) {
	          readable.push(null);
	        } else if (readable.push(yield value)) {
	          next();
	        } else {
	          reading = false;
	        }
	      } catch (err) {
	        readable.destroy(err);
	      }
	    });
	    return _next2.apply(this, arguments);
	  }
	  return readable;
	}
	from_1 = from;
	return from_1;
}

var _stream_readable;
var hasRequired_stream_readable;

function require_stream_readable () {
	if (hasRequired_stream_readable) return _stream_readable;
	hasRequired_stream_readable = 1;

	_stream_readable = Readable;

	/*<replacement>*/
	var Duplex;
	/*</replacement>*/

	Readable.ReadableState = ReadableState;

	/*<replacement>*/
	require$$2.EventEmitter;
	var EElistenerCount = function EElistenerCount(emitter, type) {
	  return emitter.listeners(type).length;
	};
	/*</replacement>*/

	/*<replacement>*/
	var Stream = requireStream();
	/*</replacement>*/

	var Buffer = require$$0$5.Buffer;
	var OurUint8Array = (typeof commonjsGlobal !== 'undefined' ? commonjsGlobal : typeof window !== 'undefined' ? window : typeof self !== 'undefined' ? self : {}).Uint8Array || function () {};
	function _uint8ArrayToBuffer(chunk) {
	  return Buffer.from(chunk);
	}
	function _isUint8Array(obj) {
	  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
	}

	/*<replacement>*/
	var debugUtil = require$$2$1;
	var debug;
	if (debugUtil && debugUtil.debuglog) {
	  debug = debugUtil.debuglog('stream');
	} else {
	  debug = function debug() {};
	}
	/*</replacement>*/

	var BufferList = requireBuffer_list();
	var destroyImpl = requireDestroy();
	var _require = requireState(),
	  getHighWaterMark = _require.getHighWaterMark;
	var _require$codes = requireErrors().codes,
	  ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE,
	  ERR_STREAM_PUSH_AFTER_EOF = _require$codes.ERR_STREAM_PUSH_AFTER_EOF,
	  ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED,
	  ERR_STREAM_UNSHIFT_AFTER_END_EVENT = _require$codes.ERR_STREAM_UNSHIFT_AFTER_END_EVENT;

	// Lazy loaded to improve the startup performance.
	var StringDecoder;
	var createReadableStreamAsyncIterator;
	var from;
	requireInherits()(Readable, Stream);
	var errorOrDestroy = destroyImpl.errorOrDestroy;
	var kProxyEvents = ['error', 'close', 'destroy', 'pause', 'resume'];
	function prependListener(emitter, event, fn) {
	  // Sadly this is not cacheable as some libraries bundle their own
	  // event emitter implementation with them.
	  if (typeof emitter.prependListener === 'function') return emitter.prependListener(event, fn);

	  // This is a hack to make sure that our error handler is attached before any
	  // userland ones.  NEVER DO THIS. This is here only because this code needs
	  // to continue to work with older versions of Node.js that do not include
	  // the prependListener() method. The goal is to eventually remove this hack.
	  if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);else if (Array.isArray(emitter._events[event])) emitter._events[event].unshift(fn);else emitter._events[event] = [fn, emitter._events[event]];
	}
	function ReadableState(options, stream, isDuplex) {
	  Duplex = Duplex || require_stream_duplex();
	  options = options || {};

	  // Duplex streams are both readable and writable, but share
	  // the same options object.
	  // However, some cases require setting options to different
	  // values for the readable and the writable sides of the duplex stream.
	  // These options can be provided separately as readableXXX and writableXXX.
	  if (typeof isDuplex !== 'boolean') isDuplex = stream instanceof Duplex;

	  // object stream flag. Used to make read(n) ignore n and to
	  // make all the buffer merging and length checks go away
	  this.objectMode = !!options.objectMode;
	  if (isDuplex) this.objectMode = this.objectMode || !!options.readableObjectMode;

	  // the point at which it stops calling _read() to fill the buffer
	  // Note: 0 is a valid value, means "don't call _read preemptively ever"
	  this.highWaterMark = getHighWaterMark(this, options, 'readableHighWaterMark', isDuplex);

	  // A linked list is used to store data chunks instead of an array because the
	  // linked list can remove elements from the beginning faster than
	  // array.shift()
	  this.buffer = new BufferList();
	  this.length = 0;
	  this.pipes = null;
	  this.pipesCount = 0;
	  this.flowing = null;
	  this.ended = false;
	  this.endEmitted = false;
	  this.reading = false;

	  // a flag to be able to tell if the event 'readable'/'data' is emitted
	  // immediately, or on a later tick.  We set this to true at first, because
	  // any actions that shouldn't happen until "later" should generally also
	  // not happen before the first read call.
	  this.sync = true;

	  // whenever we return null, then we set a flag to say
	  // that we're awaiting a 'readable' event emission.
	  this.needReadable = false;
	  this.emittedReadable = false;
	  this.readableListening = false;
	  this.resumeScheduled = false;
	  this.paused = true;

	  // Should close be emitted on destroy. Defaults to true.
	  this.emitClose = options.emitClose !== false;

	  // Should .destroy() be called after 'end' (and potentially 'finish')
	  this.autoDestroy = !!options.autoDestroy;

	  // has it been destroyed
	  this.destroyed = false;

	  // Crypto is kind of old and crusty.  Historically, its default string
	  // encoding is 'binary' so we have to make this configurable.
	  // Everything else in the universe uses 'utf8', though.
	  this.defaultEncoding = options.defaultEncoding || 'utf8';

	  // the number of writers that are awaiting a drain event in .pipe()s
	  this.awaitDrain = 0;

	  // if true, a maybeReadMore has been scheduled
	  this.readingMore = false;
	  this.decoder = null;
	  this.encoding = null;
	  if (options.encoding) {
	    if (!StringDecoder) StringDecoder = requireString_decoder().StringDecoder;
	    this.decoder = new StringDecoder(options.encoding);
	    this.encoding = options.encoding;
	  }
	}
	function Readable(options) {
	  Duplex = Duplex || require_stream_duplex();
	  if (!(this instanceof Readable)) return new Readable(options);

	  // Checking for a Stream.Duplex instance is faster here instead of inside
	  // the ReadableState constructor, at least with V8 6.5
	  var isDuplex = this instanceof Duplex;
	  this._readableState = new ReadableState(options, this, isDuplex);

	  // legacy
	  this.readable = true;
	  if (options) {
	    if (typeof options.read === 'function') this._read = options.read;
	    if (typeof options.destroy === 'function') this._destroy = options.destroy;
	  }
	  Stream.call(this);
	}
	Object.defineProperty(Readable.prototype, 'destroyed', {
	  // making it explicit this property is not enumerable
	  // because otherwise some prototype manipulation in
	  // userland will fail
	  enumerable: false,
	  get: function get() {
	    if (this._readableState === undefined) {
	      return false;
	    }
	    return this._readableState.destroyed;
	  },
	  set: function set(value) {
	    // we ignore the value if the stream
	    // has not been initialized yet
	    if (!this._readableState) {
	      return;
	    }

	    // backward compatibility, the user is explicitly
	    // managing destroyed
	    this._readableState.destroyed = value;
	  }
	});
	Readable.prototype.destroy = destroyImpl.destroy;
	Readable.prototype._undestroy = destroyImpl.undestroy;
	Readable.prototype._destroy = function (err, cb) {
	  cb(err);
	};

	// Manually shove something into the read() buffer.
	// This returns true if the highWaterMark has not been hit yet,
	// similar to how Writable.write() returns true if you should
	// write() some more.
	Readable.prototype.push = function (chunk, encoding) {
	  var state = this._readableState;
	  var skipChunkCheck;
	  if (!state.objectMode) {
	    if (typeof chunk === 'string') {
	      encoding = encoding || state.defaultEncoding;
	      if (encoding !== state.encoding) {
	        chunk = Buffer.from(chunk, encoding);
	        encoding = '';
	      }
	      skipChunkCheck = true;
	    }
	  } else {
	    skipChunkCheck = true;
	  }
	  return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);
	};

	// Unshift should *always* be something directly out of read()
	Readable.prototype.unshift = function (chunk) {
	  return readableAddChunk(this, chunk, null, true, false);
	};
	function readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {
	  debug('readableAddChunk', chunk);
	  var state = stream._readableState;
	  if (chunk === null) {
	    state.reading = false;
	    onEofChunk(stream, state);
	  } else {
	    var er;
	    if (!skipChunkCheck) er = chunkInvalid(state, chunk);
	    if (er) {
	      errorOrDestroy(stream, er);
	    } else if (state.objectMode || chunk && chunk.length > 0) {
	      if (typeof chunk !== 'string' && !state.objectMode && Object.getPrototypeOf(chunk) !== Buffer.prototype) {
	        chunk = _uint8ArrayToBuffer(chunk);
	      }
	      if (addToFront) {
	        if (state.endEmitted) errorOrDestroy(stream, new ERR_STREAM_UNSHIFT_AFTER_END_EVENT());else addChunk(stream, state, chunk, true);
	      } else if (state.ended) {
	        errorOrDestroy(stream, new ERR_STREAM_PUSH_AFTER_EOF());
	      } else if (state.destroyed) {
	        return false;
	      } else {
	        state.reading = false;
	        if (state.decoder && !encoding) {
	          chunk = state.decoder.write(chunk);
	          if (state.objectMode || chunk.length !== 0) addChunk(stream, state, chunk, false);else maybeReadMore(stream, state);
	        } else {
	          addChunk(stream, state, chunk, false);
	        }
	      }
	    } else if (!addToFront) {
	      state.reading = false;
	      maybeReadMore(stream, state);
	    }
	  }

	  // We can push more data if we are below the highWaterMark.
	  // Also, if we have no data yet, we can stand some more bytes.
	  // This is to work around cases where hwm=0, such as the repl.
	  return !state.ended && (state.length < state.highWaterMark || state.length === 0);
	}
	function addChunk(stream, state, chunk, addToFront) {
	  if (state.flowing && state.length === 0 && !state.sync) {
	    state.awaitDrain = 0;
	    stream.emit('data', chunk);
	  } else {
	    // update the buffer info.
	    state.length += state.objectMode ? 1 : chunk.length;
	    if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);
	    if (state.needReadable) emitReadable(stream);
	  }
	  maybeReadMore(stream, state);
	}
	function chunkInvalid(state, chunk) {
	  var er;
	  if (!_isUint8Array(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
	    er = new ERR_INVALID_ARG_TYPE('chunk', ['string', 'Buffer', 'Uint8Array'], chunk);
	  }
	  return er;
	}
	Readable.prototype.isPaused = function () {
	  return this._readableState.flowing === false;
	};

	// backwards compatibility.
	Readable.prototype.setEncoding = function (enc) {
	  if (!StringDecoder) StringDecoder = requireString_decoder().StringDecoder;
	  var decoder = new StringDecoder(enc);
	  this._readableState.decoder = decoder;
	  // If setEncoding(null), decoder.encoding equals utf8
	  this._readableState.encoding = this._readableState.decoder.encoding;

	  // Iterate over current buffer to convert already stored Buffers:
	  var p = this._readableState.buffer.head;
	  var content = '';
	  while (p !== null) {
	    content += decoder.write(p.data);
	    p = p.next;
	  }
	  this._readableState.buffer.clear();
	  if (content !== '') this._readableState.buffer.push(content);
	  this._readableState.length = content.length;
	  return this;
	};

	// Don't raise the hwm > 1GB
	var MAX_HWM = 0x40000000;
	function computeNewHighWaterMark(n) {
	  if (n >= MAX_HWM) {
	    // TODO(ronag): Throw ERR_VALUE_OUT_OF_RANGE.
	    n = MAX_HWM;
	  } else {
	    // Get the next highest power of 2 to prevent increasing hwm excessively in
	    // tiny amounts
	    n--;
	    n |= n >>> 1;
	    n |= n >>> 2;
	    n |= n >>> 4;
	    n |= n >>> 8;
	    n |= n >>> 16;
	    n++;
	  }
	  return n;
	}

	// This function is designed to be inlinable, so please take care when making
	// changes to the function body.
	function howMuchToRead(n, state) {
	  if (n <= 0 || state.length === 0 && state.ended) return 0;
	  if (state.objectMode) return 1;
	  if (n !== n) {
	    // Only flow one buffer at a time
	    if (state.flowing && state.length) return state.buffer.head.data.length;else return state.length;
	  }
	  // If we're asking for more than the current hwm, then raise the hwm.
	  if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);
	  if (n <= state.length) return n;
	  // Don't have enough
	  if (!state.ended) {
	    state.needReadable = true;
	    return 0;
	  }
	  return state.length;
	}

	// you can override either this method, or the async _read(n) below.
	Readable.prototype.read = function (n) {
	  debug('read', n);
	  n = parseInt(n, 10);
	  var state = this._readableState;
	  var nOrig = n;
	  if (n !== 0) state.emittedReadable = false;

	  // if we're doing read(0) to trigger a readable event, but we
	  // already have a bunch of data in the buffer, then just trigger
	  // the 'readable' event and move on.
	  if (n === 0 && state.needReadable && ((state.highWaterMark !== 0 ? state.length >= state.highWaterMark : state.length > 0) || state.ended)) {
	    debug('read: emitReadable', state.length, state.ended);
	    if (state.length === 0 && state.ended) endReadable(this);else emitReadable(this);
	    return null;
	  }
	  n = howMuchToRead(n, state);

	  // if we've ended, and we're now clear, then finish it up.
	  if (n === 0 && state.ended) {
	    if (state.length === 0) endReadable(this);
	    return null;
	  }

	  // All the actual chunk generation logic needs to be
	  // *below* the call to _read.  The reason is that in certain
	  // synthetic stream cases, such as passthrough streams, _read
	  // may be a completely synchronous operation which may change
	  // the state of the read buffer, providing enough data when
	  // before there was *not* enough.
	  //
	  // So, the steps are:
	  // 1. Figure out what the state of things will be after we do
	  // a read from the buffer.
	  //
	  // 2. If that resulting state will trigger a _read, then call _read.
	  // Note that this may be asynchronous, or synchronous.  Yes, it is
	  // deeply ugly to write APIs this way, but that still doesn't mean
	  // that the Readable class should behave improperly, as streams are
	  // designed to be sync/async agnostic.
	  // Take note if the _read call is sync or async (ie, if the read call
	  // has returned yet), so that we know whether or not it's safe to emit
	  // 'readable' etc.
	  //
	  // 3. Actually pull the requested chunks out of the buffer and return.

	  // if we need a readable event, then we need to do some reading.
	  var doRead = state.needReadable;
	  debug('need readable', doRead);

	  // if we currently have less than the highWaterMark, then also read some
	  if (state.length === 0 || state.length - n < state.highWaterMark) {
	    doRead = true;
	    debug('length less than watermark', doRead);
	  }

	  // however, if we've ended, then there's no point, and if we're already
	  // reading, then it's unnecessary.
	  if (state.ended || state.reading) {
	    doRead = false;
	    debug('reading or ended', doRead);
	  } else if (doRead) {
	    debug('do read');
	    state.reading = true;
	    state.sync = true;
	    // if the length is currently zero, then we *need* a readable event.
	    if (state.length === 0) state.needReadable = true;
	    // call internal read method
	    this._read(state.highWaterMark);
	    state.sync = false;
	    // If _read pushed data synchronously, then `reading` will be false,
	    // and we need to re-evaluate how much data we can return to the user.
	    if (!state.reading) n = howMuchToRead(nOrig, state);
	  }
	  var ret;
	  if (n > 0) ret = fromList(n, state);else ret = null;
	  if (ret === null) {
	    state.needReadable = state.length <= state.highWaterMark;
	    n = 0;
	  } else {
	    state.length -= n;
	    state.awaitDrain = 0;
	  }
	  if (state.length === 0) {
	    // If we have nothing in the buffer, then we want to know
	    // as soon as we *do* get something into the buffer.
	    if (!state.ended) state.needReadable = true;

	    // If we tried to read() past the EOF, then emit end on the next tick.
	    if (nOrig !== n && state.ended) endReadable(this);
	  }
	  if (ret !== null) this.emit('data', ret);
	  return ret;
	};
	function onEofChunk(stream, state) {
	  debug('onEofChunk');
	  if (state.ended) return;
	  if (state.decoder) {
	    var chunk = state.decoder.end();
	    if (chunk && chunk.length) {
	      state.buffer.push(chunk);
	      state.length += state.objectMode ? 1 : chunk.length;
	    }
	  }
	  state.ended = true;
	  if (state.sync) {
	    // if we are sync, wait until next tick to emit the data.
	    // Otherwise we risk emitting data in the flow()
	    // the readable code triggers during a read() call
	    emitReadable(stream);
	  } else {
	    // emit 'readable' now to make sure it gets picked up.
	    state.needReadable = false;
	    if (!state.emittedReadable) {
	      state.emittedReadable = true;
	      emitReadable_(stream);
	    }
	  }
	}

	// Don't emit readable right away in sync mode, because this can trigger
	// another read() call => stack overflow.  This way, it might trigger
	// a nextTick recursion warning, but that's not so bad.
	function emitReadable(stream) {
	  var state = stream._readableState;
	  debug('emitReadable', state.needReadable, state.emittedReadable);
	  state.needReadable = false;
	  if (!state.emittedReadable) {
	    debug('emitReadable', state.flowing);
	    state.emittedReadable = true;
	    process.nextTick(emitReadable_, stream);
	  }
	}
	function emitReadable_(stream) {
	  var state = stream._readableState;
	  debug('emitReadable_', state.destroyed, state.length, state.ended);
	  if (!state.destroyed && (state.length || state.ended)) {
	    stream.emit('readable');
	    state.emittedReadable = false;
	  }

	  // The stream needs another readable event if
	  // 1. It is not flowing, as the flow mechanism will take
	  //    care of it.
	  // 2. It is not ended.
	  // 3. It is below the highWaterMark, so we can schedule
	  //    another readable later.
	  state.needReadable = !state.flowing && !state.ended && state.length <= state.highWaterMark;
	  flow(stream);
	}

	// at this point, the user has presumably seen the 'readable' event,
	// and called read() to consume some data.  that may have triggered
	// in turn another _read(n) call, in which case reading = true if
	// it's in progress.
	// However, if we're not ended, or reading, and the length < hwm,
	// then go ahead and try to read some more preemptively.
	function maybeReadMore(stream, state) {
	  if (!state.readingMore) {
	    state.readingMore = true;
	    process.nextTick(maybeReadMore_, stream, state);
	  }
	}
	function maybeReadMore_(stream, state) {
	  // Attempt to read more data if we should.
	  //
	  // The conditions for reading more data are (one of):
	  // - Not enough data buffered (state.length < state.highWaterMark). The loop
	  //   is responsible for filling the buffer with enough data if such data
	  //   is available. If highWaterMark is 0 and we are not in the flowing mode
	  //   we should _not_ attempt to buffer any extra data. We'll get more data
	  //   when the stream consumer calls read() instead.
	  // - No data in the buffer, and the stream is in flowing mode. In this mode
	  //   the loop below is responsible for ensuring read() is called. Failing to
	  //   call read here would abort the flow and there's no other mechanism for
	  //   continuing the flow if the stream consumer has just subscribed to the
	  //   'data' event.
	  //
	  // In addition to the above conditions to keep reading data, the following
	  // conditions prevent the data from being read:
	  // - The stream has ended (state.ended).
	  // - There is already a pending 'read' operation (state.reading). This is a
	  //   case where the the stream has called the implementation defined _read()
	  //   method, but they are processing the call asynchronously and have _not_
	  //   called push() with new data. In this case we skip performing more
	  //   read()s. The execution ends in this method again after the _read() ends
	  //   up calling push() with more data.
	  while (!state.reading && !state.ended && (state.length < state.highWaterMark || state.flowing && state.length === 0)) {
	    var len = state.length;
	    debug('maybeReadMore read 0');
	    stream.read(0);
	    if (len === state.length)
	      // didn't get any data, stop spinning.
	      break;
	  }
	  state.readingMore = false;
	}

	// abstract method.  to be overridden in specific implementation classes.
	// call cb(er, data) where data is <= n in length.
	// for virtual (non-string, non-buffer) streams, "length" is somewhat
	// arbitrary, and perhaps not very meaningful.
	Readable.prototype._read = function (n) {
	  errorOrDestroy(this, new ERR_METHOD_NOT_IMPLEMENTED('_read()'));
	};
	Readable.prototype.pipe = function (dest, pipeOpts) {
	  var src = this;
	  var state = this._readableState;
	  switch (state.pipesCount) {
	    case 0:
	      state.pipes = dest;
	      break;
	    case 1:
	      state.pipes = [state.pipes, dest];
	      break;
	    default:
	      state.pipes.push(dest);
	      break;
	  }
	  state.pipesCount += 1;
	  debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);
	  var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;
	  var endFn = doEnd ? onend : unpipe;
	  if (state.endEmitted) process.nextTick(endFn);else src.once('end', endFn);
	  dest.on('unpipe', onunpipe);
	  function onunpipe(readable, unpipeInfo) {
	    debug('onunpipe');
	    if (readable === src) {
	      if (unpipeInfo && unpipeInfo.hasUnpiped === false) {
	        unpipeInfo.hasUnpiped = true;
	        cleanup();
	      }
	    }
	  }
	  function onend() {
	    debug('onend');
	    dest.end();
	  }

	  // when the dest drains, it reduces the awaitDrain counter
	  // on the source.  This would be more elegant with a .once()
	  // handler in flow(), but adding and removing repeatedly is
	  // too slow.
	  var ondrain = pipeOnDrain(src);
	  dest.on('drain', ondrain);
	  var cleanedUp = false;
	  function cleanup() {
	    debug('cleanup');
	    // cleanup event handlers once the pipe is broken
	    dest.removeListener('close', onclose);
	    dest.removeListener('finish', onfinish);
	    dest.removeListener('drain', ondrain);
	    dest.removeListener('error', onerror);
	    dest.removeListener('unpipe', onunpipe);
	    src.removeListener('end', onend);
	    src.removeListener('end', unpipe);
	    src.removeListener('data', ondata);
	    cleanedUp = true;

	    // if the reader is waiting for a drain event from this
	    // specific writer, then it would cause it to never start
	    // flowing again.
	    // So, if this is awaiting a drain, then we just call it now.
	    // If we don't know, then assume that we are waiting for one.
	    if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
	  }
	  src.on('data', ondata);
	  function ondata(chunk) {
	    debug('ondata');
	    var ret = dest.write(chunk);
	    debug('dest.write', ret);
	    if (ret === false) {
	      // If the user unpiped during `dest.write()`, it is possible
	      // to get stuck in a permanently paused state if that write
	      // also returned false.
	      // => Check whether `dest` is still a piping destination.
	      if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
	        debug('false write response, pause', state.awaitDrain);
	        state.awaitDrain++;
	      }
	      src.pause();
	    }
	  }

	  // if the dest has an error, then stop piping into it.
	  // however, don't suppress the throwing behavior for this.
	  function onerror(er) {
	    debug('onerror', er);
	    unpipe();
	    dest.removeListener('error', onerror);
	    if (EElistenerCount(dest, 'error') === 0) errorOrDestroy(dest, er);
	  }

	  // Make sure our error handler is attached before userland ones.
	  prependListener(dest, 'error', onerror);

	  // Both close and finish should trigger unpipe, but only once.
	  function onclose() {
	    dest.removeListener('finish', onfinish);
	    unpipe();
	  }
	  dest.once('close', onclose);
	  function onfinish() {
	    debug('onfinish');
	    dest.removeListener('close', onclose);
	    unpipe();
	  }
	  dest.once('finish', onfinish);
	  function unpipe() {
	    debug('unpipe');
	    src.unpipe(dest);
	  }

	  // tell the dest that it's being piped to
	  dest.emit('pipe', src);

	  // start the flow if it hasn't been started already.
	  if (!state.flowing) {
	    debug('pipe resume');
	    src.resume();
	  }
	  return dest;
	};
	function pipeOnDrain(src) {
	  return function pipeOnDrainFunctionResult() {
	    var state = src._readableState;
	    debug('pipeOnDrain', state.awaitDrain);
	    if (state.awaitDrain) state.awaitDrain--;
	    if (state.awaitDrain === 0 && EElistenerCount(src, 'data')) {
	      state.flowing = true;
	      flow(src);
	    }
	  };
	}
	Readable.prototype.unpipe = function (dest) {
	  var state = this._readableState;
	  var unpipeInfo = {
	    hasUnpiped: false
	  };

	  // if we're not piping anywhere, then do nothing.
	  if (state.pipesCount === 0) return this;

	  // just one destination.  most common case.
	  if (state.pipesCount === 1) {
	    // passed in one, but it's not the right one.
	    if (dest && dest !== state.pipes) return this;
	    if (!dest) dest = state.pipes;

	    // got a match.
	    state.pipes = null;
	    state.pipesCount = 0;
	    state.flowing = false;
	    if (dest) dest.emit('unpipe', this, unpipeInfo);
	    return this;
	  }

	  // slow case. multiple pipe destinations.

	  if (!dest) {
	    // remove all.
	    var dests = state.pipes;
	    var len = state.pipesCount;
	    state.pipes = null;
	    state.pipesCount = 0;
	    state.flowing = false;
	    for (var i = 0; i < len; i++) dests[i].emit('unpipe', this, {
	      hasUnpiped: false
	    });
	    return this;
	  }

	  // try to find the right one.
	  var index = indexOf(state.pipes, dest);
	  if (index === -1) return this;
	  state.pipes.splice(index, 1);
	  state.pipesCount -= 1;
	  if (state.pipesCount === 1) state.pipes = state.pipes[0];
	  dest.emit('unpipe', this, unpipeInfo);
	  return this;
	};

	// set up data events if they are asked for
	// Ensure readable listeners eventually get something
	Readable.prototype.on = function (ev, fn) {
	  var res = Stream.prototype.on.call(this, ev, fn);
	  var state = this._readableState;
	  if (ev === 'data') {
	    // update readableListening so that resume() may be a no-op
	    // a few lines down. This is needed to support once('readable').
	    state.readableListening = this.listenerCount('readable') > 0;

	    // Try start flowing on next tick if stream isn't explicitly paused
	    if (state.flowing !== false) this.resume();
	  } else if (ev === 'readable') {
	    if (!state.endEmitted && !state.readableListening) {
	      state.readableListening = state.needReadable = true;
	      state.flowing = false;
	      state.emittedReadable = false;
	      debug('on readable', state.length, state.reading);
	      if (state.length) {
	        emitReadable(this);
	      } else if (!state.reading) {
	        process.nextTick(nReadingNextTick, this);
	      }
	    }
	  }
	  return res;
	};
	Readable.prototype.addListener = Readable.prototype.on;
	Readable.prototype.removeListener = function (ev, fn) {
	  var res = Stream.prototype.removeListener.call(this, ev, fn);
	  if (ev === 'readable') {
	    // We need to check if there is someone still listening to
	    // readable and reset the state. However this needs to happen
	    // after readable has been emitted but before I/O (nextTick) to
	    // support once('readable', fn) cycles. This means that calling
	    // resume within the same tick will have no
	    // effect.
	    process.nextTick(updateReadableListening, this);
	  }
	  return res;
	};
	Readable.prototype.removeAllListeners = function (ev) {
	  var res = Stream.prototype.removeAllListeners.apply(this, arguments);
	  if (ev === 'readable' || ev === undefined) {
	    // We need to check if there is someone still listening to
	    // readable and reset the state. However this needs to happen
	    // after readable has been emitted but before I/O (nextTick) to
	    // support once('readable', fn) cycles. This means that calling
	    // resume within the same tick will have no
	    // effect.
	    process.nextTick(updateReadableListening, this);
	  }
	  return res;
	};
	function updateReadableListening(self) {
	  var state = self._readableState;
	  state.readableListening = self.listenerCount('readable') > 0;
	  if (state.resumeScheduled && !state.paused) {
	    // flowing needs to be set to true now, otherwise
	    // the upcoming resume will not flow.
	    state.flowing = true;

	    // crude way to check if we should resume
	  } else if (self.listenerCount('data') > 0) {
	    self.resume();
	  }
	}
	function nReadingNextTick(self) {
	  debug('readable nexttick read 0');
	  self.read(0);
	}

	// pause() and resume() are remnants of the legacy readable stream API
	// If the user uses them, then switch into old mode.
	Readable.prototype.resume = function () {
	  var state = this._readableState;
	  if (!state.flowing) {
	    debug('resume');
	    // we flow only if there is no one listening
	    // for readable, but we still have to call
	    // resume()
	    state.flowing = !state.readableListening;
	    resume(this, state);
	  }
	  state.paused = false;
	  return this;
	};
	function resume(stream, state) {
	  if (!state.resumeScheduled) {
	    state.resumeScheduled = true;
	    process.nextTick(resume_, stream, state);
	  }
	}
	function resume_(stream, state) {
	  debug('resume', state.reading);
	  if (!state.reading) {
	    stream.read(0);
	  }
	  state.resumeScheduled = false;
	  stream.emit('resume');
	  flow(stream);
	  if (state.flowing && !state.reading) stream.read(0);
	}
	Readable.prototype.pause = function () {
	  debug('call pause flowing=%j', this._readableState.flowing);
	  if (this._readableState.flowing !== false) {
	    debug('pause');
	    this._readableState.flowing = false;
	    this.emit('pause');
	  }
	  this._readableState.paused = true;
	  return this;
	};
	function flow(stream) {
	  var state = stream._readableState;
	  debug('flow', state.flowing);
	  while (state.flowing && stream.read() !== null);
	}

	// wrap an old-style stream as the async data source.
	// This is *not* part of the readable stream interface.
	// It is an ugly unfortunate mess of history.
	Readable.prototype.wrap = function (stream) {
	  var _this = this;
	  var state = this._readableState;
	  var paused = false;
	  stream.on('end', function () {
	    debug('wrapped end');
	    if (state.decoder && !state.ended) {
	      var chunk = state.decoder.end();
	      if (chunk && chunk.length) _this.push(chunk);
	    }
	    _this.push(null);
	  });
	  stream.on('data', function (chunk) {
	    debug('wrapped data');
	    if (state.decoder) chunk = state.decoder.write(chunk);

	    // don't skip over falsy values in objectMode
	    if (state.objectMode && (chunk === null || chunk === undefined)) return;else if (!state.objectMode && (!chunk || !chunk.length)) return;
	    var ret = _this.push(chunk);
	    if (!ret) {
	      paused = true;
	      stream.pause();
	    }
	  });

	  // proxy all the other methods.
	  // important when wrapping filters and duplexes.
	  for (var i in stream) {
	    if (this[i] === undefined && typeof stream[i] === 'function') {
	      this[i] = function methodWrap(method) {
	        return function methodWrapReturnFunction() {
	          return stream[method].apply(stream, arguments);
	        };
	      }(i);
	    }
	  }

	  // proxy certain important events.
	  for (var n = 0; n < kProxyEvents.length; n++) {
	    stream.on(kProxyEvents[n], this.emit.bind(this, kProxyEvents[n]));
	  }

	  // when we try to consume some more bytes, simply unpause the
	  // underlying stream.
	  this._read = function (n) {
	    debug('wrapped _read', n);
	    if (paused) {
	      paused = false;
	      stream.resume();
	    }
	  };
	  return this;
	};
	if (typeof Symbol === 'function') {
	  Readable.prototype[Symbol.asyncIterator] = function () {
	    if (createReadableStreamAsyncIterator === undefined) {
	      createReadableStreamAsyncIterator = requireAsync_iterator();
	    }
	    return createReadableStreamAsyncIterator(this);
	  };
	}
	Object.defineProperty(Readable.prototype, 'readableHighWaterMark', {
	  // making it explicit this property is not enumerable
	  // because otherwise some prototype manipulation in
	  // userland will fail
	  enumerable: false,
	  get: function get() {
	    return this._readableState.highWaterMark;
	  }
	});
	Object.defineProperty(Readable.prototype, 'readableBuffer', {
	  // making it explicit this property is not enumerable
	  // because otherwise some prototype manipulation in
	  // userland will fail
	  enumerable: false,
	  get: function get() {
	    return this._readableState && this._readableState.buffer;
	  }
	});
	Object.defineProperty(Readable.prototype, 'readableFlowing', {
	  // making it explicit this property is not enumerable
	  // because otherwise some prototype manipulation in
	  // userland will fail
	  enumerable: false,
	  get: function get() {
	    return this._readableState.flowing;
	  },
	  set: function set(state) {
	    if (this._readableState) {
	      this._readableState.flowing = state;
	    }
	  }
	});

	// exposed for testing purposes only.
	Readable._fromList = fromList;
	Object.defineProperty(Readable.prototype, 'readableLength', {
	  // making it explicit this property is not enumerable
	  // because otherwise some prototype manipulation in
	  // userland will fail
	  enumerable: false,
	  get: function get() {
	    return this._readableState.length;
	  }
	});

	// Pluck off n bytes from an array of buffers.
	// Length is the combined lengths of all the buffers in the list.
	// This function is designed to be inlinable, so please take care when making
	// changes to the function body.
	function fromList(n, state) {
	  // nothing buffered
	  if (state.length === 0) return null;
	  var ret;
	  if (state.objectMode) ret = state.buffer.shift();else if (!n || n >= state.length) {
	    // read it all, truncate the list
	    if (state.decoder) ret = state.buffer.join('');else if (state.buffer.length === 1) ret = state.buffer.first();else ret = state.buffer.concat(state.length);
	    state.buffer.clear();
	  } else {
	    // read part of list
	    ret = state.buffer.consume(n, state.decoder);
	  }
	  return ret;
	}
	function endReadable(stream) {
	  var state = stream._readableState;
	  debug('endReadable', state.endEmitted);
	  if (!state.endEmitted) {
	    state.ended = true;
	    process.nextTick(endReadableNT, state, stream);
	  }
	}
	function endReadableNT(state, stream) {
	  debug('endReadableNT', state.endEmitted, state.length);

	  // Check that we didn't get one last unshift.
	  if (!state.endEmitted && state.length === 0) {
	    state.endEmitted = true;
	    stream.readable = false;
	    stream.emit('end');
	    if (state.autoDestroy) {
	      // In case of duplex streams we need a way to detect
	      // if the writable side is ready for autoDestroy as well
	      var wState = stream._writableState;
	      if (!wState || wState.autoDestroy && wState.finished) {
	        stream.destroy();
	      }
	    }
	  }
	}
	if (typeof Symbol === 'function') {
	  Readable.from = function (iterable, opts) {
	    if (from === undefined) {
	      from = requireFrom();
	    }
	    return from(Readable, iterable, opts);
	  };
	}
	function indexOf(xs, x) {
	  for (var i = 0, l = xs.length; i < l; i++) {
	    if (xs[i] === x) return i;
	  }
	  return -1;
	}
	return _stream_readable;
}

var _stream_transform;
var hasRequired_stream_transform;

function require_stream_transform () {
	if (hasRequired_stream_transform) return _stream_transform;
	hasRequired_stream_transform = 1;

	_stream_transform = Transform;
	var _require$codes = requireErrors().codes,
	  ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED,
	  ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK,
	  ERR_TRANSFORM_ALREADY_TRANSFORMING = _require$codes.ERR_TRANSFORM_ALREADY_TRANSFORMING,
	  ERR_TRANSFORM_WITH_LENGTH_0 = _require$codes.ERR_TRANSFORM_WITH_LENGTH_0;
	var Duplex = require_stream_duplex();
	requireInherits()(Transform, Duplex);
	function afterTransform(er, data) {
	  var ts = this._transformState;
	  ts.transforming = false;
	  var cb = ts.writecb;
	  if (cb === null) {
	    return this.emit('error', new ERR_MULTIPLE_CALLBACK());
	  }
	  ts.writechunk = null;
	  ts.writecb = null;
	  if (data != null)
	    // single equals check for both `null` and `undefined`
	    this.push(data);
	  cb(er);
	  var rs = this._readableState;
	  rs.reading = false;
	  if (rs.needReadable || rs.length < rs.highWaterMark) {
	    this._read(rs.highWaterMark);
	  }
	}
	function Transform(options) {
	  if (!(this instanceof Transform)) return new Transform(options);
	  Duplex.call(this, options);
	  this._transformState = {
	    afterTransform: afterTransform.bind(this),
	    needTransform: false,
	    transforming: false,
	    writecb: null,
	    writechunk: null,
	    writeencoding: null
	  };

	  // start out asking for a readable event once data is transformed.
	  this._readableState.needReadable = true;

	  // we have implemented the _read method, and done the other things
	  // that Readable wants before the first _read call, so unset the
	  // sync guard flag.
	  this._readableState.sync = false;
	  if (options) {
	    if (typeof options.transform === 'function') this._transform = options.transform;
	    if (typeof options.flush === 'function') this._flush = options.flush;
	  }

	  // When the writable side finishes, then flush out anything remaining.
	  this.on('prefinish', prefinish);
	}
	function prefinish() {
	  var _this = this;
	  if (typeof this._flush === 'function' && !this._readableState.destroyed) {
	    this._flush(function (er, data) {
	      done(_this, er, data);
	    });
	  } else {
	    done(this, null, null);
	  }
	}
	Transform.prototype.push = function (chunk, encoding) {
	  this._transformState.needTransform = false;
	  return Duplex.prototype.push.call(this, chunk, encoding);
	};

	// This is the part where you do stuff!
	// override this function in implementation classes.
	// 'chunk' is an input chunk.
	//
	// Call `push(newChunk)` to pass along transformed output
	// to the readable side.  You may call 'push' zero or more times.
	//
	// Call `cb(err)` when you are done with this chunk.  If you pass
	// an error, then that'll put the hurt on the whole operation.  If you
	// never call cb(), then you'll never get another chunk.
	Transform.prototype._transform = function (chunk, encoding, cb) {
	  cb(new ERR_METHOD_NOT_IMPLEMENTED('_transform()'));
	};
	Transform.prototype._write = function (chunk, encoding, cb) {
	  var ts = this._transformState;
	  ts.writecb = cb;
	  ts.writechunk = chunk;
	  ts.writeencoding = encoding;
	  if (!ts.transforming) {
	    var rs = this._readableState;
	    if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
	  }
	};

	// Doesn't matter what the args are here.
	// _transform does all the work.
	// That we got here means that the readable side wants more data.
	Transform.prototype._read = function (n) {
	  var ts = this._transformState;
	  if (ts.writechunk !== null && !ts.transforming) {
	    ts.transforming = true;
	    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
	  } else {
	    // mark that we need a transform, so that any data that comes in
	    // will get processed, now that we've asked for it.
	    ts.needTransform = true;
	  }
	};
	Transform.prototype._destroy = function (err, cb) {
	  Duplex.prototype._destroy.call(this, err, function (err2) {
	    cb(err2);
	  });
	};
	function done(stream, er, data) {
	  if (er) return stream.emit('error', er);
	  if (data != null)
	    // single equals check for both `null` and `undefined`
	    stream.push(data);

	  // TODO(BridgeAR): Write a test for these two error cases
	  // if there's nothing in the write buffer, then that means
	  // that nothing more will ever be provided
	  if (stream._writableState.length) throw new ERR_TRANSFORM_WITH_LENGTH_0();
	  if (stream._transformState.transforming) throw new ERR_TRANSFORM_ALREADY_TRANSFORMING();
	  return stream.push(null);
	}
	return _stream_transform;
}

var _stream_passthrough;
var hasRequired_stream_passthrough;

function require_stream_passthrough () {
	if (hasRequired_stream_passthrough) return _stream_passthrough;
	hasRequired_stream_passthrough = 1;

	_stream_passthrough = PassThrough;
	var Transform = require_stream_transform();
	requireInherits()(PassThrough, Transform);
	function PassThrough(options) {
	  if (!(this instanceof PassThrough)) return new PassThrough(options);
	  Transform.call(this, options);
	}
	PassThrough.prototype._transform = function (chunk, encoding, cb) {
	  cb(null, chunk);
	};
	return _stream_passthrough;
}

var pipeline_1;
var hasRequiredPipeline;

function requirePipeline () {
	if (hasRequiredPipeline) return pipeline_1;
	hasRequiredPipeline = 1;

	var eos;
	function once(callback) {
	  var called = false;
	  return function () {
	    if (called) return;
	    called = true;
	    callback.apply(void 0, arguments);
	  };
	}
	var _require$codes = requireErrors().codes,
	  ERR_MISSING_ARGS = _require$codes.ERR_MISSING_ARGS,
	  ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED;
	function noop(err) {
	  // Rethrow the error if it exists to avoid swallowing it
	  if (err) throw err;
	}
	function isRequest(stream) {
	  return stream.setHeader && typeof stream.abort === 'function';
	}
	function destroyer(stream, reading, writing, callback) {
	  callback = once(callback);
	  var closed = false;
	  stream.on('close', function () {
	    closed = true;
	  });
	  if (eos === undefined) eos = requireEndOfStream();
	  eos(stream, {
	    readable: reading,
	    writable: writing
	  }, function (err) {
	    if (err) return callback(err);
	    closed = true;
	    callback();
	  });
	  var destroyed = false;
	  return function (err) {
	    if (closed) return;
	    if (destroyed) return;
	    destroyed = true;

	    // request.destroy just do .end - .abort is what we want
	    if (isRequest(stream)) return stream.abort();
	    if (typeof stream.destroy === 'function') return stream.destroy();
	    callback(err || new ERR_STREAM_DESTROYED('pipe'));
	  };
	}
	function call(fn) {
	  fn();
	}
	function pipe(from, to) {
	  return from.pipe(to);
	}
	function popCallback(streams) {
	  if (!streams.length) return noop;
	  if (typeof streams[streams.length - 1] !== 'function') return noop;
	  return streams.pop();
	}
	function pipeline() {
	  for (var _len = arguments.length, streams = new Array(_len), _key = 0; _key < _len; _key++) {
	    streams[_key] = arguments[_key];
	  }
	  var callback = popCallback(streams);
	  if (Array.isArray(streams[0])) streams = streams[0];
	  if (streams.length < 2) {
	    throw new ERR_MISSING_ARGS('streams');
	  }
	  var error;
	  var destroys = streams.map(function (stream, i) {
	    var reading = i < streams.length - 1;
	    var writing = i > 0;
	    return destroyer(stream, reading, writing, function (err) {
	      if (!error) error = err;
	      if (err) destroys.forEach(call);
	      if (reading) return;
	      destroys.forEach(call);
	      callback(error);
	    });
	  });
	  return streams.reduce(pipe);
	}
	pipeline_1 = pipeline;
	return pipeline_1;
}

(function (module, exports) {
	var Stream = require$$0$4;
	if (process.env.READABLE_STREAM === 'disable' && Stream) {
	  module.exports = Stream.Readable;
	  Object.assign(module.exports, Stream);
	  module.exports.Stream = Stream;
	} else {
	  exports = module.exports = require_stream_readable();
	  exports.Stream = Stream || exports;
	  exports.Readable = exports;
	  exports.Writable = require_stream_writable();
	  exports.Duplex = require_stream_duplex();
	  exports.Transform = require_stream_transform();
	  exports.PassThrough = require_stream_passthrough();
	  exports.finished = requireEndOfStream();
	  exports.pipeline = requirePipeline();
	} 
} (readable, readable.exports));

var readableExports = readable.exports;

Object.defineProperty(lib$1, "__esModule", { value: true });
lib$1.ReadableWebToNodeStream = void 0;
const readable_stream_1 = readableExports;
/**
 * Converts a Web-API stream into Node stream.Readable class
 * Node stream readable: https://nodejs.org/api/stream.html#stream_readable_streams
 * Web API readable-stream: https://developer.mozilla.org/en-US/docs/Web/API/ReadableStream
 * Node readable stream: https://nodejs.org/api/stream.html#stream_readable_streams
 */
class ReadableWebToNodeStream extends readable_stream_1.Readable {
    /**
     *
     * @param stream Readable​Stream: https://developer.mozilla.org/en-US/docs/Web/API/ReadableStream
     */
    constructor(stream) {
        super();
        this.bytesRead = 0;
        this.released = false;
        this.reader = stream.getReader();
    }
    /**
     * Implementation of readable._read(size).
     * When readable._read() is called, if data is available from the resource,
     * the implementation should begin pushing that data into the read queue
     * https://nodejs.org/api/stream.html#stream_readable_read_size_1
     */
    async _read() {
        // Should start pushing data into the queue
        // Read data from the underlying Web-API-readable-stream
        if (this.released) {
            this.push(null); // Signal EOF
            return;
        }
        this.pendingRead = this.reader.read();
        const data = await this.pendingRead;
        // clear the promise before pushing pushing new data to the queue and allow sequential calls to _read()
        delete this.pendingRead;
        if (data.done || this.released) {
            this.push(null); // Signal EOF
        }
        else {
            this.bytesRead += data.value.length;
            this.push(data.value); // Push new data to the queue
        }
    }
    /**
     * If there is no unresolved read call to Web-API Readable​Stream immediately returns;
     * otherwise will wait until the read is resolved.
     */
    async waitForReadToComplete() {
        if (this.pendingRead) {
            await this.pendingRead;
        }
    }
    /**
     * Close wrapper
     */
    async close() {
        await this.syncAndRelease();
    }
    async syncAndRelease() {
        this.released = true;
        await this.waitForReadToComplete();
        await this.reader.releaseLock();
    }
}
lib$1.ReadableWebToNodeStream = ReadableWebToNodeStream;

// Primitive types
function dv(array) {
    return new DataView(array.buffer, array.byteOffset);
}
/**
 * 8-bit unsigned integer
 */
const UINT8 = {
    len: 1,
    get(array, offset) {
        return dv(array).getUint8(offset);
    },
    put(array, offset, value) {
        dv(array).setUint8(offset, value);
        return offset + 1;
    }
};
/**
 * 16-bit unsigned integer, Little Endian byte order
 */
const UINT16_LE = {
    len: 2,
    get(array, offset) {
        return dv(array).getUint16(offset, true);
    },
    put(array, offset, value) {
        dv(array).setUint16(offset, value, true);
        return offset + 2;
    }
};
/**
 * 16-bit unsigned integer, Big Endian byte order
 */
const UINT16_BE = {
    len: 2,
    get(array, offset) {
        return dv(array).getUint16(offset);
    },
    put(array, offset, value) {
        dv(array).setUint16(offset, value);
        return offset + 2;
    }
};
/**
 * 32-bit unsigned integer, Little Endian byte order
 */
const UINT32_LE = {
    len: 4,
    get(array, offset) {
        return dv(array).getUint32(offset, true);
    },
    put(array, offset, value) {
        dv(array).setUint32(offset, value, true);
        return offset + 4;
    }
};
/**
 * 32-bit unsigned integer, Big Endian byte order
 */
const UINT32_BE = {
    len: 4,
    get(array, offset) {
        return dv(array).getUint32(offset);
    },
    put(array, offset, value) {
        dv(array).setUint32(offset, value);
        return offset + 4;
    }
};
/**
 * 32-bit signed integer, Big Endian byte order
 */
const INT32_BE = {
    len: 4,
    get(array, offset) {
        return dv(array).getInt32(offset);
    },
    put(array, offset, value) {
        dv(array).setInt32(offset, value);
        return offset + 4;
    }
};
/**
 * 64-bit unsigned integer, Little Endian byte order
 */
const UINT64_LE = {
    len: 8,
    get(array, offset) {
        return dv(array).getBigUint64(offset, true);
    },
    put(array, offset, value) {
        dv(array).setBigUint64(offset, value, true);
        return offset + 8;
    }
};
/**
 * Consume a fixed number of bytes from the stream and return a string with a specified encoding.
 */
class StringType {
    constructor(len, encoding) {
        this.len = len;
        this.encoding = encoding;
    }
    get(uint8Array, offset) {
        return node_buffer.Buffer.from(uint8Array).toString(this.encoding, offset, offset + this.len);
    }
}

const defaultMessages = 'End-Of-Stream';
/**
 * Thrown on read operation of the end of file or stream has been reached
 */
class EndOfStreamError extends Error {
    constructor() {
        super(defaultMessages);
    }
}

/**
 * Core tokenizer
 */
class AbstractTokenizer {
    constructor(fileInfo) {
        /**
         * Tokenizer-stream position
         */
        this.position = 0;
        this.numBuffer = new Uint8Array(8);
        this.fileInfo = fileInfo ? fileInfo : {};
    }
    /**
     * Read a token from the tokenizer-stream
     * @param token - The token to read
     * @param position - If provided, the desired position in the tokenizer-stream
     * @returns Promise with token data
     */
    async readToken(token, position = this.position) {
        const uint8Array = node_buffer.Buffer.alloc(token.len);
        const len = await this.readBuffer(uint8Array, { position });
        if (len < token.len)
            throw new EndOfStreamError();
        return token.get(uint8Array, 0);
    }
    /**
     * Peek a token from the tokenizer-stream.
     * @param token - Token to peek from the tokenizer-stream.
     * @param position - Offset where to begin reading within the file. If position is null, data will be read from the current file position.
     * @returns Promise with token data
     */
    async peekToken(token, position = this.position) {
        const uint8Array = node_buffer.Buffer.alloc(token.len);
        const len = await this.peekBuffer(uint8Array, { position });
        if (len < token.len)
            throw new EndOfStreamError();
        return token.get(uint8Array, 0);
    }
    /**
     * Read a numeric token from the stream
     * @param token - Numeric token
     * @returns Promise with number
     */
    async readNumber(token) {
        const len = await this.readBuffer(this.numBuffer, { length: token.len });
        if (len < token.len)
            throw new EndOfStreamError();
        return token.get(this.numBuffer, 0);
    }
    /**
     * Read a numeric token from the stream
     * @param token - Numeric token
     * @returns Promise with number
     */
    async peekNumber(token) {
        const len = await this.peekBuffer(this.numBuffer, { length: token.len });
        if (len < token.len)
            throw new EndOfStreamError();
        return token.get(this.numBuffer, 0);
    }
    /**
     * Ignore number of bytes, advances the pointer in under tokenizer-stream.
     * @param length - Number of bytes to ignore
     * @return resolves the number of bytes ignored, equals length if this available, otherwise the number of bytes available
     */
    async ignore(length) {
        if (this.fileInfo.size !== undefined) {
            const bytesLeft = this.fileInfo.size - this.position;
            if (length > bytesLeft) {
                this.position += bytesLeft;
                return bytesLeft;
            }
        }
        this.position += length;
        return length;
    }
    async close() {
        // empty
    }
    normalizeOptions(uint8Array, options) {
        if (options && options.position !== undefined && options.position < this.position) {
            throw new Error('`options.position` must be equal or greater than `tokenizer.position`');
        }
        if (options) {
            return {
                mayBeLess: options.mayBeLess === true,
                offset: options.offset ? options.offset : 0,
                length: options.length ? options.length : (uint8Array.length - (options.offset ? options.offset : 0)),
                position: options.position ? options.position : this.position
            };
        }
        return {
            mayBeLess: false,
            offset: 0,
            length: uint8Array.length,
            position: this.position
        };
    }
}

class BufferTokenizer extends AbstractTokenizer {
    /**
     * Construct BufferTokenizer
     * @param uint8Array - Uint8Array to tokenize
     * @param fileInfo - Pass additional file information to the tokenizer
     */
    constructor(uint8Array, fileInfo) {
        super(fileInfo);
        this.uint8Array = uint8Array;
        this.fileInfo.size = this.fileInfo.size ? this.fileInfo.size : uint8Array.length;
    }
    /**
     * Read buffer from tokenizer
     * @param uint8Array - Uint8Array to tokenize
     * @param options - Read behaviour options
     * @returns {Promise<number>}
     */
    async readBuffer(uint8Array, options) {
        if (options && options.position) {
            if (options.position < this.position) {
                throw new Error('`options.position` must be equal or greater than `tokenizer.position`');
            }
            this.position = options.position;
        }
        const bytesRead = await this.peekBuffer(uint8Array, options);
        this.position += bytesRead;
        return bytesRead;
    }
    /**
     * Peek (read ahead) buffer from tokenizer
     * @param uint8Array
     * @param options - Read behaviour options
     * @returns {Promise<number>}
     */
    async peekBuffer(uint8Array, options) {
        const normOptions = this.normalizeOptions(uint8Array, options);
        const bytes2read = Math.min(this.uint8Array.length - normOptions.position, normOptions.length);
        if ((!normOptions.mayBeLess) && bytes2read < normOptions.length) {
            throw new EndOfStreamError();
        }
        else {
            uint8Array.set(this.uint8Array.subarray(normOptions.position, normOptions.position + bytes2read), normOptions.offset);
            return bytes2read;
        }
    }
    async close() {
        // empty
    }
}

/**
 * Construct ReadStreamTokenizer from given Buffer.
 * @param uint8Array - Uint8Array to tokenize
 * @param fileInfo - Pass additional file information to the tokenizer
 * @returns BufferTokenizer
 */
function fromBuffer(uint8Array, fileInfo) {
    return new BufferTokenizer(uint8Array, fileInfo);
}

function stringToBytes(string) {
	return [...string].map(character => character.charCodeAt(0)); // eslint-disable-line unicorn/prefer-code-point
}

/**
Checks whether the TAR checksum is valid.

@param {Buffer} buffer - The TAR header `[offset ... offset + 512]`.
@param {number} offset - TAR header offset.
@returns {boolean} `true` if the TAR checksum is valid, otherwise `false`.
*/
function tarHeaderChecksumMatches(buffer, offset = 0) {
	const readSum = Number.parseInt(buffer.toString('utf8', 148, 154).replace(/\0.*$/, '').trim(), 8); // Read sum in header
	if (Number.isNaN(readSum)) {
		return false;
	}

	let sum = 8 * 0x20; // Initialize signed bit sum

	for (let index = offset; index < offset + 148; index++) {
		sum += buffer[index];
	}

	for (let index = offset + 156; index < offset + 512; index++) {
		sum += buffer[index];
	}

	return readSum === sum;
}

/**
ID3 UINT32 sync-safe tokenizer token.
28 bits (representing up to 256MB) integer, the msb is 0 to avoid "false syncsignals".
*/
const uint32SyncSafeToken = {
	get: (buffer, offset) => (buffer[offset + 3] & 0x7F) | ((buffer[offset + 2]) << 7) | ((buffer[offset + 1]) << 14) | ((buffer[offset]) << 21),
	len: 4,
};

const extensions = [
	'jpg',
	'png',
	'apng',
	'gif',
	'webp',
	'flif',
	'xcf',
	'cr2',
	'cr3',
	'orf',
	'arw',
	'dng',
	'nef',
	'rw2',
	'raf',
	'tif',
	'bmp',
	'icns',
	'jxr',
	'psd',
	'indd',
	'zip',
	'tar',
	'rar',
	'gz',
	'bz2',
	'7z',
	'dmg',
	'mp4',
	'mid',
	'mkv',
	'webm',
	'mov',
	'avi',
	'mpg',
	'mp2',
	'mp3',
	'm4a',
	'oga',
	'ogg',
	'ogv',
	'opus',
	'flac',
	'wav',
	'spx',
	'amr',
	'pdf',
	'epub',
	'elf',
	'exe',
	'swf',
	'rtf',
	'wasm',
	'woff',
	'woff2',
	'eot',
	'ttf',
	'otf',
	'ico',
	'flv',
	'ps',
	'xz',
	'sqlite',
	'nes',
	'crx',
	'xpi',
	'cab',
	'deb',
	'ar',
	'rpm',
	'Z',
	'lz',
	'cfb',
	'mxf',
	'mts',
	'blend',
	'bpg',
	'docx',
	'pptx',
	'xlsx',
	'3gp',
	'3g2',
	'j2c',
	'jp2',
	'jpm',
	'jpx',
	'mj2',
	'aif',
	'qcp',
	'odt',
	'ods',
	'odp',
	'xml',
	'mobi',
	'heic',
	'cur',
	'ktx',
	'ape',
	'wv',
	'dcm',
	'ics',
	'glb',
	'pcap',
	'dsf',
	'lnk',
	'alias',
	'voc',
	'ac3',
	'm4v',
	'm4p',
	'm4b',
	'f4v',
	'f4p',
	'f4b',
	'f4a',
	'mie',
	'asf',
	'ogm',
	'ogx',
	'mpc',
	'arrow',
	'shp',
	'aac',
	'mp1',
	'it',
	's3m',
	'xm',
	'ai',
	'skp',
	'avif',
	'eps',
	'lzh',
	'pgp',
	'asar',
	'stl',
	'chm',
	'3mf',
	'zst',
	'jxl',
	'vcf',
	'jls',
	'pst',
	'dwg',
	'parquet',
	'class',
	'arj',
	'cpio',
	'ace',
	'avro',
	'icc',
];

const mimeTypes = [
	'image/jpeg',
	'image/png',
	'image/gif',
	'image/webp',
	'image/flif',
	'image/x-xcf',
	'image/x-canon-cr2',
	'image/x-canon-cr3',
	'image/tiff',
	'image/bmp',
	'image/vnd.ms-photo',
	'image/vnd.adobe.photoshop',
	'application/x-indesign',
	'application/epub+zip',
	'application/x-xpinstall',
	'application/vnd.oasis.opendocument.text',
	'application/vnd.oasis.opendocument.spreadsheet',
	'application/vnd.oasis.opendocument.presentation',
	'application/vnd.openxmlformats-officedocument.wordprocessingml.document',
	'application/vnd.openxmlformats-officedocument.presentationml.presentation',
	'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
	'application/zip',
	'application/x-tar',
	'application/x-rar-compressed',
	'application/gzip',
	'application/x-bzip2',
	'application/x-7z-compressed',
	'application/x-apple-diskimage',
	'application/x-apache-arrow',
	'video/mp4',
	'audio/midi',
	'video/x-matroska',
	'video/webm',
	'video/quicktime',
	'video/vnd.avi',
	'audio/vnd.wave',
	'audio/qcelp',
	'audio/x-ms-asf',
	'video/x-ms-asf',
	'application/vnd.ms-asf',
	'video/mpeg',
	'video/3gpp',
	'audio/mpeg',
	'audio/mp4', // RFC 4337
	'audio/opus',
	'video/ogg',
	'audio/ogg',
	'application/ogg',
	'audio/x-flac',
	'audio/ape',
	'audio/wavpack',
	'audio/amr',
	'application/pdf',
	'application/x-elf',
	'application/x-msdownload',
	'application/x-shockwave-flash',
	'application/rtf',
	'application/wasm',
	'font/woff',
	'font/woff2',
	'application/vnd.ms-fontobject',
	'font/ttf',
	'font/otf',
	'image/x-icon',
	'video/x-flv',
	'application/postscript',
	'application/eps',
	'application/x-xz',
	'application/x-sqlite3',
	'application/x-nintendo-nes-rom',
	'application/x-google-chrome-extension',
	'application/vnd.ms-cab-compressed',
	'application/x-deb',
	'application/x-unix-archive',
	'application/x-rpm',
	'application/x-compress',
	'application/x-lzip',
	'application/x-cfb',
	'application/x-mie',
	'application/mxf',
	'video/mp2t',
	'application/x-blender',
	'image/bpg',
	'image/j2c',
	'image/jp2',
	'image/jpx',
	'image/jpm',
	'image/mj2',
	'audio/aiff',
	'application/xml',
	'application/x-mobipocket-ebook',
	'image/heif',
	'image/heif-sequence',
	'image/heic',
	'image/heic-sequence',
	'image/icns',
	'image/ktx',
	'application/dicom',
	'audio/x-musepack',
	'text/calendar',
	'text/vcard',
	'model/gltf-binary',
	'application/vnd.tcpdump.pcap',
	'audio/x-dsf', // Non-standard
	'application/x.ms.shortcut', // Invented by us
	'application/x.apple.alias', // Invented by us
	'audio/x-voc',
	'audio/vnd.dolby.dd-raw',
	'audio/x-m4a',
	'image/apng',
	'image/x-olympus-orf',
	'image/x-sony-arw',
	'image/x-adobe-dng',
	'image/x-nikon-nef',
	'image/x-panasonic-rw2',
	'image/x-fujifilm-raf',
	'video/x-m4v',
	'video/3gpp2',
	'application/x-esri-shape',
	'audio/aac',
	'audio/x-it',
	'audio/x-s3m',
	'audio/x-xm',
	'video/MP1S',
	'video/MP2P',
	'application/vnd.sketchup.skp',
	'image/avif',
	'application/x-lzh-compressed',
	'application/pgp-encrypted',
	'application/x-asar',
	'model/stl',
	'application/vnd.ms-htmlhelp',
	'model/3mf',
	'image/jxl',
	'application/zstd',
	'image/jls',
	'application/vnd.ms-outlook',
	'image/vnd.dwg',
	'application/x-parquet',
	'application/java-vm',
	'application/x-arj',
	'application/x-cpio',
	'application/x-ace-compressed',
	'application/avro',
	'application/vnd.iccprofile',
];

const minimumBytes = 4100; // A fair amount of file-types are detectable within this range.

async function fileTypeFromBuffer(input) {
	if (!(input instanceof Uint8Array || input instanceof ArrayBuffer)) {
		throw new TypeError(`Expected the \`input\` argument to be of type \`Uint8Array\` or \`Buffer\` or \`ArrayBuffer\`, got \`${typeof input}\``);
	}

	const buffer = input instanceof Uint8Array ? input : new Uint8Array(input);

	if (!(buffer?.length > 1)) {
		return;
	}

	return fileTypeFromTokenizer(fromBuffer(buffer));
}

function _check(buffer, headers, options) {
	options = {
		offset: 0,
		...options,
	};

	for (const [index, header] of headers.entries()) {
		// If a bitmask is set
		if (options.mask) {
			// If header doesn't equal `buf` with bits masked off
			if (header !== (options.mask[index] & buffer[index + options.offset])) {
				return false;
			}
		} else if (header !== buffer[index + options.offset]) {
			return false;
		}
	}

	return true;
}

async function fileTypeFromTokenizer(tokenizer) {
	try {
		return new FileTypeParser().parse(tokenizer);
	} catch (error) {
		if (!(error instanceof EndOfStreamError)) {
			throw error;
		}
	}
}

class FileTypeParser {
	check(header, options) {
		return _check(this.buffer, header, options);
	}

	checkString(header, options) {
		return this.check(stringToBytes(header), options);
	}

	async parse(tokenizer) {
		this.buffer = node_buffer.Buffer.alloc(minimumBytes);

		// Keep reading until EOF if the file size is unknown.
		if (tokenizer.fileInfo.size === undefined) {
			tokenizer.fileInfo.size = Number.MAX_SAFE_INTEGER;
		}

		this.tokenizer = tokenizer;

		await tokenizer.peekBuffer(this.buffer, {length: 12, mayBeLess: true});

		// -- 2-byte signatures --

		if (this.check([0x42, 0x4D])) {
			return {
				ext: 'bmp',
				mime: 'image/bmp',
			};
		}

		if (this.check([0x0B, 0x77])) {
			return {
				ext: 'ac3',
				mime: 'audio/vnd.dolby.dd-raw',
			};
		}

		if (this.check([0x78, 0x01])) {
			return {
				ext: 'dmg',
				mime: 'application/x-apple-diskimage',
			};
		}

		if (this.check([0x4D, 0x5A])) {
			return {
				ext: 'exe',
				mime: 'application/x-msdownload',
			};
		}

		if (this.check([0x25, 0x21])) {
			await tokenizer.peekBuffer(this.buffer, {length: 24, mayBeLess: true});

			if (
				this.checkString('PS-Adobe-', {offset: 2})
				&& this.checkString(' EPSF-', {offset: 14})
			) {
				return {
					ext: 'eps',
					mime: 'application/eps',
				};
			}

			return {
				ext: 'ps',
				mime: 'application/postscript',
			};
		}

		if (
			this.check([0x1F, 0xA0])
			|| this.check([0x1F, 0x9D])
		) {
			return {
				ext: 'Z',
				mime: 'application/x-compress',
			};
		}

		if (this.check([0xC7, 0x71])) {
			return {
				ext: 'cpio',
				mime: 'application/x-cpio',
			};
		}

		if (this.check([0x60, 0xEA])) {
			return {
				ext: 'arj',
				mime: 'application/x-arj',
			};
		}

		// -- 3-byte signatures --

		if (this.check([0xEF, 0xBB, 0xBF])) { // UTF-8-BOM
			// Strip off UTF-8-BOM
			this.tokenizer.ignore(3);
			return this.parse(tokenizer);
		}

		if (this.check([0x47, 0x49, 0x46])) {
			return {
				ext: 'gif',
				mime: 'image/gif',
			};
		}

		if (this.check([0x49, 0x49, 0xBC])) {
			return {
				ext: 'jxr',
				mime: 'image/vnd.ms-photo',
			};
		}

		if (this.check([0x1F, 0x8B, 0x8])) {
			return {
				ext: 'gz',
				mime: 'application/gzip',
			};
		}

		if (this.check([0x42, 0x5A, 0x68])) {
			return {
				ext: 'bz2',
				mime: 'application/x-bzip2',
			};
		}

		if (this.checkString('ID3')) {
			await tokenizer.ignore(6); // Skip ID3 header until the header size
			const id3HeaderLength = await tokenizer.readToken(uint32SyncSafeToken);
			if (tokenizer.position + id3HeaderLength > tokenizer.fileInfo.size) {
				// Guess file type based on ID3 header for backward compatibility
				return {
					ext: 'mp3',
					mime: 'audio/mpeg',
				};
			}

			await tokenizer.ignore(id3HeaderLength);
			return fileTypeFromTokenizer(tokenizer); // Skip ID3 header, recursion
		}

		// Musepack, SV7
		if (this.checkString('MP+')) {
			return {
				ext: 'mpc',
				mime: 'audio/x-musepack',
			};
		}

		if (
			(this.buffer[0] === 0x43 || this.buffer[0] === 0x46)
			&& this.check([0x57, 0x53], {offset: 1})
		) {
			return {
				ext: 'swf',
				mime: 'application/x-shockwave-flash',
			};
		}

		// -- 4-byte signatures --

		// Requires a sample size of 4 bytes
		if (this.check([0xFF, 0xD8, 0xFF])) {
			if (this.check([0xF7], {offset: 3})) { // JPG7/SOF55, indicating a ISO/IEC 14495 / JPEG-LS file
				return {
					ext: 'jls',
					mime: 'image/jls',
				};
			}

			return {
				ext: 'jpg',
				mime: 'image/jpeg',
			};
		}

		if (this.check([0x4F, 0x62, 0x6A, 0x01])) {
			return {
				ext: 'avro',
				mime: 'application/avro',
			};
		}

		if (this.checkString('FLIF')) {
			return {
				ext: 'flif',
				mime: 'image/flif',
			};
		}

		if (this.checkString('8BPS')) {
			return {
				ext: 'psd',
				mime: 'image/vnd.adobe.photoshop',
			};
		}

		if (this.checkString('WEBP', {offset: 8})) {
			return {
				ext: 'webp',
				mime: 'image/webp',
			};
		}

		// Musepack, SV8
		if (this.checkString('MPCK')) {
			return {
				ext: 'mpc',
				mime: 'audio/x-musepack',
			};
		}

		if (this.checkString('FORM')) {
			return {
				ext: 'aif',
				mime: 'audio/aiff',
			};
		}

		if (this.checkString('icns', {offset: 0})) {
			return {
				ext: 'icns',
				mime: 'image/icns',
			};
		}

		// Zip-based file formats
		// Need to be before the `zip` check
		if (this.check([0x50, 0x4B, 0x3, 0x4])) { // Local file header signature
			try {
				while (tokenizer.position + 30 < tokenizer.fileInfo.size) {
					await tokenizer.readBuffer(this.buffer, {length: 30});

					// https://en.wikipedia.org/wiki/Zip_(file_format)#File_headers
					const zipHeader = {
						compressedSize: this.buffer.readUInt32LE(18),
						uncompressedSize: this.buffer.readUInt32LE(22),
						filenameLength: this.buffer.readUInt16LE(26),
						extraFieldLength: this.buffer.readUInt16LE(28),
					};

					zipHeader.filename = await tokenizer.readToken(new StringType(zipHeader.filenameLength, 'utf-8'));
					await tokenizer.ignore(zipHeader.extraFieldLength);

					// Assumes signed `.xpi` from addons.mozilla.org
					if (zipHeader.filename === 'META-INF/mozilla.rsa') {
						return {
							ext: 'xpi',
							mime: 'application/x-xpinstall',
						};
					}

					if (zipHeader.filename.endsWith('.rels') || zipHeader.filename.endsWith('.xml')) {
						const type = zipHeader.filename.split('/')[0];
						switch (type) {
							case '_rels':
								break;
							case 'word':
								return {
									ext: 'docx',
									mime: 'application/vnd.openxmlformats-officedocument.wordprocessingml.document',
								};
							case 'ppt':
								return {
									ext: 'pptx',
									mime: 'application/vnd.openxmlformats-officedocument.presentationml.presentation',
								};
							case 'xl':
								return {
									ext: 'xlsx',
									mime: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
								};
							default:
								break;
						}
					}

					if (zipHeader.filename.startsWith('xl/')) {
						return {
							ext: 'xlsx',
							mime: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
						};
					}

					if (zipHeader.filename.startsWith('3D/') && zipHeader.filename.endsWith('.model')) {
						return {
							ext: '3mf',
							mime: 'model/3mf',
						};
					}

					// The docx, xlsx and pptx file types extend the Office Open XML file format:
					// https://en.wikipedia.org/wiki/Office_Open_XML_file_formats
					// We look for:
					// - one entry named '[Content_Types].xml' or '_rels/.rels',
					// - one entry indicating specific type of file.
					// MS Office, OpenOffice and LibreOffice may put the parts in different order, so the check should not rely on it.
					if (zipHeader.filename === 'mimetype' && zipHeader.compressedSize === zipHeader.uncompressedSize) {
						let mimeType = await tokenizer.readToken(new StringType(zipHeader.compressedSize, 'utf-8'));
						mimeType = mimeType.trim();

						switch (mimeType) {
							case 'application/epub+zip':
								return {
									ext: 'epub',
									mime: 'application/epub+zip',
								};
							case 'application/vnd.oasis.opendocument.text':
								return {
									ext: 'odt',
									mime: 'application/vnd.oasis.opendocument.text',
								};
							case 'application/vnd.oasis.opendocument.spreadsheet':
								return {
									ext: 'ods',
									mime: 'application/vnd.oasis.opendocument.spreadsheet',
								};
							case 'application/vnd.oasis.opendocument.presentation':
								return {
									ext: 'odp',
									mime: 'application/vnd.oasis.opendocument.presentation',
								};
							default:
						}
					}

					// Try to find next header manually when current one is corrupted
					if (zipHeader.compressedSize === 0) {
						let nextHeaderIndex = -1;

						while (nextHeaderIndex < 0 && (tokenizer.position < tokenizer.fileInfo.size)) {
							await tokenizer.peekBuffer(this.buffer, {mayBeLess: true});

							nextHeaderIndex = this.buffer.indexOf('504B0304', 0, 'hex');
							// Move position to the next header if found, skip the whole buffer otherwise
							await tokenizer.ignore(nextHeaderIndex >= 0 ? nextHeaderIndex : this.buffer.length);
						}
					} else {
						await tokenizer.ignore(zipHeader.compressedSize);
					}
				}
			} catch (error) {
				if (!(error instanceof EndOfStreamError)) {
					throw error;
				}
			}

			return {
				ext: 'zip',
				mime: 'application/zip',
			};
		}

		if (this.checkString('OggS')) {
			// This is an OGG container
			await tokenizer.ignore(28);
			const type = node_buffer.Buffer.alloc(8);
			await tokenizer.readBuffer(type);

			// Needs to be before `ogg` check
			if (_check(type, [0x4F, 0x70, 0x75, 0x73, 0x48, 0x65, 0x61, 0x64])) {
				return {
					ext: 'opus',
					mime: 'audio/opus',
				};
			}

			// If ' theora' in header.
			if (_check(type, [0x80, 0x74, 0x68, 0x65, 0x6F, 0x72, 0x61])) {
				return {
					ext: 'ogv',
					mime: 'video/ogg',
				};
			}

			// If '\x01video' in header.
			if (_check(type, [0x01, 0x76, 0x69, 0x64, 0x65, 0x6F, 0x00])) {
				return {
					ext: 'ogm',
					mime: 'video/ogg',
				};
			}

			// If ' FLAC' in header  https://xiph.org/flac/faq.html
			if (_check(type, [0x7F, 0x46, 0x4C, 0x41, 0x43])) {
				return {
					ext: 'oga',
					mime: 'audio/ogg',
				};
			}

			// 'Speex  ' in header https://en.wikipedia.org/wiki/Speex
			if (_check(type, [0x53, 0x70, 0x65, 0x65, 0x78, 0x20, 0x20])) {
				return {
					ext: 'spx',
					mime: 'audio/ogg',
				};
			}

			// If '\x01vorbis' in header
			if (_check(type, [0x01, 0x76, 0x6F, 0x72, 0x62, 0x69, 0x73])) {
				return {
					ext: 'ogg',
					mime: 'audio/ogg',
				};
			}

			// Default OGG container https://www.iana.org/assignments/media-types/application/ogg
			return {
				ext: 'ogx',
				mime: 'application/ogg',
			};
		}

		if (
			this.check([0x50, 0x4B])
			&& (this.buffer[2] === 0x3 || this.buffer[2] === 0x5 || this.buffer[2] === 0x7)
			&& (this.buffer[3] === 0x4 || this.buffer[3] === 0x6 || this.buffer[3] === 0x8)
		) {
			return {
				ext: 'zip',
				mime: 'application/zip',
			};
		}

		//

		// File Type Box (https://en.wikipedia.org/wiki/ISO_base_media_file_format)
		// It's not required to be first, but it's recommended to be. Almost all ISO base media files start with `ftyp` box.
		// `ftyp` box must contain a brand major identifier, which must consist of ISO 8859-1 printable characters.
		// Here we check for 8859-1 printable characters (for simplicity, it's a mask which also catches one non-printable character).
		if (
			this.checkString('ftyp', {offset: 4})
			&& (this.buffer[8] & 0x60) !== 0x00 // Brand major, first character ASCII?
		) {
			// They all can have MIME `video/mp4` except `application/mp4` special-case which is hard to detect.
			// For some cases, we're specific, everything else falls to `video/mp4` with `mp4` extension.
			const brandMajor = this.buffer.toString('binary', 8, 12).replace('\0', ' ').trim();
			switch (brandMajor) {
				case 'avif':
				case 'avis':
					return {ext: 'avif', mime: 'image/avif'};
				case 'mif1':
					return {ext: 'heic', mime: 'image/heif'};
				case 'msf1':
					return {ext: 'heic', mime: 'image/heif-sequence'};
				case 'heic':
				case 'heix':
					return {ext: 'heic', mime: 'image/heic'};
				case 'hevc':
				case 'hevx':
					return {ext: 'heic', mime: 'image/heic-sequence'};
				case 'qt':
					return {ext: 'mov', mime: 'video/quicktime'};
				case 'M4V':
				case 'M4VH':
				case 'M4VP':
					return {ext: 'm4v', mime: 'video/x-m4v'};
				case 'M4P':
					return {ext: 'm4p', mime: 'video/mp4'};
				case 'M4B':
					return {ext: 'm4b', mime: 'audio/mp4'};
				case 'M4A':
					return {ext: 'm4a', mime: 'audio/x-m4a'};
				case 'F4V':
					return {ext: 'f4v', mime: 'video/mp4'};
				case 'F4P':
					return {ext: 'f4p', mime: 'video/mp4'};
				case 'F4A':
					return {ext: 'f4a', mime: 'audio/mp4'};
				case 'F4B':
					return {ext: 'f4b', mime: 'audio/mp4'};
				case 'crx':
					return {ext: 'cr3', mime: 'image/x-canon-cr3'};
				default:
					if (brandMajor.startsWith('3g')) {
						if (brandMajor.startsWith('3g2')) {
							return {ext: '3g2', mime: 'video/3gpp2'};
						}

						return {ext: '3gp', mime: 'video/3gpp'};
					}

					return {ext: 'mp4', mime: 'video/mp4'};
			}
		}

		if (this.checkString('MThd')) {
			return {
				ext: 'mid',
				mime: 'audio/midi',
			};
		}

		if (
			this.checkString('wOFF')
			&& (
				this.check([0x00, 0x01, 0x00, 0x00], {offset: 4})
				|| this.checkString('OTTO', {offset: 4})
			)
		) {
			return {
				ext: 'woff',
				mime: 'font/woff',
			};
		}

		if (
			this.checkString('wOF2')
			&& (
				this.check([0x00, 0x01, 0x00, 0x00], {offset: 4})
				|| this.checkString('OTTO', {offset: 4})
			)
		) {
			return {
				ext: 'woff2',
				mime: 'font/woff2',
			};
		}

		if (this.check([0xD4, 0xC3, 0xB2, 0xA1]) || this.check([0xA1, 0xB2, 0xC3, 0xD4])) {
			return {
				ext: 'pcap',
				mime: 'application/vnd.tcpdump.pcap',
			};
		}

		// Sony DSD Stream File (DSF)
		if (this.checkString('DSD ')) {
			return {
				ext: 'dsf',
				mime: 'audio/x-dsf', // Non-standard
			};
		}

		if (this.checkString('LZIP')) {
			return {
				ext: 'lz',
				mime: 'application/x-lzip',
			};
		}

		if (this.checkString('fLaC')) {
			return {
				ext: 'flac',
				mime: 'audio/x-flac',
			};
		}

		if (this.check([0x42, 0x50, 0x47, 0xFB])) {
			return {
				ext: 'bpg',
				mime: 'image/bpg',
			};
		}

		if (this.checkString('wvpk')) {
			return {
				ext: 'wv',
				mime: 'audio/wavpack',
			};
		}

		if (this.checkString('%PDF')) {
			try {
				await tokenizer.ignore(1350);
				const maxBufferSize = 10 * 1024 * 1024;
				const buffer = node_buffer.Buffer.alloc(Math.min(maxBufferSize, tokenizer.fileInfo.size));
				await tokenizer.readBuffer(buffer, {mayBeLess: true});

				// Check if this is an Adobe Illustrator file
				if (buffer.includes(node_buffer.Buffer.from('AIPrivateData'))) {
					return {
						ext: 'ai',
						mime: 'application/postscript',
					};
				}
			} catch (error) {
				// Swallow end of stream error if file is too small for the Adobe AI check
				if (!(error instanceof EndOfStreamError)) {
					throw error;
				}
			}

			// Assume this is just a normal PDF
			return {
				ext: 'pdf',
				mime: 'application/pdf',
			};
		}

		if (this.check([0x00, 0x61, 0x73, 0x6D])) {
			return {
				ext: 'wasm',
				mime: 'application/wasm',
			};
		}

		// TIFF, little-endian type
		if (this.check([0x49, 0x49])) {
			const fileType = await this.readTiffHeader(false);
			if (fileType) {
				return fileType;
			}
		}

		// TIFF, big-endian type
		if (this.check([0x4D, 0x4D])) {
			const fileType = await this.readTiffHeader(true);
			if (fileType) {
				return fileType;
			}
		}

		if (this.checkString('MAC ')) {
			return {
				ext: 'ape',
				mime: 'audio/ape',
			};
		}

		// https://github.com/threatstack/libmagic/blob/master/magic/Magdir/matroska
		if (this.check([0x1A, 0x45, 0xDF, 0xA3])) { // Root element: EBML
			async function readField() {
				const msb = await tokenizer.peekNumber(UINT8);
				let mask = 0x80;
				let ic = 0; // 0 = A, 1 = B, 2 = C, 3
				// = D

				while ((msb & mask) === 0 && mask !== 0) {
					++ic;
					mask >>= 1;
				}

				const id = node_buffer.Buffer.alloc(ic + 1);
				await tokenizer.readBuffer(id);
				return id;
			}

			async function readElement() {
				const id = await readField();
				const lengthField = await readField();
				lengthField[0] ^= 0x80 >> (lengthField.length - 1);
				const nrLength = Math.min(6, lengthField.length); // JavaScript can max read 6 bytes integer
				return {
					id: id.readUIntBE(0, id.length),
					len: lengthField.readUIntBE(lengthField.length - nrLength, nrLength),
				};
			}

			async function readChildren(children) {
				while (children > 0) {
					const element = await readElement();
					if (element.id === 0x42_82) {
						const rawValue = await tokenizer.readToken(new StringType(element.len, 'utf-8'));
						return rawValue.replace(/\00.*$/g, ''); // Return DocType
					}

					await tokenizer.ignore(element.len); // ignore payload
					--children;
				}
			}

			const re = await readElement();
			const docType = await readChildren(re.len);

			switch (docType) {
				case 'webm':
					return {
						ext: 'webm',
						mime: 'video/webm',
					};

				case 'matroska':
					return {
						ext: 'mkv',
						mime: 'video/x-matroska',
					};

				default:
					return;
			}
		}

		// RIFF file format which might be AVI, WAV, QCP, etc
		if (this.check([0x52, 0x49, 0x46, 0x46])) {
			if (this.check([0x41, 0x56, 0x49], {offset: 8})) {
				return {
					ext: 'avi',
					mime: 'video/vnd.avi',
				};
			}

			if (this.check([0x57, 0x41, 0x56, 0x45], {offset: 8})) {
				return {
					ext: 'wav',
					mime: 'audio/vnd.wave',
				};
			}

			// QLCM, QCP file
			if (this.check([0x51, 0x4C, 0x43, 0x4D], {offset: 8})) {
				return {
					ext: 'qcp',
					mime: 'audio/qcelp',
				};
			}
		}

		if (this.checkString('SQLi')) {
			return {
				ext: 'sqlite',
				mime: 'application/x-sqlite3',
			};
		}

		if (this.check([0x4E, 0x45, 0x53, 0x1A])) {
			return {
				ext: 'nes',
				mime: 'application/x-nintendo-nes-rom',
			};
		}

		if (this.checkString('Cr24')) {
			return {
				ext: 'crx',
				mime: 'application/x-google-chrome-extension',
			};
		}

		if (
			this.checkString('MSCF')
			|| this.checkString('ISc(')
		) {
			return {
				ext: 'cab',
				mime: 'application/vnd.ms-cab-compressed',
			};
		}

		if (this.check([0xED, 0xAB, 0xEE, 0xDB])) {
			return {
				ext: 'rpm',
				mime: 'application/x-rpm',
			};
		}

		if (this.check([0xC5, 0xD0, 0xD3, 0xC6])) {
			return {
				ext: 'eps',
				mime: 'application/eps',
			};
		}

		if (this.check([0x28, 0xB5, 0x2F, 0xFD])) {
			return {
				ext: 'zst',
				mime: 'application/zstd',
			};
		}

		if (this.check([0x7F, 0x45, 0x4C, 0x46])) {
			return {
				ext: 'elf',
				mime: 'application/x-elf',
			};
		}

		if (this.check([0x21, 0x42, 0x44, 0x4E])) {
			return {
				ext: 'pst',
				mime: 'application/vnd.ms-outlook',
			};
		}

		if (this.checkString('PAR1')) {
			return {
				ext: 'parquet',
				mime: 'application/x-parquet',
			};
		}

		// -- 5-byte signatures --

		if (this.check([0x4F, 0x54, 0x54, 0x4F, 0x00])) {
			return {
				ext: 'otf',
				mime: 'font/otf',
			};
		}

		if (this.checkString('#!AMR')) {
			return {
				ext: 'amr',
				mime: 'audio/amr',
			};
		}

		if (this.checkString('{\\rtf')) {
			return {
				ext: 'rtf',
				mime: 'application/rtf',
			};
		}

		if (this.check([0x46, 0x4C, 0x56, 0x01])) {
			return {
				ext: 'flv',
				mime: 'video/x-flv',
			};
		}

		if (this.checkString('IMPM')) {
			return {
				ext: 'it',
				mime: 'audio/x-it',
			};
		}

		if (
			this.checkString('-lh0-', {offset: 2})
			|| this.checkString('-lh1-', {offset: 2})
			|| this.checkString('-lh2-', {offset: 2})
			|| this.checkString('-lh3-', {offset: 2})
			|| this.checkString('-lh4-', {offset: 2})
			|| this.checkString('-lh5-', {offset: 2})
			|| this.checkString('-lh6-', {offset: 2})
			|| this.checkString('-lh7-', {offset: 2})
			|| this.checkString('-lzs-', {offset: 2})
			|| this.checkString('-lz4-', {offset: 2})
			|| this.checkString('-lz5-', {offset: 2})
			|| this.checkString('-lhd-', {offset: 2})
		) {
			return {
				ext: 'lzh',
				mime: 'application/x-lzh-compressed',
			};
		}

		// MPEG program stream (PS or MPEG-PS)
		if (this.check([0x00, 0x00, 0x01, 0xBA])) {
			//  MPEG-PS, MPEG-1 Part 1
			if (this.check([0x21], {offset: 4, mask: [0xF1]})) {
				return {
					ext: 'mpg', // May also be .ps, .mpeg
					mime: 'video/MP1S',
				};
			}

			// MPEG-PS, MPEG-2 Part 1
			if (this.check([0x44], {offset: 4, mask: [0xC4]})) {
				return {
					ext: 'mpg', // May also be .mpg, .m2p, .vob or .sub
					mime: 'video/MP2P',
				};
			}
		}

		if (this.checkString('ITSF')) {
			return {
				ext: 'chm',
				mime: 'application/vnd.ms-htmlhelp',
			};
		}

		if (this.check([0xCA, 0xFE, 0xBA, 0xBE])) {
			return {
				ext: 'class',
				mime: 'application/java-vm',
			};
		}

		// -- 6-byte signatures --

		if (this.check([0xFD, 0x37, 0x7A, 0x58, 0x5A, 0x00])) {
			return {
				ext: 'xz',
				mime: 'application/x-xz',
			};
		}

		if (this.checkString('<?xml ')) {
			return {
				ext: 'xml',
				mime: 'application/xml',
			};
		}

		if (this.check([0x37, 0x7A, 0xBC, 0xAF, 0x27, 0x1C])) {
			return {
				ext: '7z',
				mime: 'application/x-7z-compressed',
			};
		}

		if (
			this.check([0x52, 0x61, 0x72, 0x21, 0x1A, 0x7])
			&& (this.buffer[6] === 0x0 || this.buffer[6] === 0x1)
		) {
			return {
				ext: 'rar',
				mime: 'application/x-rar-compressed',
			};
		}

		if (this.checkString('solid ')) {
			return {
				ext: 'stl',
				mime: 'model/stl',
			};
		}

		if (this.checkString('AC')) {
			const version = this.buffer.toString('binary', 2, 6);
			if (version.match('^d*') && version >= 1000 && version <= 1050) {
				return {
					ext: 'dwg',
					mime: 'image/vnd.dwg',
				};
			}
		}

		if (this.checkString('070707')) {
			return {
				ext: 'cpio',
				mime: 'application/x-cpio',
			};
		}

		// -- 7-byte signatures --

		if (this.checkString('BLENDER')) {
			return {
				ext: 'blend',
				mime: 'application/x-blender',
			};
		}

		if (this.checkString('!<arch>')) {
			await tokenizer.ignore(8);
			const string = await tokenizer.readToken(new StringType(13, 'ascii'));
			if (string === 'debian-binary') {
				return {
					ext: 'deb',
					mime: 'application/x-deb',
				};
			}

			return {
				ext: 'ar',
				mime: 'application/x-unix-archive',
			};
		}

		if (this.checkString('**ACE', {offset: 7})) {
			await tokenizer.peekBuffer(this.buffer, {length: 14, mayBeLess: true});
			if (this.checkString('**', {offset: 12})) {
				return {
					ext: 'ace',
					mime: 'application/x-ace-compressed',
				};
			}
		}

		// -- 8-byte signatures --

		if (this.check([0x89, 0x50, 0x4E, 0x47, 0x0D, 0x0A, 0x1A, 0x0A])) {
			// APNG format (https://wiki.mozilla.org/APNG_Specification)
			// 1. Find the first IDAT (image data) chunk (49 44 41 54)
			// 2. Check if there is an "acTL" chunk before the IDAT one (61 63 54 4C)

			// Offset calculated as follows:
			// - 8 bytes: PNG signature
			// - 4 (length) + 4 (chunk type) + 13 (chunk data) + 4 (CRC): IHDR chunk

			await tokenizer.ignore(8); // ignore PNG signature

			async function readChunkHeader() {
				return {
					length: await tokenizer.readToken(INT32_BE),
					type: await tokenizer.readToken(new StringType(4, 'binary')),
				};
			}

			do {
				const chunk = await readChunkHeader();
				if (chunk.length < 0) {
					return; // Invalid chunk length
				}

				switch (chunk.type) {
					case 'IDAT':
						return {
							ext: 'png',
							mime: 'image/png',
						};
					case 'acTL':
						return {
							ext: 'apng',
							mime: 'image/apng',
						};
					default:
						await tokenizer.ignore(chunk.length + 4); // Ignore chunk-data + CRC
				}
			} while (tokenizer.position + 8 < tokenizer.fileInfo.size);

			return {
				ext: 'png',
				mime: 'image/png',
			};
		}

		if (this.check([0x41, 0x52, 0x52, 0x4F, 0x57, 0x31, 0x00, 0x00])) {
			return {
				ext: 'arrow',
				mime: 'application/x-apache-arrow',
			};
		}

		if (this.check([0x67, 0x6C, 0x54, 0x46, 0x02, 0x00, 0x00, 0x00])) {
			return {
				ext: 'glb',
				mime: 'model/gltf-binary',
			};
		}

		// `mov` format variants
		if (
			this.check([0x66, 0x72, 0x65, 0x65], {offset: 4}) // `free`
			|| this.check([0x6D, 0x64, 0x61, 0x74], {offset: 4}) // `mdat` MJPEG
			|| this.check([0x6D, 0x6F, 0x6F, 0x76], {offset: 4}) // `moov`
			|| this.check([0x77, 0x69, 0x64, 0x65], {offset: 4}) // `wide`
		) {
			return {
				ext: 'mov',
				mime: 'video/quicktime',
			};
		}

		// -- 9-byte signatures --

		if (this.check([0x49, 0x49, 0x52, 0x4F, 0x08, 0x00, 0x00, 0x00, 0x18])) {
			return {
				ext: 'orf',
				mime: 'image/x-olympus-orf',
			};
		}

		if (this.checkString('gimp xcf ')) {
			return {
				ext: 'xcf',
				mime: 'image/x-xcf',
			};
		}

		// -- 12-byte signatures --

		if (this.check([0x49, 0x49, 0x55, 0x00, 0x18, 0x00, 0x00, 0x00, 0x88, 0xE7, 0x74, 0xD8])) {
			return {
				ext: 'rw2',
				mime: 'image/x-panasonic-rw2',
			};
		}

		// ASF_Header_Object first 80 bytes
		if (this.check([0x30, 0x26, 0xB2, 0x75, 0x8E, 0x66, 0xCF, 0x11, 0xA6, 0xD9])) {
			async function readHeader() {
				const guid = node_buffer.Buffer.alloc(16);
				await tokenizer.readBuffer(guid);
				return {
					id: guid,
					size: Number(await tokenizer.readToken(UINT64_LE)),
				};
			}

			await tokenizer.ignore(30);
			// Search for header should be in first 1KB of file.
			while (tokenizer.position + 24 < tokenizer.fileInfo.size) {
				const header = await readHeader();
				let payload = header.size - 24;
				if (_check(header.id, [0x91, 0x07, 0xDC, 0xB7, 0xB7, 0xA9, 0xCF, 0x11, 0x8E, 0xE6, 0x00, 0xC0, 0x0C, 0x20, 0x53, 0x65])) {
					// Sync on Stream-Properties-Object (B7DC0791-A9B7-11CF-8EE6-00C00C205365)
					const typeId = node_buffer.Buffer.alloc(16);
					payload -= await tokenizer.readBuffer(typeId);

					if (_check(typeId, [0x40, 0x9E, 0x69, 0xF8, 0x4D, 0x5B, 0xCF, 0x11, 0xA8, 0xFD, 0x00, 0x80, 0x5F, 0x5C, 0x44, 0x2B])) {
						// Found audio:
						return {
							ext: 'asf',
							mime: 'audio/x-ms-asf',
						};
					}

					if (_check(typeId, [0xC0, 0xEF, 0x19, 0xBC, 0x4D, 0x5B, 0xCF, 0x11, 0xA8, 0xFD, 0x00, 0x80, 0x5F, 0x5C, 0x44, 0x2B])) {
						// Found video:
						return {
							ext: 'asf',
							mime: 'video/x-ms-asf',
						};
					}

					break;
				}

				await tokenizer.ignore(payload);
			}

			// Default to ASF generic extension
			return {
				ext: 'asf',
				mime: 'application/vnd.ms-asf',
			};
		}

		if (this.check([0xAB, 0x4B, 0x54, 0x58, 0x20, 0x31, 0x31, 0xBB, 0x0D, 0x0A, 0x1A, 0x0A])) {
			return {
				ext: 'ktx',
				mime: 'image/ktx',
			};
		}

		if ((this.check([0x7E, 0x10, 0x04]) || this.check([0x7E, 0x18, 0x04])) && this.check([0x30, 0x4D, 0x49, 0x45], {offset: 4})) {
			return {
				ext: 'mie',
				mime: 'application/x-mie',
			};
		}

		if (this.check([0x27, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], {offset: 2})) {
			return {
				ext: 'shp',
				mime: 'application/x-esri-shape',
			};
		}

		if (this.check([0xFF, 0x4F, 0xFF, 0x51])) {
			return {
				ext: 'j2c',
				mime: 'image/j2c',
			};
		}

		if (this.check([0x00, 0x00, 0x00, 0x0C, 0x6A, 0x50, 0x20, 0x20, 0x0D, 0x0A, 0x87, 0x0A])) {
			// JPEG-2000 family

			await tokenizer.ignore(20);
			const type = await tokenizer.readToken(new StringType(4, 'ascii'));
			switch (type) {
				case 'jp2 ':
					return {
						ext: 'jp2',
						mime: 'image/jp2',
					};
				case 'jpx ':
					return {
						ext: 'jpx',
						mime: 'image/jpx',
					};
				case 'jpm ':
					return {
						ext: 'jpm',
						mime: 'image/jpm',
					};
				case 'mjp2':
					return {
						ext: 'mj2',
						mime: 'image/mj2',
					};
				default:
					return;
			}
		}

		if (
			this.check([0xFF, 0x0A])
			|| this.check([0x00, 0x00, 0x00, 0x0C, 0x4A, 0x58, 0x4C, 0x20, 0x0D, 0x0A, 0x87, 0x0A])
		) {
			return {
				ext: 'jxl',
				mime: 'image/jxl',
			};
		}

		if (this.check([0xFE, 0xFF])) { // UTF-16-BOM-LE
			if (this.check([0, 60, 0, 63, 0, 120, 0, 109, 0, 108], {offset: 2})) {
				return {
					ext: 'xml',
					mime: 'application/xml',
				};
			}

			return undefined; // Some unknown text based format
		}

		// -- Unsafe signatures --

		if (
			this.check([0x0, 0x0, 0x1, 0xBA])
			|| this.check([0x0, 0x0, 0x1, 0xB3])
		) {
			return {
				ext: 'mpg',
				mime: 'video/mpeg',
			};
		}

		if (this.check([0x00, 0x01, 0x00, 0x00, 0x00])) {
			return {
				ext: 'ttf',
				mime: 'font/ttf',
			};
		}

		if (this.check([0x00, 0x00, 0x01, 0x00])) {
			return {
				ext: 'ico',
				mime: 'image/x-icon',
			};
		}

		if (this.check([0x00, 0x00, 0x02, 0x00])) {
			return {
				ext: 'cur',
				mime: 'image/x-icon',
			};
		}

		if (this.check([0xD0, 0xCF, 0x11, 0xE0, 0xA1, 0xB1, 0x1A, 0xE1])) {
			// Detected Microsoft Compound File Binary File (MS-CFB) Format.
			return {
				ext: 'cfb',
				mime: 'application/x-cfb',
			};
		}

		// Increase sample size from 12 to 256.
		await tokenizer.peekBuffer(this.buffer, {length: Math.min(256, tokenizer.fileInfo.size), mayBeLess: true});

		if (this.check([0x61, 0x63, 0x73, 0x70], {offset: 36})) {
			return {
				ext: 'icc',
				mime: 'application/vnd.iccprofile',
			};
		}

		// -- 15-byte signatures --

		if (this.checkString('BEGIN:')) {
			if (this.checkString('VCARD', {offset: 6})) {
				return {
					ext: 'vcf',
					mime: 'text/vcard',
				};
			}

			if (this.checkString('VCALENDAR', {offset: 6})) {
				return {
					ext: 'ics',
					mime: 'text/calendar',
				};
			}
		}

		// `raf` is here just to keep all the raw image detectors together.
		if (this.checkString('FUJIFILMCCD-RAW')) {
			return {
				ext: 'raf',
				mime: 'image/x-fujifilm-raf',
			};
		}

		if (this.checkString('Extended Module:')) {
			return {
				ext: 'xm',
				mime: 'audio/x-xm',
			};
		}

		if (this.checkString('Creative Voice File')) {
			return {
				ext: 'voc',
				mime: 'audio/x-voc',
			};
		}

		if (this.check([0x04, 0x00, 0x00, 0x00]) && this.buffer.length >= 16) { // Rough & quick check Pickle/ASAR
			const jsonSize = this.buffer.readUInt32LE(12);
			if (jsonSize > 12 && this.buffer.length >= jsonSize + 16) {
				try {
					const header = this.buffer.slice(16, jsonSize + 16).toString();
					const json = JSON.parse(header);
					// Check if Pickle is ASAR
					if (json.files) { // Final check, assuring Pickle/ASAR format
						return {
							ext: 'asar',
							mime: 'application/x-asar',
						};
					}
				} catch {}
			}
		}

		if (this.check([0x06, 0x0E, 0x2B, 0x34, 0x02, 0x05, 0x01, 0x01, 0x0D, 0x01, 0x02, 0x01, 0x01, 0x02])) {
			return {
				ext: 'mxf',
				mime: 'application/mxf',
			};
		}

		if (this.checkString('SCRM', {offset: 44})) {
			return {
				ext: 's3m',
				mime: 'audio/x-s3m',
			};
		}

		// Raw MPEG-2 transport stream (188-byte packets)
		if (this.check([0x47]) && this.check([0x47], {offset: 188})) {
			return {
				ext: 'mts',
				mime: 'video/mp2t',
			};
		}

		// Blu-ray Disc Audio-Video (BDAV) MPEG-2 transport stream has 4-byte TP_extra_header before each 188-byte packet
		if (this.check([0x47], {offset: 4}) && this.check([0x47], {offset: 196})) {
			return {
				ext: 'mts',
				mime: 'video/mp2t',
			};
		}

		if (this.check([0x42, 0x4F, 0x4F, 0x4B, 0x4D, 0x4F, 0x42, 0x49], {offset: 60})) {
			return {
				ext: 'mobi',
				mime: 'application/x-mobipocket-ebook',
			};
		}

		if (this.check([0x44, 0x49, 0x43, 0x4D], {offset: 128})) {
			return {
				ext: 'dcm',
				mime: 'application/dicom',
			};
		}

		if (this.check([0x4C, 0x00, 0x00, 0x00, 0x01, 0x14, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46])) {
			return {
				ext: 'lnk',
				mime: 'application/x.ms.shortcut', // Invented by us
			};
		}

		if (this.check([0x62, 0x6F, 0x6F, 0x6B, 0x00, 0x00, 0x00, 0x00, 0x6D, 0x61, 0x72, 0x6B, 0x00, 0x00, 0x00, 0x00])) {
			return {
				ext: 'alias',
				mime: 'application/x.apple.alias', // Invented by us
			};
		}

		if (
			this.check([0x4C, 0x50], {offset: 34})
			&& (
				this.check([0x00, 0x00, 0x01], {offset: 8})
				|| this.check([0x01, 0x00, 0x02], {offset: 8})
				|| this.check([0x02, 0x00, 0x02], {offset: 8})
			)
		) {
			return {
				ext: 'eot',
				mime: 'application/vnd.ms-fontobject',
			};
		}

		if (this.check([0x06, 0x06, 0xED, 0xF5, 0xD8, 0x1D, 0x46, 0xE5, 0xBD, 0x31, 0xEF, 0xE7, 0xFE, 0x74, 0xB7, 0x1D])) {
			return {
				ext: 'indd',
				mime: 'application/x-indesign',
			};
		}

		// Increase sample size from 256 to 512
		await tokenizer.peekBuffer(this.buffer, {length: Math.min(512, tokenizer.fileInfo.size), mayBeLess: true});

		// Requires a buffer size of 512 bytes
		if (tarHeaderChecksumMatches(this.buffer)) {
			return {
				ext: 'tar',
				mime: 'application/x-tar',
			};
		}

		if (this.check([0xFF, 0xFE])) { // UTF-16-BOM-BE
			if (this.check([60, 0, 63, 0, 120, 0, 109, 0, 108, 0], {offset: 2})) {
				return {
					ext: 'xml',
					mime: 'application/xml',
				};
			}

			if (this.check([0xFF, 0x0E, 0x53, 0x00, 0x6B, 0x00, 0x65, 0x00, 0x74, 0x00, 0x63, 0x00, 0x68, 0x00, 0x55, 0x00, 0x70, 0x00, 0x20, 0x00, 0x4D, 0x00, 0x6F, 0x00, 0x64, 0x00, 0x65, 0x00, 0x6C, 0x00], {offset: 2})) {
				return {
					ext: 'skp',
					mime: 'application/vnd.sketchup.skp',
				};
			}

			return undefined; // Some text based format
		}

		if (this.checkString('-----BEGIN PGP MESSAGE-----')) {
			return {
				ext: 'pgp',
				mime: 'application/pgp-encrypted',
			};
		}

		// Check MPEG 1 or 2 Layer 3 header, or 'layer 0' for ADTS (MPEG sync-word 0xFFE)
		if (this.buffer.length >= 2 && this.check([0xFF, 0xE0], {offset: 0, mask: [0xFF, 0xE0]})) {
			if (this.check([0x10], {offset: 1, mask: [0x16]})) {
				// Check for (ADTS) MPEG-2
				if (this.check([0x08], {offset: 1, mask: [0x08]})) {
					return {
						ext: 'aac',
						mime: 'audio/aac',
					};
				}

				// Must be (ADTS) MPEG-4
				return {
					ext: 'aac',
					mime: 'audio/aac',
				};
			}

			// MPEG 1 or 2 Layer 3 header
			// Check for MPEG layer 3
			if (this.check([0x02], {offset: 1, mask: [0x06]})) {
				return {
					ext: 'mp3',
					mime: 'audio/mpeg',
				};
			}

			// Check for MPEG layer 2
			if (this.check([0x04], {offset: 1, mask: [0x06]})) {
				return {
					ext: 'mp2',
					mime: 'audio/mpeg',
				};
			}

			// Check for MPEG layer 1
			if (this.check([0x06], {offset: 1, mask: [0x06]})) {
				return {
					ext: 'mp1',
					mime: 'audio/mpeg',
				};
			}
		}
	}

	async readTiffTag(bigEndian) {
		const tagId = await this.tokenizer.readToken(bigEndian ? UINT16_BE : UINT16_LE);
		this.tokenizer.ignore(10);
		switch (tagId) {
			case 50_341:
				return {
					ext: 'arw',
					mime: 'image/x-sony-arw',
				};
			case 50_706:
				return {
					ext: 'dng',
					mime: 'image/x-adobe-dng',
				};
		}
	}

	async readTiffIFD(bigEndian) {
		const numberOfTags = await this.tokenizer.readToken(bigEndian ? UINT16_BE : UINT16_LE);
		for (let n = 0; n < numberOfTags; ++n) {
			const fileType = await this.readTiffTag(bigEndian);
			if (fileType) {
				return fileType;
			}
		}
	}

	async readTiffHeader(bigEndian) {
		const version = (bigEndian ? UINT16_BE : UINT16_LE).get(this.buffer, 2);
		const ifdOffset = (bigEndian ? UINT32_BE : UINT32_LE).get(this.buffer, 4);

		if (version === 42) {
			// TIFF file header
			if (ifdOffset >= 6) {
				if (this.checkString('CR', {offset: 8})) {
					return {
						ext: 'cr2',
						mime: 'image/x-canon-cr2',
					};
				}

				if (ifdOffset >= 8 && (this.check([0x1C, 0x00, 0xFE, 0x00], {offset: 8}) || this.check([0x1F, 0x00, 0x0B, 0x00], {offset: 8}))) {
					return {
						ext: 'nef',
						mime: 'image/x-nikon-nef',
					};
				}
			}

			await this.tokenizer.ignore(ifdOffset);
			const fileType = await this.readTiffIFD(bigEndian);
			return fileType ?? {
				ext: 'tif',
				mime: 'image/tiff',
			};
		}

		if (version === 43) {	// Big TIFF file header
			return {
				ext: 'tif',
				mime: 'image/tiff',
			};
		}
	}
}

new Set(extensions);
new Set(mimeTypes);

const imageExtensions = new Set([
	'jpg',
	'png',
	'gif',
	'webp',
	'flif',
	'cr2',
	'tif',
	'bmp',
	'jxr',
	'psd',
	'ico',
	'bpg',
	'jp2',
	'jpm',
	'jpx',
	'heic',
	'cur',
	'dcm',
	'avif',
]);

async function imageType(input) {
	const result = await fileTypeFromBuffer(input);
	return imageExtensions.has(result?.ext) && result;
}

var IMAGE_EXT_LIST = [
    ".png",
    ".jpg",
    ".jpeg",
    ".bmp",
    ".gif",
    ".svg",
    ".tiff",
    ".webp",
    ".avif",
];
function isAnImage(ext) {
    return IMAGE_EXT_LIST.includes(ext.toLowerCase());
}
function isAssetTypeAnImage(path) {
    return isAnImage(path$4.extname(path));
}
function getOS() {
    var appVersion = navigator.appVersion;
    if (appVersion.indexOf("Win") !== -1) {
        return "Windows";
    }
    else if (appVersion.indexOf("Mac") !== -1) {
        return "MacOS";
    }
    else if (appVersion.indexOf("X11") !== -1) {
        return "Linux";
    }
    else {
        return "Unknown OS";
    }
}
function streamToString(stream) {
    var _a, stream_1, stream_1_1;
    var _b, e_1, _c, _d;
    return __awaiter(this, void 0, void 0, function () {
        var chunks, chunk, e_1_1;
        return __generator(this, function (_e) {
            switch (_e.label) {
                case 0:
                    chunks = [];
                    _e.label = 1;
                case 1:
                    _e.trys.push([1, 6, 7, 12]);
                    _a = true, stream_1 = __asyncValues(stream);
                    _e.label = 2;
                case 2: return [4 /*yield*/, stream_1.next()];
                case 3:
                    if (!(stream_1_1 = _e.sent(), _b = stream_1_1.done, !_b)) return [3 /*break*/, 5];
                    _d = stream_1_1.value;
                    _a = false;
                    try {
                        chunk = _d;
                        chunks.push(Buffer.from(chunk));
                    }
                    finally {
                        _a = true;
                    }
                    _e.label = 4;
                case 4: return [3 /*break*/, 2];
                case 5: return [3 /*break*/, 12];
                case 6:
                    e_1_1 = _e.sent();
                    e_1 = { error: e_1_1 };
                    return [3 /*break*/, 12];
                case 7:
                    _e.trys.push([7, , 10, 11]);
                    if (!(!_a && !_b && (_c = stream_1.return))) return [3 /*break*/, 9];
                    return [4 /*yield*/, _c.call(stream_1)];
                case 8:
                    _e.sent();
                    _e.label = 9;
                case 9: return [3 /*break*/, 11];
                case 10:
                    if (e_1) throw e_1.error;
                    return [7 /*endfinally*/];
                case 11: return [7 /*endfinally*/];
                case 12: return [2 /*return*/, Buffer.concat(chunks).toString("utf-8")];
            }
        });
    });
}
function getUrlAsset(url) {
    return (url = url.substr(1 + url.lastIndexOf("/")).split("?")[0]).split("#")[0];
}
function getLastImage(list) {
    var reversedList = list.reverse();
    var lastImage;
    reversedList.forEach(function (item) {
        if (item && item.startsWith("http")) {
            lastImage = item;
            return item;
        }
    });
    return lastImage;
}
function arrayToObject(arr, key) {
    var obj = {};
    arr.forEach(function (element) {
        obj[element[key]] = element;
    });
    return obj;
}
function fileToBase64(file) {
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            return [2 /*return*/, new Promise(function (resolve, reject) {
                    var reader = new FileReader();
                    reader.onload = function () {
                        var base64String = reader.result;
                        var base64 = base64String.split(",")[1]; // 去除前缀 "data:xxx;base64,"
                        resolve(base64);
                    };
                    reader.onerror = function () {
                        reject(new Error("无法读取文件"));
                    };
                    reader.readAsDataURL(file);
                })];
        });
    });
}
function getCurrentTimestamp() {
    var now = new Date();
    var year = now.getFullYear();
    var month = (now.getMonth() + 1).toString().padStart(2, '0');
    var day = now.getDate().toString().padStart(2, '0');
    var hours = now.getHours().toString().padStart(2, '0');
    var minutes = now.getMinutes().toString().padStart(2, '0');
    var seconds = now.getSeconds().toString().padStart(2, '0');
    var milliseconds = now.getMilliseconds().toString().padStart(3, '0');
    var formattedTimestamp = "".concat(year).concat(month).concat(day).concat(hours).concat(minutes).concat(seconds).concat(milliseconds);
    return formattedTimestamp;
}

var defaults = {};

var hasRequiredDefaults;

function requireDefaults () {
	if (hasRequiredDefaults) return defaults;
	hasRequiredDefaults = 1;
	// Generated by CoffeeScript 1.12.7
	(function() {
	  defaults.defaults = {
	    "0.1": {
	      explicitCharkey: false,
	      trim: true,
	      normalize: true,
	      normalizeTags: false,
	      attrkey: "@",
	      charkey: "#",
	      explicitArray: false,
	      ignoreAttrs: false,
	      mergeAttrs: false,
	      explicitRoot: false,
	      validator: null,
	      xmlns: false,
	      explicitChildren: false,
	      childkey: '@@',
	      charsAsChildren: false,
	      includeWhiteChars: false,
	      async: false,
	      strict: true,
	      attrNameProcessors: null,
	      attrValueProcessors: null,
	      tagNameProcessors: null,
	      valueProcessors: null,
	      emptyTag: ''
	    },
	    "0.2": {
	      explicitCharkey: false,
	      trim: false,
	      normalize: false,
	      normalizeTags: false,
	      attrkey: "$",
	      charkey: "_",
	      explicitArray: true,
	      ignoreAttrs: false,
	      mergeAttrs: false,
	      explicitRoot: true,
	      validator: null,
	      xmlns: false,
	      explicitChildren: false,
	      preserveChildrenOrder: false,
	      childkey: '$$',
	      charsAsChildren: false,
	      includeWhiteChars: false,
	      async: false,
	      strict: true,
	      attrNameProcessors: null,
	      attrValueProcessors: null,
	      tagNameProcessors: null,
	      valueProcessors: null,
	      rootName: 'root',
	      xmldec: {
	        'version': '1.0',
	        'encoding': 'UTF-8',
	        'standalone': true
	      },
	      doctype: null,
	      renderOpts: {
	        'pretty': true,
	        'indent': '  ',
	        'newline': '\n'
	      },
	      headless: false,
	      chunkSize: 10000,
	      emptyTag: '',
	      cdata: false
	    }
	  };

	}).call(commonjsGlobal);
	return defaults;
}

var builder = {};

var lib = {};

var Utility = {};

var hasRequiredUtility;

function requireUtility () {
	if (hasRequiredUtility) return Utility;
	hasRequiredUtility = 1;
	// Generated by CoffeeScript 1.12.7
	(function() {
	  var assign, getValue, isArray, isEmpty, isFunction, isObject, isPlainObject,
	    slice = [].slice,
	    hasProp = {}.hasOwnProperty;

	  assign = function() {
	    var i, key, len, source, sources, target;
	    target = arguments[0], sources = 2 <= arguments.length ? slice.call(arguments, 1) : [];
	    if (isFunction(Object.assign)) {
	      Object.assign.apply(null, arguments);
	    } else {
	      for (i = 0, len = sources.length; i < len; i++) {
	        source = sources[i];
	        if (source != null) {
	          for (key in source) {
	            if (!hasProp.call(source, key)) continue;
	            target[key] = source[key];
	          }
	        }
	      }
	    }
	    return target;
	  };

	  isFunction = function(val) {
	    return !!val && Object.prototype.toString.call(val) === '[object Function]';
	  };

	  isObject = function(val) {
	    var ref;
	    return !!val && ((ref = typeof val) === 'function' || ref === 'object');
	  };

	  isArray = function(val) {
	    if (isFunction(Array.isArray)) {
	      return Array.isArray(val);
	    } else {
	      return Object.prototype.toString.call(val) === '[object Array]';
	    }
	  };

	  isEmpty = function(val) {
	    var key;
	    if (isArray(val)) {
	      return !val.length;
	    } else {
	      for (key in val) {
	        if (!hasProp.call(val, key)) continue;
	        return false;
	      }
	      return true;
	    }
	  };

	  isPlainObject = function(val) {
	    var ctor, proto;
	    return isObject(val) && (proto = Object.getPrototypeOf(val)) && (ctor = proto.constructor) && (typeof ctor === 'function') && (ctor instanceof ctor) && (Function.prototype.toString.call(ctor) === Function.prototype.toString.call(Object));
	  };

	  getValue = function(obj) {
	    if (isFunction(obj.valueOf)) {
	      return obj.valueOf();
	    } else {
	      return obj;
	    }
	  };

	  Utility.assign = assign;

	  Utility.isFunction = isFunction;

	  Utility.isObject = isObject;

	  Utility.isArray = isArray;

	  Utility.isEmpty = isEmpty;

	  Utility.isPlainObject = isPlainObject;

	  Utility.getValue = getValue;

	}).call(commonjsGlobal);
	return Utility;
}

var XMLDOMImplementation = {exports: {}};

var hasRequiredXMLDOMImplementation;

function requireXMLDOMImplementation () {
	if (hasRequiredXMLDOMImplementation) return XMLDOMImplementation.exports;
	hasRequiredXMLDOMImplementation = 1;
	// Generated by CoffeeScript 1.12.7
	(function() {

	  XMLDOMImplementation.exports = (function() {
	    function XMLDOMImplementation() {}

	    XMLDOMImplementation.prototype.hasFeature = function(feature, version) {
	      return true;
	    };

	    XMLDOMImplementation.prototype.createDocumentType = function(qualifiedName, publicId, systemId) {
	      throw new Error("This DOM method is not implemented.");
	    };

	    XMLDOMImplementation.prototype.createDocument = function(namespaceURI, qualifiedName, doctype) {
	      throw new Error("This DOM method is not implemented.");
	    };

	    XMLDOMImplementation.prototype.createHTMLDocument = function(title) {
	      throw new Error("This DOM method is not implemented.");
	    };

	    XMLDOMImplementation.prototype.getFeature = function(feature, version) {
	      throw new Error("This DOM method is not implemented.");
	    };

	    return XMLDOMImplementation;

	  })();

	}).call(commonjsGlobal);
	return XMLDOMImplementation.exports;
}

var XMLDocument = {exports: {}};

var XMLDOMConfiguration = {exports: {}};

var XMLDOMErrorHandler = {exports: {}};

var hasRequiredXMLDOMErrorHandler;

function requireXMLDOMErrorHandler () {
	if (hasRequiredXMLDOMErrorHandler) return XMLDOMErrorHandler.exports;
	hasRequiredXMLDOMErrorHandler = 1;
	// Generated by CoffeeScript 1.12.7
	(function() {

	  XMLDOMErrorHandler.exports = (function() {
	    function XMLDOMErrorHandler() {}

	    XMLDOMErrorHandler.prototype.handleError = function(error) {
	      throw new Error(error);
	    };

	    return XMLDOMErrorHandler;

	  })();

	}).call(commonjsGlobal);
	return XMLDOMErrorHandler.exports;
}

var XMLDOMStringList = {exports: {}};

var hasRequiredXMLDOMStringList;

function requireXMLDOMStringList () {
	if (hasRequiredXMLDOMStringList) return XMLDOMStringList.exports;
	hasRequiredXMLDOMStringList = 1;
	// Generated by CoffeeScript 1.12.7
	(function() {

	  XMLDOMStringList.exports = (function() {
	    function XMLDOMStringList(arr) {
	      this.arr = arr || [];
	    }

	    Object.defineProperty(XMLDOMStringList.prototype, 'length', {
	      get: function() {
	        return this.arr.length;
	      }
	    });

	    XMLDOMStringList.prototype.item = function(index) {
	      return this.arr[index] || null;
	    };

	    XMLDOMStringList.prototype.contains = function(str) {
	      return this.arr.indexOf(str) !== -1;
	    };

	    return XMLDOMStringList;

	  })();

	}).call(commonjsGlobal);
	return XMLDOMStringList.exports;
}

var hasRequiredXMLDOMConfiguration;

function requireXMLDOMConfiguration () {
	if (hasRequiredXMLDOMConfiguration) return XMLDOMConfiguration.exports;
	hasRequiredXMLDOMConfiguration = 1;
	// Generated by CoffeeScript 1.12.7
	(function() {
	  var XMLDOMErrorHandler, XMLDOMStringList;

	  XMLDOMErrorHandler = requireXMLDOMErrorHandler();

	  XMLDOMStringList = requireXMLDOMStringList();

	  XMLDOMConfiguration.exports = (function() {
	    function XMLDOMConfiguration() {
	      this.defaultParams = {
	        "canonical-form": false,
	        "cdata-sections": false,
	        "comments": false,
	        "datatype-normalization": false,
	        "element-content-whitespace": true,
	        "entities": true,
	        "error-handler": new XMLDOMErrorHandler(),
	        "infoset": true,
	        "validate-if-schema": false,
	        "namespaces": true,
	        "namespace-declarations": true,
	        "normalize-characters": false,
	        "schema-location": '',
	        "schema-type": '',
	        "split-cdata-sections": true,
	        "validate": false,
	        "well-formed": true
	      };
	      this.params = Object.create(this.defaultParams);
	    }

	    Object.defineProperty(XMLDOMConfiguration.prototype, 'parameterNames', {
	      get: function() {
	        return new XMLDOMStringList(Object.keys(this.defaultParams));
	      }
	    });

	    XMLDOMConfiguration.prototype.getParameter = function(name) {
	      if (this.params.hasOwnProperty(name)) {
	        return this.params[name];
	      } else {
	        return null;
	      }
	    };

	    XMLDOMConfiguration.prototype.canSetParameter = function(name, value) {
	      return true;
	    };

	    XMLDOMConfiguration.prototype.setParameter = function(name, value) {
	      if (value != null) {
	        return this.params[name] = value;
	      } else {
	        return delete this.params[name];
	      }
	    };

	    return XMLDOMConfiguration;

	  })();

	}).call(commonjsGlobal);
	return XMLDOMConfiguration.exports;
}

var XMLNode = {exports: {}};

var XMLElement = {exports: {}};

var NodeType = {exports: {}};

var hasRequiredNodeType;

function requireNodeType () {
	if (hasRequiredNodeType) return NodeType.exports;
	hasRequiredNodeType = 1;
	// Generated by CoffeeScript 1.12.7
	(function() {
	  NodeType.exports = {
	    Element: 1,
	    Attribute: 2,
	    Text: 3,
	    CData: 4,
	    EntityReference: 5,
	    EntityDeclaration: 6,
	    ProcessingInstruction: 7,
	    Comment: 8,
	    Document: 9,
	    DocType: 10,
	    DocumentFragment: 11,
	    NotationDeclaration: 12,
	    Declaration: 201,
	    Raw: 202,
	    AttributeDeclaration: 203,
	    ElementDeclaration: 204,
	    Dummy: 205
	  };

	}).call(commonjsGlobal);
	return NodeType.exports;
}

var XMLAttribute = {exports: {}};

var hasRequiredXMLAttribute;

function requireXMLAttribute () {
	if (hasRequiredXMLAttribute) return XMLAttribute.exports;
	hasRequiredXMLAttribute = 1;
	// Generated by CoffeeScript 1.12.7
	(function() {
	  var NodeType;

	  NodeType = requireNodeType();

	  requireXMLNode();

	  XMLAttribute.exports = (function() {
	    function XMLAttribute(parent, name, value) {
	      this.parent = parent;
	      if (this.parent) {
	        this.options = this.parent.options;
	        this.stringify = this.parent.stringify;
	      }
	      if (name == null) {
	        throw new Error("Missing attribute name. " + this.debugInfo(name));
	      }
	      this.name = this.stringify.name(name);
	      this.value = this.stringify.attValue(value);
	      this.type = NodeType.Attribute;
	      this.isId = false;
	      this.schemaTypeInfo = null;
	    }

	    Object.defineProperty(XMLAttribute.prototype, 'nodeType', {
	      get: function() {
	        return this.type;
	      }
	    });

	    Object.defineProperty(XMLAttribute.prototype, 'ownerElement', {
	      get: function() {
	        return this.parent;
	      }
	    });

	    Object.defineProperty(XMLAttribute.prototype, 'textContent', {
	      get: function() {
	        return this.value;
	      },
	      set: function(value) {
	        return this.value = value || '';
	      }
	    });

	    Object.defineProperty(XMLAttribute.prototype, 'namespaceURI', {
	      get: function() {
	        return '';
	      }
	    });

	    Object.defineProperty(XMLAttribute.prototype, 'prefix', {
	      get: function() {
	        return '';
	      }
	    });

	    Object.defineProperty(XMLAttribute.prototype, 'localName', {
	      get: function() {
	        return this.name;
	      }
	    });

	    Object.defineProperty(XMLAttribute.prototype, 'specified', {
	      get: function() {
	        return true;
	      }
	    });

	    XMLAttribute.prototype.clone = function() {
	      return Object.create(this);
	    };

	    XMLAttribute.prototype.toString = function(options) {
	      return this.options.writer.attribute(this, this.options.writer.filterOptions(options));
	    };

	    XMLAttribute.prototype.debugInfo = function(name) {
	      name = name || this.name;
	      if (name == null) {
	        return "parent: <" + this.parent.name + ">";
	      } else {
	        return "attribute: {" + name + "}, parent: <" + this.parent.name + ">";
	      }
	    };

	    XMLAttribute.prototype.isEqualNode = function(node) {
	      if (node.namespaceURI !== this.namespaceURI) {
	        return false;
	      }
	      if (node.prefix !== this.prefix) {
	        return false;
	      }
	      if (node.localName !== this.localName) {
	        return false;
	      }
	      if (node.value !== this.value) {
	        return false;
	      }
	      return true;
	    };

	    return XMLAttribute;

	  })();

	}).call(commonjsGlobal);
	return XMLAttribute.exports;
}

var XMLNamedNodeMap = {exports: {}};

var hasRequiredXMLNamedNodeMap;

function requireXMLNamedNodeMap () {
	if (hasRequiredXMLNamedNodeMap) return XMLNamedNodeMap.exports;
	hasRequiredXMLNamedNodeMap = 1;
	// Generated by CoffeeScript 1.12.7
	(function() {

	  XMLNamedNodeMap.exports = (function() {
	    function XMLNamedNodeMap(nodes) {
	      this.nodes = nodes;
	    }

	    Object.defineProperty(XMLNamedNodeMap.prototype, 'length', {
	      get: function() {
	        return Object.keys(this.nodes).length || 0;
	      }
	    });

	    XMLNamedNodeMap.prototype.clone = function() {
	      return this.nodes = null;
	    };

	    XMLNamedNodeMap.prototype.getNamedItem = function(name) {
	      return this.nodes[name];
	    };

	    XMLNamedNodeMap.prototype.setNamedItem = function(node) {
	      var oldNode;
	      oldNode = this.nodes[node.nodeName];
	      this.nodes[node.nodeName] = node;
	      return oldNode || null;
	    };

	    XMLNamedNodeMap.prototype.removeNamedItem = function(name) {
	      var oldNode;
	      oldNode = this.nodes[name];
	      delete this.nodes[name];
	      return oldNode || null;
	    };

	    XMLNamedNodeMap.prototype.item = function(index) {
	      return this.nodes[Object.keys(this.nodes)[index]] || null;
	    };

	    XMLNamedNodeMap.prototype.getNamedItemNS = function(namespaceURI, localName) {
	      throw new Error("This DOM method is not implemented.");
	    };

	    XMLNamedNodeMap.prototype.setNamedItemNS = function(node) {
	      throw new Error("This DOM method is not implemented.");
	    };

	    XMLNamedNodeMap.prototype.removeNamedItemNS = function(namespaceURI, localName) {
	      throw new Error("This DOM method is not implemented.");
	    };

	    return XMLNamedNodeMap;

	  })();

	}).call(commonjsGlobal);
	return XMLNamedNodeMap.exports;
}

var hasRequiredXMLElement;

function requireXMLElement () {
	if (hasRequiredXMLElement) return XMLElement.exports;
	hasRequiredXMLElement = 1;
	// Generated by CoffeeScript 1.12.7
	(function() {
	  var NodeType, XMLAttribute, XMLNamedNodeMap, XMLNode, getValue, isFunction, isObject, ref,
	    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	    hasProp = {}.hasOwnProperty;

	  ref = requireUtility(), isObject = ref.isObject, isFunction = ref.isFunction, getValue = ref.getValue;

	  XMLNode = requireXMLNode();

	  NodeType = requireNodeType();

	  XMLAttribute = requireXMLAttribute();

	  XMLNamedNodeMap = requireXMLNamedNodeMap();

	  XMLElement.exports = (function(superClass) {
	    extend(XMLElement, superClass);

	    function XMLElement(parent, name, attributes) {
	      var child, j, len, ref1;
	      XMLElement.__super__.constructor.call(this, parent);
	      if (name == null) {
	        throw new Error("Missing element name. " + this.debugInfo());
	      }
	      this.name = this.stringify.name(name);
	      this.type = NodeType.Element;
	      this.attribs = {};
	      this.schemaTypeInfo = null;
	      if (attributes != null) {
	        this.attribute(attributes);
	      }
	      if (parent.type === NodeType.Document) {
	        this.isRoot = true;
	        this.documentObject = parent;
	        parent.rootObject = this;
	        if (parent.children) {
	          ref1 = parent.children;
	          for (j = 0, len = ref1.length; j < len; j++) {
	            child = ref1[j];
	            if (child.type === NodeType.DocType) {
	              child.name = this.name;
	              break;
	            }
	          }
	        }
	      }
	    }

	    Object.defineProperty(XMLElement.prototype, 'tagName', {
	      get: function() {
	        return this.name;
	      }
	    });

	    Object.defineProperty(XMLElement.prototype, 'namespaceURI', {
	      get: function() {
	        return '';
	      }
	    });

	    Object.defineProperty(XMLElement.prototype, 'prefix', {
	      get: function() {
	        return '';
	      }
	    });

	    Object.defineProperty(XMLElement.prototype, 'localName', {
	      get: function() {
	        return this.name;
	      }
	    });

	    Object.defineProperty(XMLElement.prototype, 'id', {
	      get: function() {
	        throw new Error("This DOM method is not implemented." + this.debugInfo());
	      }
	    });

	    Object.defineProperty(XMLElement.prototype, 'className', {
	      get: function() {
	        throw new Error("This DOM method is not implemented." + this.debugInfo());
	      }
	    });

	    Object.defineProperty(XMLElement.prototype, 'classList', {
	      get: function() {
	        throw new Error("This DOM method is not implemented." + this.debugInfo());
	      }
	    });

	    Object.defineProperty(XMLElement.prototype, 'attributes', {
	      get: function() {
	        if (!this.attributeMap || !this.attributeMap.nodes) {
	          this.attributeMap = new XMLNamedNodeMap(this.attribs);
	        }
	        return this.attributeMap;
	      }
	    });

	    XMLElement.prototype.clone = function() {
	      var att, attName, clonedSelf, ref1;
	      clonedSelf = Object.create(this);
	      if (clonedSelf.isRoot) {
	        clonedSelf.documentObject = null;
	      }
	      clonedSelf.attribs = {};
	      ref1 = this.attribs;
	      for (attName in ref1) {
	        if (!hasProp.call(ref1, attName)) continue;
	        att = ref1[attName];
	        clonedSelf.attribs[attName] = att.clone();
	      }
	      clonedSelf.children = [];
	      this.children.forEach(function(child) {
	        var clonedChild;
	        clonedChild = child.clone();
	        clonedChild.parent = clonedSelf;
	        return clonedSelf.children.push(clonedChild);
	      });
	      return clonedSelf;
	    };

	    XMLElement.prototype.attribute = function(name, value) {
	      var attName, attValue;
	      if (name != null) {
	        name = getValue(name);
	      }
	      if (isObject(name)) {
	        for (attName in name) {
	          if (!hasProp.call(name, attName)) continue;
	          attValue = name[attName];
	          this.attribute(attName, attValue);
	        }
	      } else {
	        if (isFunction(value)) {
	          value = value.apply();
	        }
	        if (this.options.keepNullAttributes && (value == null)) {
	          this.attribs[name] = new XMLAttribute(this, name, "");
	        } else if (value != null) {
	          this.attribs[name] = new XMLAttribute(this, name, value);
	        }
	      }
	      return this;
	    };

	    XMLElement.prototype.removeAttribute = function(name) {
	      var attName, j, len;
	      if (name == null) {
	        throw new Error("Missing attribute name. " + this.debugInfo());
	      }
	      name = getValue(name);
	      if (Array.isArray(name)) {
	        for (j = 0, len = name.length; j < len; j++) {
	          attName = name[j];
	          delete this.attribs[attName];
	        }
	      } else {
	        delete this.attribs[name];
	      }
	      return this;
	    };

	    XMLElement.prototype.toString = function(options) {
	      return this.options.writer.element(this, this.options.writer.filterOptions(options));
	    };

	    XMLElement.prototype.att = function(name, value) {
	      return this.attribute(name, value);
	    };

	    XMLElement.prototype.a = function(name, value) {
	      return this.attribute(name, value);
	    };

	    XMLElement.prototype.getAttribute = function(name) {
	      if (this.attribs.hasOwnProperty(name)) {
	        return this.attribs[name].value;
	      } else {
	        return null;
	      }
	    };

	    XMLElement.prototype.setAttribute = function(name, value) {
	      throw new Error("This DOM method is not implemented." + this.debugInfo());
	    };

	    XMLElement.prototype.getAttributeNode = function(name) {
	      if (this.attribs.hasOwnProperty(name)) {
	        return this.attribs[name];
	      } else {
	        return null;
	      }
	    };

	    XMLElement.prototype.setAttributeNode = function(newAttr) {
	      throw new Error("This DOM method is not implemented." + this.debugInfo());
	    };

	    XMLElement.prototype.removeAttributeNode = function(oldAttr) {
	      throw new Error("This DOM method is not implemented." + this.debugInfo());
	    };

	    XMLElement.prototype.getElementsByTagName = function(name) {
	      throw new Error("This DOM method is not implemented." + this.debugInfo());
	    };

	    XMLElement.prototype.getAttributeNS = function(namespaceURI, localName) {
	      throw new Error("This DOM method is not implemented." + this.debugInfo());
	    };

	    XMLElement.prototype.setAttributeNS = function(namespaceURI, qualifiedName, value) {
	      throw new Error("This DOM method is not implemented." + this.debugInfo());
	    };

	    XMLElement.prototype.removeAttributeNS = function(namespaceURI, localName) {
	      throw new Error("This DOM method is not implemented." + this.debugInfo());
	    };

	    XMLElement.prototype.getAttributeNodeNS = function(namespaceURI, localName) {
	      throw new Error("This DOM method is not implemented." + this.debugInfo());
	    };

	    XMLElement.prototype.setAttributeNodeNS = function(newAttr) {
	      throw new Error("This DOM method is not implemented." + this.debugInfo());
	    };

	    XMLElement.prototype.getElementsByTagNameNS = function(namespaceURI, localName) {
	      throw new Error("This DOM method is not implemented." + this.debugInfo());
	    };

	    XMLElement.prototype.hasAttribute = function(name) {
	      return this.attribs.hasOwnProperty(name);
	    };

	    XMLElement.prototype.hasAttributeNS = function(namespaceURI, localName) {
	      throw new Error("This DOM method is not implemented." + this.debugInfo());
	    };

	    XMLElement.prototype.setIdAttribute = function(name, isId) {
	      if (this.attribs.hasOwnProperty(name)) {
	        return this.attribs[name].isId;
	      } else {
	        return isId;
	      }
	    };

	    XMLElement.prototype.setIdAttributeNS = function(namespaceURI, localName, isId) {
	      throw new Error("This DOM method is not implemented." + this.debugInfo());
	    };

	    XMLElement.prototype.setIdAttributeNode = function(idAttr, isId) {
	      throw new Error("This DOM method is not implemented." + this.debugInfo());
	    };

	    XMLElement.prototype.getElementsByTagName = function(tagname) {
	      throw new Error("This DOM method is not implemented." + this.debugInfo());
	    };

	    XMLElement.prototype.getElementsByTagNameNS = function(namespaceURI, localName) {
	      throw new Error("This DOM method is not implemented." + this.debugInfo());
	    };

	    XMLElement.prototype.getElementsByClassName = function(classNames) {
	      throw new Error("This DOM method is not implemented." + this.debugInfo());
	    };

	    XMLElement.prototype.isEqualNode = function(node) {
	      var i, j, ref1;
	      if (!XMLElement.__super__.isEqualNode.apply(this, arguments).isEqualNode(node)) {
	        return false;
	      }
	      if (node.namespaceURI !== this.namespaceURI) {
	        return false;
	      }
	      if (node.prefix !== this.prefix) {
	        return false;
	      }
	      if (node.localName !== this.localName) {
	        return false;
	      }
	      if (node.attribs.length !== this.attribs.length) {
	        return false;
	      }
	      for (i = j = 0, ref1 = this.attribs.length - 1; 0 <= ref1 ? j <= ref1 : j >= ref1; i = 0 <= ref1 ? ++j : --j) {
	        if (!this.attribs[i].isEqualNode(node.attribs[i])) {
	          return false;
	        }
	      }
	      return true;
	    };

	    return XMLElement;

	  })(XMLNode);

	}).call(commonjsGlobal);
	return XMLElement.exports;
}

var XMLCData = {exports: {}};

var XMLCharacterData = {exports: {}};

var hasRequiredXMLCharacterData;

function requireXMLCharacterData () {
	if (hasRequiredXMLCharacterData) return XMLCharacterData.exports;
	hasRequiredXMLCharacterData = 1;
	// Generated by CoffeeScript 1.12.7
	(function() {
	  var XMLNode,
	    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	    hasProp = {}.hasOwnProperty;

	  XMLNode = requireXMLNode();

	  XMLCharacterData.exports = (function(superClass) {
	    extend(XMLCharacterData, superClass);

	    function XMLCharacterData(parent) {
	      XMLCharacterData.__super__.constructor.call(this, parent);
	      this.value = '';
	    }

	    Object.defineProperty(XMLCharacterData.prototype, 'data', {
	      get: function() {
	        return this.value;
	      },
	      set: function(value) {
	        return this.value = value || '';
	      }
	    });

	    Object.defineProperty(XMLCharacterData.prototype, 'length', {
	      get: function() {
	        return this.value.length;
	      }
	    });

	    Object.defineProperty(XMLCharacterData.prototype, 'textContent', {
	      get: function() {
	        return this.value;
	      },
	      set: function(value) {
	        return this.value = value || '';
	      }
	    });

	    XMLCharacterData.prototype.clone = function() {
	      return Object.create(this);
	    };

	    XMLCharacterData.prototype.substringData = function(offset, count) {
	      throw new Error("This DOM method is not implemented." + this.debugInfo());
	    };

	    XMLCharacterData.prototype.appendData = function(arg) {
	      throw new Error("This DOM method is not implemented." + this.debugInfo());
	    };

	    XMLCharacterData.prototype.insertData = function(offset, arg) {
	      throw new Error("This DOM method is not implemented." + this.debugInfo());
	    };

	    XMLCharacterData.prototype.deleteData = function(offset, count) {
	      throw new Error("This DOM method is not implemented." + this.debugInfo());
	    };

	    XMLCharacterData.prototype.replaceData = function(offset, count, arg) {
	      throw new Error("This DOM method is not implemented." + this.debugInfo());
	    };

	    XMLCharacterData.prototype.isEqualNode = function(node) {
	      if (!XMLCharacterData.__super__.isEqualNode.apply(this, arguments).isEqualNode(node)) {
	        return false;
	      }
	      if (node.data !== this.data) {
	        return false;
	      }
	      return true;
	    };

	    return XMLCharacterData;

	  })(XMLNode);

	}).call(commonjsGlobal);
	return XMLCharacterData.exports;
}

var hasRequiredXMLCData;

function requireXMLCData () {
	if (hasRequiredXMLCData) return XMLCData.exports;
	hasRequiredXMLCData = 1;
	// Generated by CoffeeScript 1.12.7
	(function() {
	  var NodeType, XMLCharacterData,
	    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	    hasProp = {}.hasOwnProperty;

	  NodeType = requireNodeType();

	  XMLCharacterData = requireXMLCharacterData();

	  XMLCData.exports = (function(superClass) {
	    extend(XMLCData, superClass);

	    function XMLCData(parent, text) {
	      XMLCData.__super__.constructor.call(this, parent);
	      if (text == null) {
	        throw new Error("Missing CDATA text. " + this.debugInfo());
	      }
	      this.name = "#cdata-section";
	      this.type = NodeType.CData;
	      this.value = this.stringify.cdata(text);
	    }

	    XMLCData.prototype.clone = function() {
	      return Object.create(this);
	    };

	    XMLCData.prototype.toString = function(options) {
	      return this.options.writer.cdata(this, this.options.writer.filterOptions(options));
	    };

	    return XMLCData;

	  })(XMLCharacterData);

	}).call(commonjsGlobal);
	return XMLCData.exports;
}

var XMLComment = {exports: {}};

var hasRequiredXMLComment;

function requireXMLComment () {
	if (hasRequiredXMLComment) return XMLComment.exports;
	hasRequiredXMLComment = 1;
	// Generated by CoffeeScript 1.12.7
	(function() {
	  var NodeType, XMLCharacterData, extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	    hasProp = {}.hasOwnProperty;

	  NodeType = requireNodeType();

	  XMLCharacterData = requireXMLCharacterData();

	  XMLComment.exports = (function(superClass) {
	    extend(XMLComment, superClass);

	    function XMLComment(parent, text) {
	      XMLComment.__super__.constructor.call(this, parent);
	      if (text == null) {
	        throw new Error("Missing comment text. " + this.debugInfo());
	      }
	      this.name = "#comment";
	      this.type = NodeType.Comment;
	      this.value = this.stringify.comment(text);
	    }

	    XMLComment.prototype.clone = function() {
	      return Object.create(this);
	    };

	    XMLComment.prototype.toString = function(options) {
	      return this.options.writer.comment(this, this.options.writer.filterOptions(options));
	    };

	    return XMLComment;

	  })(XMLCharacterData);

	}).call(commonjsGlobal);
	return XMLComment.exports;
}

var XMLDeclaration = {exports: {}};

var hasRequiredXMLDeclaration;

function requireXMLDeclaration () {
	if (hasRequiredXMLDeclaration) return XMLDeclaration.exports;
	hasRequiredXMLDeclaration = 1;
	// Generated by CoffeeScript 1.12.7
	(function() {
	  var NodeType, XMLNode, isObject,
	    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	    hasProp = {}.hasOwnProperty;

	  isObject = requireUtility().isObject;

	  XMLNode = requireXMLNode();

	  NodeType = requireNodeType();

	  XMLDeclaration.exports = (function(superClass) {
	    extend(XMLDeclaration, superClass);

	    function XMLDeclaration(parent, version, encoding, standalone) {
	      var ref;
	      XMLDeclaration.__super__.constructor.call(this, parent);
	      if (isObject(version)) {
	        ref = version, version = ref.version, encoding = ref.encoding, standalone = ref.standalone;
	      }
	      if (!version) {
	        version = '1.0';
	      }
	      this.type = NodeType.Declaration;
	      this.version = this.stringify.xmlVersion(version);
	      if (encoding != null) {
	        this.encoding = this.stringify.xmlEncoding(encoding);
	      }
	      if (standalone != null) {
	        this.standalone = this.stringify.xmlStandalone(standalone);
	      }
	    }

	    XMLDeclaration.prototype.toString = function(options) {
	      return this.options.writer.declaration(this, this.options.writer.filterOptions(options));
	    };

	    return XMLDeclaration;

	  })(XMLNode);

	}).call(commonjsGlobal);
	return XMLDeclaration.exports;
}

var XMLDocType = {exports: {}};

var XMLDTDAttList = {exports: {}};

var hasRequiredXMLDTDAttList;

function requireXMLDTDAttList () {
	if (hasRequiredXMLDTDAttList) return XMLDTDAttList.exports;
	hasRequiredXMLDTDAttList = 1;
	// Generated by CoffeeScript 1.12.7
	(function() {
	  var NodeType, XMLNode,
	    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	    hasProp = {}.hasOwnProperty;

	  XMLNode = requireXMLNode();

	  NodeType = requireNodeType();

	  XMLDTDAttList.exports = (function(superClass) {
	    extend(XMLDTDAttList, superClass);

	    function XMLDTDAttList(parent, elementName, attributeName, attributeType, defaultValueType, defaultValue) {
	      XMLDTDAttList.__super__.constructor.call(this, parent);
	      if (elementName == null) {
	        throw new Error("Missing DTD element name. " + this.debugInfo());
	      }
	      if (attributeName == null) {
	        throw new Error("Missing DTD attribute name. " + this.debugInfo(elementName));
	      }
	      if (!attributeType) {
	        throw new Error("Missing DTD attribute type. " + this.debugInfo(elementName));
	      }
	      if (!defaultValueType) {
	        throw new Error("Missing DTD attribute default. " + this.debugInfo(elementName));
	      }
	      if (defaultValueType.indexOf('#') !== 0) {
	        defaultValueType = '#' + defaultValueType;
	      }
	      if (!defaultValueType.match(/^(#REQUIRED|#IMPLIED|#FIXED|#DEFAULT)$/)) {
	        throw new Error("Invalid default value type; expected: #REQUIRED, #IMPLIED, #FIXED or #DEFAULT. " + this.debugInfo(elementName));
	      }
	      if (defaultValue && !defaultValueType.match(/^(#FIXED|#DEFAULT)$/)) {
	        throw new Error("Default value only applies to #FIXED or #DEFAULT. " + this.debugInfo(elementName));
	      }
	      this.elementName = this.stringify.name(elementName);
	      this.type = NodeType.AttributeDeclaration;
	      this.attributeName = this.stringify.name(attributeName);
	      this.attributeType = this.stringify.dtdAttType(attributeType);
	      if (defaultValue) {
	        this.defaultValue = this.stringify.dtdAttDefault(defaultValue);
	      }
	      this.defaultValueType = defaultValueType;
	    }

	    XMLDTDAttList.prototype.toString = function(options) {
	      return this.options.writer.dtdAttList(this, this.options.writer.filterOptions(options));
	    };

	    return XMLDTDAttList;

	  })(XMLNode);

	}).call(commonjsGlobal);
	return XMLDTDAttList.exports;
}

var XMLDTDEntity = {exports: {}};

var hasRequiredXMLDTDEntity;

function requireXMLDTDEntity () {
	if (hasRequiredXMLDTDEntity) return XMLDTDEntity.exports;
	hasRequiredXMLDTDEntity = 1;
	// Generated by CoffeeScript 1.12.7
	(function() {
	  var NodeType, XMLNode, isObject,
	    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	    hasProp = {}.hasOwnProperty;

	  isObject = requireUtility().isObject;

	  XMLNode = requireXMLNode();

	  NodeType = requireNodeType();

	  XMLDTDEntity.exports = (function(superClass) {
	    extend(XMLDTDEntity, superClass);

	    function XMLDTDEntity(parent, pe, name, value) {
	      XMLDTDEntity.__super__.constructor.call(this, parent);
	      if (name == null) {
	        throw new Error("Missing DTD entity name. " + this.debugInfo(name));
	      }
	      if (value == null) {
	        throw new Error("Missing DTD entity value. " + this.debugInfo(name));
	      }
	      this.pe = !!pe;
	      this.name = this.stringify.name(name);
	      this.type = NodeType.EntityDeclaration;
	      if (!isObject(value)) {
	        this.value = this.stringify.dtdEntityValue(value);
	        this.internal = true;
	      } else {
	        if (!value.pubID && !value.sysID) {
	          throw new Error("Public and/or system identifiers are required for an external entity. " + this.debugInfo(name));
	        }
	        if (value.pubID && !value.sysID) {
	          throw new Error("System identifier is required for a public external entity. " + this.debugInfo(name));
	        }
	        this.internal = false;
	        if (value.pubID != null) {
	          this.pubID = this.stringify.dtdPubID(value.pubID);
	        }
	        if (value.sysID != null) {
	          this.sysID = this.stringify.dtdSysID(value.sysID);
	        }
	        if (value.nData != null) {
	          this.nData = this.stringify.dtdNData(value.nData);
	        }
	        if (this.pe && this.nData) {
	          throw new Error("Notation declaration is not allowed in a parameter entity. " + this.debugInfo(name));
	        }
	      }
	    }

	    Object.defineProperty(XMLDTDEntity.prototype, 'publicId', {
	      get: function() {
	        return this.pubID;
	      }
	    });

	    Object.defineProperty(XMLDTDEntity.prototype, 'systemId', {
	      get: function() {
	        return this.sysID;
	      }
	    });

	    Object.defineProperty(XMLDTDEntity.prototype, 'notationName', {
	      get: function() {
	        return this.nData || null;
	      }
	    });

	    Object.defineProperty(XMLDTDEntity.prototype, 'inputEncoding', {
	      get: function() {
	        return null;
	      }
	    });

	    Object.defineProperty(XMLDTDEntity.prototype, 'xmlEncoding', {
	      get: function() {
	        return null;
	      }
	    });

	    Object.defineProperty(XMLDTDEntity.prototype, 'xmlVersion', {
	      get: function() {
	        return null;
	      }
	    });

	    XMLDTDEntity.prototype.toString = function(options) {
	      return this.options.writer.dtdEntity(this, this.options.writer.filterOptions(options));
	    };

	    return XMLDTDEntity;

	  })(XMLNode);

	}).call(commonjsGlobal);
	return XMLDTDEntity.exports;
}

var XMLDTDElement = {exports: {}};

var hasRequiredXMLDTDElement;

function requireXMLDTDElement () {
	if (hasRequiredXMLDTDElement) return XMLDTDElement.exports;
	hasRequiredXMLDTDElement = 1;
	// Generated by CoffeeScript 1.12.7
	(function() {
	  var NodeType, XMLNode,
	    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	    hasProp = {}.hasOwnProperty;

	  XMLNode = requireXMLNode();

	  NodeType = requireNodeType();

	  XMLDTDElement.exports = (function(superClass) {
	    extend(XMLDTDElement, superClass);

	    function XMLDTDElement(parent, name, value) {
	      XMLDTDElement.__super__.constructor.call(this, parent);
	      if (name == null) {
	        throw new Error("Missing DTD element name. " + this.debugInfo());
	      }
	      if (!value) {
	        value = '(#PCDATA)';
	      }
	      if (Array.isArray(value)) {
	        value = '(' + value.join(',') + ')';
	      }
	      this.name = this.stringify.name(name);
	      this.type = NodeType.ElementDeclaration;
	      this.value = this.stringify.dtdElementValue(value);
	    }

	    XMLDTDElement.prototype.toString = function(options) {
	      return this.options.writer.dtdElement(this, this.options.writer.filterOptions(options));
	    };

	    return XMLDTDElement;

	  })(XMLNode);

	}).call(commonjsGlobal);
	return XMLDTDElement.exports;
}

var XMLDTDNotation = {exports: {}};

var hasRequiredXMLDTDNotation;

function requireXMLDTDNotation () {
	if (hasRequiredXMLDTDNotation) return XMLDTDNotation.exports;
	hasRequiredXMLDTDNotation = 1;
	// Generated by CoffeeScript 1.12.7
	(function() {
	  var NodeType, XMLNode,
	    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	    hasProp = {}.hasOwnProperty;

	  XMLNode = requireXMLNode();

	  NodeType = requireNodeType();

	  XMLDTDNotation.exports = (function(superClass) {
	    extend(XMLDTDNotation, superClass);

	    function XMLDTDNotation(parent, name, value) {
	      XMLDTDNotation.__super__.constructor.call(this, parent);
	      if (name == null) {
	        throw new Error("Missing DTD notation name. " + this.debugInfo(name));
	      }
	      if (!value.pubID && !value.sysID) {
	        throw new Error("Public or system identifiers are required for an external entity. " + this.debugInfo(name));
	      }
	      this.name = this.stringify.name(name);
	      this.type = NodeType.NotationDeclaration;
	      if (value.pubID != null) {
	        this.pubID = this.stringify.dtdPubID(value.pubID);
	      }
	      if (value.sysID != null) {
	        this.sysID = this.stringify.dtdSysID(value.sysID);
	      }
	    }

	    Object.defineProperty(XMLDTDNotation.prototype, 'publicId', {
	      get: function() {
	        return this.pubID;
	      }
	    });

	    Object.defineProperty(XMLDTDNotation.prototype, 'systemId', {
	      get: function() {
	        return this.sysID;
	      }
	    });

	    XMLDTDNotation.prototype.toString = function(options) {
	      return this.options.writer.dtdNotation(this, this.options.writer.filterOptions(options));
	    };

	    return XMLDTDNotation;

	  })(XMLNode);

	}).call(commonjsGlobal);
	return XMLDTDNotation.exports;
}

var hasRequiredXMLDocType;

function requireXMLDocType () {
	if (hasRequiredXMLDocType) return XMLDocType.exports;
	hasRequiredXMLDocType = 1;
	// Generated by CoffeeScript 1.12.7
	(function() {
	  var NodeType, XMLDTDAttList, XMLDTDElement, XMLDTDEntity, XMLDTDNotation, XMLNamedNodeMap, XMLNode, isObject,
	    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	    hasProp = {}.hasOwnProperty;

	  isObject = requireUtility().isObject;

	  XMLNode = requireXMLNode();

	  NodeType = requireNodeType();

	  XMLDTDAttList = requireXMLDTDAttList();

	  XMLDTDEntity = requireXMLDTDEntity();

	  XMLDTDElement = requireXMLDTDElement();

	  XMLDTDNotation = requireXMLDTDNotation();

	  XMLNamedNodeMap = requireXMLNamedNodeMap();

	  XMLDocType.exports = (function(superClass) {
	    extend(XMLDocType, superClass);

	    function XMLDocType(parent, pubID, sysID) {
	      var child, i, len, ref, ref1, ref2;
	      XMLDocType.__super__.constructor.call(this, parent);
	      this.type = NodeType.DocType;
	      if (parent.children) {
	        ref = parent.children;
	        for (i = 0, len = ref.length; i < len; i++) {
	          child = ref[i];
	          if (child.type === NodeType.Element) {
	            this.name = child.name;
	            break;
	          }
	        }
	      }
	      this.documentObject = parent;
	      if (isObject(pubID)) {
	        ref1 = pubID, pubID = ref1.pubID, sysID = ref1.sysID;
	      }
	      if (sysID == null) {
	        ref2 = [pubID, sysID], sysID = ref2[0], pubID = ref2[1];
	      }
	      if (pubID != null) {
	        this.pubID = this.stringify.dtdPubID(pubID);
	      }
	      if (sysID != null) {
	        this.sysID = this.stringify.dtdSysID(sysID);
	      }
	    }

	    Object.defineProperty(XMLDocType.prototype, 'entities', {
	      get: function() {
	        var child, i, len, nodes, ref;
	        nodes = {};
	        ref = this.children;
	        for (i = 0, len = ref.length; i < len; i++) {
	          child = ref[i];
	          if ((child.type === NodeType.EntityDeclaration) && !child.pe) {
	            nodes[child.name] = child;
	          }
	        }
	        return new XMLNamedNodeMap(nodes);
	      }
	    });

	    Object.defineProperty(XMLDocType.prototype, 'notations', {
	      get: function() {
	        var child, i, len, nodes, ref;
	        nodes = {};
	        ref = this.children;
	        for (i = 0, len = ref.length; i < len; i++) {
	          child = ref[i];
	          if (child.type === NodeType.NotationDeclaration) {
	            nodes[child.name] = child;
	          }
	        }
	        return new XMLNamedNodeMap(nodes);
	      }
	    });

	    Object.defineProperty(XMLDocType.prototype, 'publicId', {
	      get: function() {
	        return this.pubID;
	      }
	    });

	    Object.defineProperty(XMLDocType.prototype, 'systemId', {
	      get: function() {
	        return this.sysID;
	      }
	    });

	    Object.defineProperty(XMLDocType.prototype, 'internalSubset', {
	      get: function() {
	        throw new Error("This DOM method is not implemented." + this.debugInfo());
	      }
	    });

	    XMLDocType.prototype.element = function(name, value) {
	      var child;
	      child = new XMLDTDElement(this, name, value);
	      this.children.push(child);
	      return this;
	    };

	    XMLDocType.prototype.attList = function(elementName, attributeName, attributeType, defaultValueType, defaultValue) {
	      var child;
	      child = new XMLDTDAttList(this, elementName, attributeName, attributeType, defaultValueType, defaultValue);
	      this.children.push(child);
	      return this;
	    };

	    XMLDocType.prototype.entity = function(name, value) {
	      var child;
	      child = new XMLDTDEntity(this, false, name, value);
	      this.children.push(child);
	      return this;
	    };

	    XMLDocType.prototype.pEntity = function(name, value) {
	      var child;
	      child = new XMLDTDEntity(this, true, name, value);
	      this.children.push(child);
	      return this;
	    };

	    XMLDocType.prototype.notation = function(name, value) {
	      var child;
	      child = new XMLDTDNotation(this, name, value);
	      this.children.push(child);
	      return this;
	    };

	    XMLDocType.prototype.toString = function(options) {
	      return this.options.writer.docType(this, this.options.writer.filterOptions(options));
	    };

	    XMLDocType.prototype.ele = function(name, value) {
	      return this.element(name, value);
	    };

	    XMLDocType.prototype.att = function(elementName, attributeName, attributeType, defaultValueType, defaultValue) {
	      return this.attList(elementName, attributeName, attributeType, defaultValueType, defaultValue);
	    };

	    XMLDocType.prototype.ent = function(name, value) {
	      return this.entity(name, value);
	    };

	    XMLDocType.prototype.pent = function(name, value) {
	      return this.pEntity(name, value);
	    };

	    XMLDocType.prototype.not = function(name, value) {
	      return this.notation(name, value);
	    };

	    XMLDocType.prototype.up = function() {
	      return this.root() || this.documentObject;
	    };

	    XMLDocType.prototype.isEqualNode = function(node) {
	      if (!XMLDocType.__super__.isEqualNode.apply(this, arguments).isEqualNode(node)) {
	        return false;
	      }
	      if (node.name !== this.name) {
	        return false;
	      }
	      if (node.publicId !== this.publicId) {
	        return false;
	      }
	      if (node.systemId !== this.systemId) {
	        return false;
	      }
	      return true;
	    };

	    return XMLDocType;

	  })(XMLNode);

	}).call(commonjsGlobal);
	return XMLDocType.exports;
}

var XMLRaw = {exports: {}};

var hasRequiredXMLRaw;

function requireXMLRaw () {
	if (hasRequiredXMLRaw) return XMLRaw.exports;
	hasRequiredXMLRaw = 1;
	// Generated by CoffeeScript 1.12.7
	(function() {
	  var NodeType, XMLNode, extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	    hasProp = {}.hasOwnProperty;

	  NodeType = requireNodeType();

	  XMLNode = requireXMLNode();

	  XMLRaw.exports = (function(superClass) {
	    extend(XMLRaw, superClass);

	    function XMLRaw(parent, text) {
	      XMLRaw.__super__.constructor.call(this, parent);
	      if (text == null) {
	        throw new Error("Missing raw text. " + this.debugInfo());
	      }
	      this.type = NodeType.Raw;
	      this.value = this.stringify.raw(text);
	    }

	    XMLRaw.prototype.clone = function() {
	      return Object.create(this);
	    };

	    XMLRaw.prototype.toString = function(options) {
	      return this.options.writer.raw(this, this.options.writer.filterOptions(options));
	    };

	    return XMLRaw;

	  })(XMLNode);

	}).call(commonjsGlobal);
	return XMLRaw.exports;
}

var XMLText = {exports: {}};

var hasRequiredXMLText;

function requireXMLText () {
	if (hasRequiredXMLText) return XMLText.exports;
	hasRequiredXMLText = 1;
	// Generated by CoffeeScript 1.12.7
	(function() {
	  var NodeType, XMLCharacterData, extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	    hasProp = {}.hasOwnProperty;

	  NodeType = requireNodeType();

	  XMLCharacterData = requireXMLCharacterData();

	  XMLText.exports = (function(superClass) {
	    extend(XMLText, superClass);

	    function XMLText(parent, text) {
	      XMLText.__super__.constructor.call(this, parent);
	      if (text == null) {
	        throw new Error("Missing element text. " + this.debugInfo());
	      }
	      this.name = "#text";
	      this.type = NodeType.Text;
	      this.value = this.stringify.text(text);
	    }

	    Object.defineProperty(XMLText.prototype, 'isElementContentWhitespace', {
	      get: function() {
	        throw new Error("This DOM method is not implemented." + this.debugInfo());
	      }
	    });

	    Object.defineProperty(XMLText.prototype, 'wholeText', {
	      get: function() {
	        var next, prev, str;
	        str = '';
	        prev = this.previousSibling;
	        while (prev) {
	          str = prev.data + str;
	          prev = prev.previousSibling;
	        }
	        str += this.data;
	        next = this.nextSibling;
	        while (next) {
	          str = str + next.data;
	          next = next.nextSibling;
	        }
	        return str;
	      }
	    });

	    XMLText.prototype.clone = function() {
	      return Object.create(this);
	    };

	    XMLText.prototype.toString = function(options) {
	      return this.options.writer.text(this, this.options.writer.filterOptions(options));
	    };

	    XMLText.prototype.splitText = function(offset) {
	      throw new Error("This DOM method is not implemented." + this.debugInfo());
	    };

	    XMLText.prototype.replaceWholeText = function(content) {
	      throw new Error("This DOM method is not implemented." + this.debugInfo());
	    };

	    return XMLText;

	  })(XMLCharacterData);

	}).call(commonjsGlobal);
	return XMLText.exports;
}

var XMLProcessingInstruction = {exports: {}};

var hasRequiredXMLProcessingInstruction;

function requireXMLProcessingInstruction () {
	if (hasRequiredXMLProcessingInstruction) return XMLProcessingInstruction.exports;
	hasRequiredXMLProcessingInstruction = 1;
	// Generated by CoffeeScript 1.12.7
	(function() {
	  var NodeType, XMLCharacterData, extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	    hasProp = {}.hasOwnProperty;

	  NodeType = requireNodeType();

	  XMLCharacterData = requireXMLCharacterData();

	  XMLProcessingInstruction.exports = (function(superClass) {
	    extend(XMLProcessingInstruction, superClass);

	    function XMLProcessingInstruction(parent, target, value) {
	      XMLProcessingInstruction.__super__.constructor.call(this, parent);
	      if (target == null) {
	        throw new Error("Missing instruction target. " + this.debugInfo());
	      }
	      this.type = NodeType.ProcessingInstruction;
	      this.target = this.stringify.insTarget(target);
	      this.name = this.target;
	      if (value) {
	        this.value = this.stringify.insValue(value);
	      }
	    }

	    XMLProcessingInstruction.prototype.clone = function() {
	      return Object.create(this);
	    };

	    XMLProcessingInstruction.prototype.toString = function(options) {
	      return this.options.writer.processingInstruction(this, this.options.writer.filterOptions(options));
	    };

	    XMLProcessingInstruction.prototype.isEqualNode = function(node) {
	      if (!XMLProcessingInstruction.__super__.isEqualNode.apply(this, arguments).isEqualNode(node)) {
	        return false;
	      }
	      if (node.target !== this.target) {
	        return false;
	      }
	      return true;
	    };

	    return XMLProcessingInstruction;

	  })(XMLCharacterData);

	}).call(commonjsGlobal);
	return XMLProcessingInstruction.exports;
}

var XMLDummy = {exports: {}};

var hasRequiredXMLDummy;

function requireXMLDummy () {
	if (hasRequiredXMLDummy) return XMLDummy.exports;
	hasRequiredXMLDummy = 1;
	// Generated by CoffeeScript 1.12.7
	(function() {
	  var NodeType, XMLNode,
	    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	    hasProp = {}.hasOwnProperty;

	  XMLNode = requireXMLNode();

	  NodeType = requireNodeType();

	  XMLDummy.exports = (function(superClass) {
	    extend(XMLDummy, superClass);

	    function XMLDummy(parent) {
	      XMLDummy.__super__.constructor.call(this, parent);
	      this.type = NodeType.Dummy;
	    }

	    XMLDummy.prototype.clone = function() {
	      return Object.create(this);
	    };

	    XMLDummy.prototype.toString = function(options) {
	      return '';
	    };

	    return XMLDummy;

	  })(XMLNode);

	}).call(commonjsGlobal);
	return XMLDummy.exports;
}

var XMLNodeList = {exports: {}};

var hasRequiredXMLNodeList;

function requireXMLNodeList () {
	if (hasRequiredXMLNodeList) return XMLNodeList.exports;
	hasRequiredXMLNodeList = 1;
	// Generated by CoffeeScript 1.12.7
	(function() {

	  XMLNodeList.exports = (function() {
	    function XMLNodeList(nodes) {
	      this.nodes = nodes;
	    }

	    Object.defineProperty(XMLNodeList.prototype, 'length', {
	      get: function() {
	        return this.nodes.length || 0;
	      }
	    });

	    XMLNodeList.prototype.clone = function() {
	      return this.nodes = null;
	    };

	    XMLNodeList.prototype.item = function(index) {
	      return this.nodes[index] || null;
	    };

	    return XMLNodeList;

	  })();

	}).call(commonjsGlobal);
	return XMLNodeList.exports;
}

var DocumentPosition = {exports: {}};

var hasRequiredDocumentPosition;

function requireDocumentPosition () {
	if (hasRequiredDocumentPosition) return DocumentPosition.exports;
	hasRequiredDocumentPosition = 1;
	// Generated by CoffeeScript 1.12.7
	(function() {
	  DocumentPosition.exports = {
	    Disconnected: 1,
	    Preceding: 2,
	    Following: 4,
	    Contains: 8,
	    ContainedBy: 16,
	    ImplementationSpecific: 32
	  };

	}).call(commonjsGlobal);
	return DocumentPosition.exports;
}

var hasRequiredXMLNode;

function requireXMLNode () {
	if (hasRequiredXMLNode) return XMLNode.exports;
	hasRequiredXMLNode = 1;
	// Generated by CoffeeScript 1.12.7
	(function() {
	  var DocumentPosition, NodeType, XMLCData, XMLComment, XMLDeclaration, XMLDocType, XMLDummy, XMLElement, XMLNodeList, XMLProcessingInstruction, XMLRaw, XMLText, getValue, isEmpty, isFunction, isObject, ref1,
	    hasProp = {}.hasOwnProperty;

	  ref1 = requireUtility(), isObject = ref1.isObject, isFunction = ref1.isFunction, isEmpty = ref1.isEmpty, getValue = ref1.getValue;

	  XMLElement = null;

	  XMLCData = null;

	  XMLComment = null;

	  XMLDeclaration = null;

	  XMLDocType = null;

	  XMLRaw = null;

	  XMLText = null;

	  XMLProcessingInstruction = null;

	  XMLDummy = null;

	  NodeType = null;

	  XMLNodeList = null;

	  DocumentPosition = null;

	  XMLNode.exports = (function() {
	    function XMLNode(parent1) {
	      this.parent = parent1;
	      if (this.parent) {
	        this.options = this.parent.options;
	        this.stringify = this.parent.stringify;
	      }
	      this.value = null;
	      this.children = [];
	      this.baseURI = null;
	      if (!XMLElement) {
	        XMLElement = requireXMLElement();
	        XMLCData = requireXMLCData();
	        XMLComment = requireXMLComment();
	        XMLDeclaration = requireXMLDeclaration();
	        XMLDocType = requireXMLDocType();
	        XMLRaw = requireXMLRaw();
	        XMLText = requireXMLText();
	        XMLProcessingInstruction = requireXMLProcessingInstruction();
	        XMLDummy = requireXMLDummy();
	        NodeType = requireNodeType();
	        XMLNodeList = requireXMLNodeList();
	        requireXMLNamedNodeMap();
	        DocumentPosition = requireDocumentPosition();
	      }
	    }

	    Object.defineProperty(XMLNode.prototype, 'nodeName', {
	      get: function() {
	        return this.name;
	      }
	    });

	    Object.defineProperty(XMLNode.prototype, 'nodeType', {
	      get: function() {
	        return this.type;
	      }
	    });

	    Object.defineProperty(XMLNode.prototype, 'nodeValue', {
	      get: function() {
	        return this.value;
	      }
	    });

	    Object.defineProperty(XMLNode.prototype, 'parentNode', {
	      get: function() {
	        return this.parent;
	      }
	    });

	    Object.defineProperty(XMLNode.prototype, 'childNodes', {
	      get: function() {
	        if (!this.childNodeList || !this.childNodeList.nodes) {
	          this.childNodeList = new XMLNodeList(this.children);
	        }
	        return this.childNodeList;
	      }
	    });

	    Object.defineProperty(XMLNode.prototype, 'firstChild', {
	      get: function() {
	        return this.children[0] || null;
	      }
	    });

	    Object.defineProperty(XMLNode.prototype, 'lastChild', {
	      get: function() {
	        return this.children[this.children.length - 1] || null;
	      }
	    });

	    Object.defineProperty(XMLNode.prototype, 'previousSibling', {
	      get: function() {
	        var i;
	        i = this.parent.children.indexOf(this);
	        return this.parent.children[i - 1] || null;
	      }
	    });

	    Object.defineProperty(XMLNode.prototype, 'nextSibling', {
	      get: function() {
	        var i;
	        i = this.parent.children.indexOf(this);
	        return this.parent.children[i + 1] || null;
	      }
	    });

	    Object.defineProperty(XMLNode.prototype, 'ownerDocument', {
	      get: function() {
	        return this.document() || null;
	      }
	    });

	    Object.defineProperty(XMLNode.prototype, 'textContent', {
	      get: function() {
	        var child, j, len, ref2, str;
	        if (this.nodeType === NodeType.Element || this.nodeType === NodeType.DocumentFragment) {
	          str = '';
	          ref2 = this.children;
	          for (j = 0, len = ref2.length; j < len; j++) {
	            child = ref2[j];
	            if (child.textContent) {
	              str += child.textContent;
	            }
	          }
	          return str;
	        } else {
	          return null;
	        }
	      },
	      set: function(value) {
	        throw new Error("This DOM method is not implemented." + this.debugInfo());
	      }
	    });

	    XMLNode.prototype.setParent = function(parent) {
	      var child, j, len, ref2, results;
	      this.parent = parent;
	      if (parent) {
	        this.options = parent.options;
	        this.stringify = parent.stringify;
	      }
	      ref2 = this.children;
	      results = [];
	      for (j = 0, len = ref2.length; j < len; j++) {
	        child = ref2[j];
	        results.push(child.setParent(this));
	      }
	      return results;
	    };

	    XMLNode.prototype.element = function(name, attributes, text) {
	      var childNode, item, j, k, key, lastChild, len, len1, ref2, ref3, val;
	      lastChild = null;
	      if (attributes === null && (text == null)) {
	        ref2 = [{}, null], attributes = ref2[0], text = ref2[1];
	      }
	      if (attributes == null) {
	        attributes = {};
	      }
	      attributes = getValue(attributes);
	      if (!isObject(attributes)) {
	        ref3 = [attributes, text], text = ref3[0], attributes = ref3[1];
	      }
	      if (name != null) {
	        name = getValue(name);
	      }
	      if (Array.isArray(name)) {
	        for (j = 0, len = name.length; j < len; j++) {
	          item = name[j];
	          lastChild = this.element(item);
	        }
	      } else if (isFunction(name)) {
	        lastChild = this.element(name.apply());
	      } else if (isObject(name)) {
	        for (key in name) {
	          if (!hasProp.call(name, key)) continue;
	          val = name[key];
	          if (isFunction(val)) {
	            val = val.apply();
	          }
	          if (!this.options.ignoreDecorators && this.stringify.convertAttKey && key.indexOf(this.stringify.convertAttKey) === 0) {
	            lastChild = this.attribute(key.substr(this.stringify.convertAttKey.length), val);
	          } else if (!this.options.separateArrayItems && Array.isArray(val) && isEmpty(val)) {
	            lastChild = this.dummy();
	          } else if (isObject(val) && isEmpty(val)) {
	            lastChild = this.element(key);
	          } else if (!this.options.keepNullNodes && (val == null)) {
	            lastChild = this.dummy();
	          } else if (!this.options.separateArrayItems && Array.isArray(val)) {
	            for (k = 0, len1 = val.length; k < len1; k++) {
	              item = val[k];
	              childNode = {};
	              childNode[key] = item;
	              lastChild = this.element(childNode);
	            }
	          } else if (isObject(val)) {
	            if (!this.options.ignoreDecorators && this.stringify.convertTextKey && key.indexOf(this.stringify.convertTextKey) === 0) {
	              lastChild = this.element(val);
	            } else {
	              lastChild = this.element(key);
	              lastChild.element(val);
	            }
	          } else {
	            lastChild = this.element(key, val);
	          }
	        }
	      } else if (!this.options.keepNullNodes && text === null) {
	        lastChild = this.dummy();
	      } else {
	        if (!this.options.ignoreDecorators && this.stringify.convertTextKey && name.indexOf(this.stringify.convertTextKey) === 0) {
	          lastChild = this.text(text);
	        } else if (!this.options.ignoreDecorators && this.stringify.convertCDataKey && name.indexOf(this.stringify.convertCDataKey) === 0) {
	          lastChild = this.cdata(text);
	        } else if (!this.options.ignoreDecorators && this.stringify.convertCommentKey && name.indexOf(this.stringify.convertCommentKey) === 0) {
	          lastChild = this.comment(text);
	        } else if (!this.options.ignoreDecorators && this.stringify.convertRawKey && name.indexOf(this.stringify.convertRawKey) === 0) {
	          lastChild = this.raw(text);
	        } else if (!this.options.ignoreDecorators && this.stringify.convertPIKey && name.indexOf(this.stringify.convertPIKey) === 0) {
	          lastChild = this.instruction(name.substr(this.stringify.convertPIKey.length), text);
	        } else {
	          lastChild = this.node(name, attributes, text);
	        }
	      }
	      if (lastChild == null) {
	        throw new Error("Could not create any elements with: " + name + ". " + this.debugInfo());
	      }
	      return lastChild;
	    };

	    XMLNode.prototype.insertBefore = function(name, attributes, text) {
	      var child, i, newChild, refChild, removed;
	      if (name != null ? name.type : void 0) {
	        newChild = name;
	        refChild = attributes;
	        newChild.setParent(this);
	        if (refChild) {
	          i = children.indexOf(refChild);
	          removed = children.splice(i);
	          children.push(newChild);
	          Array.prototype.push.apply(children, removed);
	        } else {
	          children.push(newChild);
	        }
	        return newChild;
	      } else {
	        if (this.isRoot) {
	          throw new Error("Cannot insert elements at root level. " + this.debugInfo(name));
	        }
	        i = this.parent.children.indexOf(this);
	        removed = this.parent.children.splice(i);
	        child = this.parent.element(name, attributes, text);
	        Array.prototype.push.apply(this.parent.children, removed);
	        return child;
	      }
	    };

	    XMLNode.prototype.insertAfter = function(name, attributes, text) {
	      var child, i, removed;
	      if (this.isRoot) {
	        throw new Error("Cannot insert elements at root level. " + this.debugInfo(name));
	      }
	      i = this.parent.children.indexOf(this);
	      removed = this.parent.children.splice(i + 1);
	      child = this.parent.element(name, attributes, text);
	      Array.prototype.push.apply(this.parent.children, removed);
	      return child;
	    };

	    XMLNode.prototype.remove = function() {
	      var i;
	      if (this.isRoot) {
	        throw new Error("Cannot remove the root element. " + this.debugInfo());
	      }
	      i = this.parent.children.indexOf(this);
	      [].splice.apply(this.parent.children, [i, i - i + 1].concat([]));
	      return this.parent;
	    };

	    XMLNode.prototype.node = function(name, attributes, text) {
	      var child, ref2;
	      if (name != null) {
	        name = getValue(name);
	      }
	      attributes || (attributes = {});
	      attributes = getValue(attributes);
	      if (!isObject(attributes)) {
	        ref2 = [attributes, text], text = ref2[0], attributes = ref2[1];
	      }
	      child = new XMLElement(this, name, attributes);
	      if (text != null) {
	        child.text(text);
	      }
	      this.children.push(child);
	      return child;
	    };

	    XMLNode.prototype.text = function(value) {
	      var child;
	      if (isObject(value)) {
	        this.element(value);
	      }
	      child = new XMLText(this, value);
	      this.children.push(child);
	      return this;
	    };

	    XMLNode.prototype.cdata = function(value) {
	      var child;
	      child = new XMLCData(this, value);
	      this.children.push(child);
	      return this;
	    };

	    XMLNode.prototype.comment = function(value) {
	      var child;
	      child = new XMLComment(this, value);
	      this.children.push(child);
	      return this;
	    };

	    XMLNode.prototype.commentBefore = function(value) {
	      var i, removed;
	      i = this.parent.children.indexOf(this);
	      removed = this.parent.children.splice(i);
	      this.parent.comment(value);
	      Array.prototype.push.apply(this.parent.children, removed);
	      return this;
	    };

	    XMLNode.prototype.commentAfter = function(value) {
	      var i, removed;
	      i = this.parent.children.indexOf(this);
	      removed = this.parent.children.splice(i + 1);
	      this.parent.comment(value);
	      Array.prototype.push.apply(this.parent.children, removed);
	      return this;
	    };

	    XMLNode.prototype.raw = function(value) {
	      var child;
	      child = new XMLRaw(this, value);
	      this.children.push(child);
	      return this;
	    };

	    XMLNode.prototype.dummy = function() {
	      var child;
	      child = new XMLDummy(this);
	      return child;
	    };

	    XMLNode.prototype.instruction = function(target, value) {
	      var insTarget, insValue, instruction, j, len;
	      if (target != null) {
	        target = getValue(target);
	      }
	      if (value != null) {
	        value = getValue(value);
	      }
	      if (Array.isArray(target)) {
	        for (j = 0, len = target.length; j < len; j++) {
	          insTarget = target[j];
	          this.instruction(insTarget);
	        }
	      } else if (isObject(target)) {
	        for (insTarget in target) {
	          if (!hasProp.call(target, insTarget)) continue;
	          insValue = target[insTarget];
	          this.instruction(insTarget, insValue);
	        }
	      } else {
	        if (isFunction(value)) {
	          value = value.apply();
	        }
	        instruction = new XMLProcessingInstruction(this, target, value);
	        this.children.push(instruction);
	      }
	      return this;
	    };

	    XMLNode.prototype.instructionBefore = function(target, value) {
	      var i, removed;
	      i = this.parent.children.indexOf(this);
	      removed = this.parent.children.splice(i);
	      this.parent.instruction(target, value);
	      Array.prototype.push.apply(this.parent.children, removed);
	      return this;
	    };

	    XMLNode.prototype.instructionAfter = function(target, value) {
	      var i, removed;
	      i = this.parent.children.indexOf(this);
	      removed = this.parent.children.splice(i + 1);
	      this.parent.instruction(target, value);
	      Array.prototype.push.apply(this.parent.children, removed);
	      return this;
	    };

	    XMLNode.prototype.declaration = function(version, encoding, standalone) {
	      var doc, xmldec;
	      doc = this.document();
	      xmldec = new XMLDeclaration(doc, version, encoding, standalone);
	      if (doc.children.length === 0) {
	        doc.children.unshift(xmldec);
	      } else if (doc.children[0].type === NodeType.Declaration) {
	        doc.children[0] = xmldec;
	      } else {
	        doc.children.unshift(xmldec);
	      }
	      return doc.root() || doc;
	    };

	    XMLNode.prototype.dtd = function(pubID, sysID) {
	      var child, doc, doctype, i, j, k, len, len1, ref2, ref3;
	      doc = this.document();
	      doctype = new XMLDocType(doc, pubID, sysID);
	      ref2 = doc.children;
	      for (i = j = 0, len = ref2.length; j < len; i = ++j) {
	        child = ref2[i];
	        if (child.type === NodeType.DocType) {
	          doc.children[i] = doctype;
	          return doctype;
	        }
	      }
	      ref3 = doc.children;
	      for (i = k = 0, len1 = ref3.length; k < len1; i = ++k) {
	        child = ref3[i];
	        if (child.isRoot) {
	          doc.children.splice(i, 0, doctype);
	          return doctype;
	        }
	      }
	      doc.children.push(doctype);
	      return doctype;
	    };

	    XMLNode.prototype.up = function() {
	      if (this.isRoot) {
	        throw new Error("The root node has no parent. Use doc() if you need to get the document object.");
	      }
	      return this.parent;
	    };

	    XMLNode.prototype.root = function() {
	      var node;
	      node = this;
	      while (node) {
	        if (node.type === NodeType.Document) {
	          return node.rootObject;
	        } else if (node.isRoot) {
	          return node;
	        } else {
	          node = node.parent;
	        }
	      }
	    };

	    XMLNode.prototype.document = function() {
	      var node;
	      node = this;
	      while (node) {
	        if (node.type === NodeType.Document) {
	          return node;
	        } else {
	          node = node.parent;
	        }
	      }
	    };

	    XMLNode.prototype.end = function(options) {
	      return this.document().end(options);
	    };

	    XMLNode.prototype.prev = function() {
	      var i;
	      i = this.parent.children.indexOf(this);
	      if (i < 1) {
	        throw new Error("Already at the first node. " + this.debugInfo());
	      }
	      return this.parent.children[i - 1];
	    };

	    XMLNode.prototype.next = function() {
	      var i;
	      i = this.parent.children.indexOf(this);
	      if (i === -1 || i === this.parent.children.length - 1) {
	        throw new Error("Already at the last node. " + this.debugInfo());
	      }
	      return this.parent.children[i + 1];
	    };

	    XMLNode.prototype.importDocument = function(doc) {
	      var clonedRoot;
	      clonedRoot = doc.root().clone();
	      clonedRoot.parent = this;
	      clonedRoot.isRoot = false;
	      this.children.push(clonedRoot);
	      return this;
	    };

	    XMLNode.prototype.debugInfo = function(name) {
	      var ref2, ref3;
	      name = name || this.name;
	      if ((name == null) && !((ref2 = this.parent) != null ? ref2.name : void 0)) {
	        return "";
	      } else if (name == null) {
	        return "parent: <" + this.parent.name + ">";
	      } else if (!((ref3 = this.parent) != null ? ref3.name : void 0)) {
	        return "node: <" + name + ">";
	      } else {
	        return "node: <" + name + ">, parent: <" + this.parent.name + ">";
	      }
	    };

	    XMLNode.prototype.ele = function(name, attributes, text) {
	      return this.element(name, attributes, text);
	    };

	    XMLNode.prototype.nod = function(name, attributes, text) {
	      return this.node(name, attributes, text);
	    };

	    XMLNode.prototype.txt = function(value) {
	      return this.text(value);
	    };

	    XMLNode.prototype.dat = function(value) {
	      return this.cdata(value);
	    };

	    XMLNode.prototype.com = function(value) {
	      return this.comment(value);
	    };

	    XMLNode.prototype.ins = function(target, value) {
	      return this.instruction(target, value);
	    };

	    XMLNode.prototype.doc = function() {
	      return this.document();
	    };

	    XMLNode.prototype.dec = function(version, encoding, standalone) {
	      return this.declaration(version, encoding, standalone);
	    };

	    XMLNode.prototype.e = function(name, attributes, text) {
	      return this.element(name, attributes, text);
	    };

	    XMLNode.prototype.n = function(name, attributes, text) {
	      return this.node(name, attributes, text);
	    };

	    XMLNode.prototype.t = function(value) {
	      return this.text(value);
	    };

	    XMLNode.prototype.d = function(value) {
	      return this.cdata(value);
	    };

	    XMLNode.prototype.c = function(value) {
	      return this.comment(value);
	    };

	    XMLNode.prototype.r = function(value) {
	      return this.raw(value);
	    };

	    XMLNode.prototype.i = function(target, value) {
	      return this.instruction(target, value);
	    };

	    XMLNode.prototype.u = function() {
	      return this.up();
	    };

	    XMLNode.prototype.importXMLBuilder = function(doc) {
	      return this.importDocument(doc);
	    };

	    XMLNode.prototype.replaceChild = function(newChild, oldChild) {
	      throw new Error("This DOM method is not implemented." + this.debugInfo());
	    };

	    XMLNode.prototype.removeChild = function(oldChild) {
	      throw new Error("This DOM method is not implemented." + this.debugInfo());
	    };

	    XMLNode.prototype.appendChild = function(newChild) {
	      throw new Error("This DOM method is not implemented." + this.debugInfo());
	    };

	    XMLNode.prototype.hasChildNodes = function() {
	      return this.children.length !== 0;
	    };

	    XMLNode.prototype.cloneNode = function(deep) {
	      throw new Error("This DOM method is not implemented." + this.debugInfo());
	    };

	    XMLNode.prototype.normalize = function() {
	      throw new Error("This DOM method is not implemented." + this.debugInfo());
	    };

	    XMLNode.prototype.isSupported = function(feature, version) {
	      return true;
	    };

	    XMLNode.prototype.hasAttributes = function() {
	      return this.attribs.length !== 0;
	    };

	    XMLNode.prototype.compareDocumentPosition = function(other) {
	      var ref, res;
	      ref = this;
	      if (ref === other) {
	        return 0;
	      } else if (this.document() !== other.document()) {
	        res = DocumentPosition.Disconnected | DocumentPosition.ImplementationSpecific;
	        if (Math.random() < 0.5) {
	          res |= DocumentPosition.Preceding;
	        } else {
	          res |= DocumentPosition.Following;
	        }
	        return res;
	      } else if (ref.isAncestor(other)) {
	        return DocumentPosition.Contains | DocumentPosition.Preceding;
	      } else if (ref.isDescendant(other)) {
	        return DocumentPosition.Contains | DocumentPosition.Following;
	      } else if (ref.isPreceding(other)) {
	        return DocumentPosition.Preceding;
	      } else {
	        return DocumentPosition.Following;
	      }
	    };

	    XMLNode.prototype.isSameNode = function(other) {
	      throw new Error("This DOM method is not implemented." + this.debugInfo());
	    };

	    XMLNode.prototype.lookupPrefix = function(namespaceURI) {
	      throw new Error("This DOM method is not implemented." + this.debugInfo());
	    };

	    XMLNode.prototype.isDefaultNamespace = function(namespaceURI) {
	      throw new Error("This DOM method is not implemented." + this.debugInfo());
	    };

	    XMLNode.prototype.lookupNamespaceURI = function(prefix) {
	      throw new Error("This DOM method is not implemented." + this.debugInfo());
	    };

	    XMLNode.prototype.isEqualNode = function(node) {
	      var i, j, ref2;
	      if (node.nodeType !== this.nodeType) {
	        return false;
	      }
	      if (node.children.length !== this.children.length) {
	        return false;
	      }
	      for (i = j = 0, ref2 = this.children.length - 1; 0 <= ref2 ? j <= ref2 : j >= ref2; i = 0 <= ref2 ? ++j : --j) {
	        if (!this.children[i].isEqualNode(node.children[i])) {
	          return false;
	        }
	      }
	      return true;
	    };

	    XMLNode.prototype.getFeature = function(feature, version) {
	      throw new Error("This DOM method is not implemented." + this.debugInfo());
	    };

	    XMLNode.prototype.setUserData = function(key, data, handler) {
	      throw new Error("This DOM method is not implemented." + this.debugInfo());
	    };

	    XMLNode.prototype.getUserData = function(key) {
	      throw new Error("This DOM method is not implemented." + this.debugInfo());
	    };

	    XMLNode.prototype.contains = function(other) {
	      if (!other) {
	        return false;
	      }
	      return other === this || this.isDescendant(other);
	    };

	    XMLNode.prototype.isDescendant = function(node) {
	      var child, isDescendantChild, j, len, ref2;
	      ref2 = this.children;
	      for (j = 0, len = ref2.length; j < len; j++) {
	        child = ref2[j];
	        if (node === child) {
	          return true;
	        }
	        isDescendantChild = child.isDescendant(node);
	        if (isDescendantChild) {
	          return true;
	        }
	      }
	      return false;
	    };

	    XMLNode.prototype.isAncestor = function(node) {
	      return node.isDescendant(this);
	    };

	    XMLNode.prototype.isPreceding = function(node) {
	      var nodePos, thisPos;
	      nodePos = this.treePosition(node);
	      thisPos = this.treePosition(this);
	      if (nodePos === -1 || thisPos === -1) {
	        return false;
	      } else {
	        return nodePos < thisPos;
	      }
	    };

	    XMLNode.prototype.isFollowing = function(node) {
	      var nodePos, thisPos;
	      nodePos = this.treePosition(node);
	      thisPos = this.treePosition(this);
	      if (nodePos === -1 || thisPos === -1) {
	        return false;
	      } else {
	        return nodePos > thisPos;
	      }
	    };

	    XMLNode.prototype.treePosition = function(node) {
	      var found, pos;
	      pos = 0;
	      found = false;
	      this.foreachTreeNode(this.document(), function(childNode) {
	        pos++;
	        if (!found && childNode === node) {
	          return found = true;
	        }
	      });
	      if (found) {
	        return pos;
	      } else {
	        return -1;
	      }
	    };

	    XMLNode.prototype.foreachTreeNode = function(node, func) {
	      var child, j, len, ref2, res;
	      node || (node = this.document());
	      ref2 = node.children;
	      for (j = 0, len = ref2.length; j < len; j++) {
	        child = ref2[j];
	        if (res = func(child)) {
	          return res;
	        } else {
	          res = this.foreachTreeNode(child, func);
	          if (res) {
	            return res;
	          }
	        }
	      }
	    };

	    return XMLNode;

	  })();

	}).call(commonjsGlobal);
	return XMLNode.exports;
}

var XMLStringifier = {exports: {}};

var hasRequiredXMLStringifier;

function requireXMLStringifier () {
	if (hasRequiredXMLStringifier) return XMLStringifier.exports;
	hasRequiredXMLStringifier = 1;
	// Generated by CoffeeScript 1.12.7
	(function() {
	  var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
	    hasProp = {}.hasOwnProperty;

	  XMLStringifier.exports = (function() {
	    function XMLStringifier(options) {
	      this.assertLegalName = bind(this.assertLegalName, this);
	      this.assertLegalChar = bind(this.assertLegalChar, this);
	      var key, ref, value;
	      options || (options = {});
	      this.options = options;
	      if (!this.options.version) {
	        this.options.version = '1.0';
	      }
	      ref = options.stringify || {};
	      for (key in ref) {
	        if (!hasProp.call(ref, key)) continue;
	        value = ref[key];
	        this[key] = value;
	      }
	    }

	    XMLStringifier.prototype.name = function(val) {
	      if (this.options.noValidation) {
	        return val;
	      }
	      return this.assertLegalName('' + val || '');
	    };

	    XMLStringifier.prototype.text = function(val) {
	      if (this.options.noValidation) {
	        return val;
	      }
	      return this.assertLegalChar(this.textEscape('' + val || ''));
	    };

	    XMLStringifier.prototype.cdata = function(val) {
	      if (this.options.noValidation) {
	        return val;
	      }
	      val = '' + val || '';
	      val = val.replace(']]>', ']]]]><![CDATA[>');
	      return this.assertLegalChar(val);
	    };

	    XMLStringifier.prototype.comment = function(val) {
	      if (this.options.noValidation) {
	        return val;
	      }
	      val = '' + val || '';
	      if (val.match(/--/)) {
	        throw new Error("Comment text cannot contain double-hypen: " + val);
	      }
	      return this.assertLegalChar(val);
	    };

	    XMLStringifier.prototype.raw = function(val) {
	      if (this.options.noValidation) {
	        return val;
	      }
	      return '' + val || '';
	    };

	    XMLStringifier.prototype.attValue = function(val) {
	      if (this.options.noValidation) {
	        return val;
	      }
	      return this.assertLegalChar(this.attEscape(val = '' + val || ''));
	    };

	    XMLStringifier.prototype.insTarget = function(val) {
	      if (this.options.noValidation) {
	        return val;
	      }
	      return this.assertLegalChar('' + val || '');
	    };

	    XMLStringifier.prototype.insValue = function(val) {
	      if (this.options.noValidation) {
	        return val;
	      }
	      val = '' + val || '';
	      if (val.match(/\?>/)) {
	        throw new Error("Invalid processing instruction value: " + val);
	      }
	      return this.assertLegalChar(val);
	    };

	    XMLStringifier.prototype.xmlVersion = function(val) {
	      if (this.options.noValidation) {
	        return val;
	      }
	      val = '' + val || '';
	      if (!val.match(/1\.[0-9]+/)) {
	        throw new Error("Invalid version number: " + val);
	      }
	      return val;
	    };

	    XMLStringifier.prototype.xmlEncoding = function(val) {
	      if (this.options.noValidation) {
	        return val;
	      }
	      val = '' + val || '';
	      if (!val.match(/^[A-Za-z](?:[A-Za-z0-9._-])*$/)) {
	        throw new Error("Invalid encoding: " + val);
	      }
	      return this.assertLegalChar(val);
	    };

	    XMLStringifier.prototype.xmlStandalone = function(val) {
	      if (this.options.noValidation) {
	        return val;
	      }
	      if (val) {
	        return "yes";
	      } else {
	        return "no";
	      }
	    };

	    XMLStringifier.prototype.dtdPubID = function(val) {
	      if (this.options.noValidation) {
	        return val;
	      }
	      return this.assertLegalChar('' + val || '');
	    };

	    XMLStringifier.prototype.dtdSysID = function(val) {
	      if (this.options.noValidation) {
	        return val;
	      }
	      return this.assertLegalChar('' + val || '');
	    };

	    XMLStringifier.prototype.dtdElementValue = function(val) {
	      if (this.options.noValidation) {
	        return val;
	      }
	      return this.assertLegalChar('' + val || '');
	    };

	    XMLStringifier.prototype.dtdAttType = function(val) {
	      if (this.options.noValidation) {
	        return val;
	      }
	      return this.assertLegalChar('' + val || '');
	    };

	    XMLStringifier.prototype.dtdAttDefault = function(val) {
	      if (this.options.noValidation) {
	        return val;
	      }
	      return this.assertLegalChar('' + val || '');
	    };

	    XMLStringifier.prototype.dtdEntityValue = function(val) {
	      if (this.options.noValidation) {
	        return val;
	      }
	      return this.assertLegalChar('' + val || '');
	    };

	    XMLStringifier.prototype.dtdNData = function(val) {
	      if (this.options.noValidation) {
	        return val;
	      }
	      return this.assertLegalChar('' + val || '');
	    };

	    XMLStringifier.prototype.convertAttKey = '@';

	    XMLStringifier.prototype.convertPIKey = '?';

	    XMLStringifier.prototype.convertTextKey = '#text';

	    XMLStringifier.prototype.convertCDataKey = '#cdata';

	    XMLStringifier.prototype.convertCommentKey = '#comment';

	    XMLStringifier.prototype.convertRawKey = '#raw';

	    XMLStringifier.prototype.assertLegalChar = function(str) {
	      var regex, res;
	      if (this.options.noValidation) {
	        return str;
	      }
	      regex = '';
	      if (this.options.version === '1.0') {
	        regex = /[\0-\x08\x0B\f\x0E-\x1F\uFFFE\uFFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]/;
	        if (res = str.match(regex)) {
	          throw new Error("Invalid character in string: " + str + " at index " + res.index);
	        }
	      } else if (this.options.version === '1.1') {
	        regex = /[\0\uFFFE\uFFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]/;
	        if (res = str.match(regex)) {
	          throw new Error("Invalid character in string: " + str + " at index " + res.index);
	        }
	      }
	      return str;
	    };

	    XMLStringifier.prototype.assertLegalName = function(str) {
	      var regex;
	      if (this.options.noValidation) {
	        return str;
	      }
	      this.assertLegalChar(str);
	      regex = /^([:A-Z_a-z\xC0-\xD6\xD8-\xF6\xF8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDB7F][\uDC00-\uDFFF])([\x2D\.0-:A-Z_a-z\xB7\xC0-\xD6\xD8-\xF6\xF8-\u037D\u037F-\u1FFF\u200C\u200D\u203F\u2040\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDB7F][\uDC00-\uDFFF])*$/;
	      if (!str.match(regex)) {
	        throw new Error("Invalid character in name");
	      }
	      return str;
	    };

	    XMLStringifier.prototype.textEscape = function(str) {
	      var ampregex;
	      if (this.options.noValidation) {
	        return str;
	      }
	      ampregex = this.options.noDoubleEncoding ? /(?!&\S+;)&/g : /&/g;
	      return str.replace(ampregex, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/\r/g, '&#xD;');
	    };

	    XMLStringifier.prototype.attEscape = function(str) {
	      var ampregex;
	      if (this.options.noValidation) {
	        return str;
	      }
	      ampregex = this.options.noDoubleEncoding ? /(?!&\S+;)&/g : /&/g;
	      return str.replace(ampregex, '&amp;').replace(/</g, '&lt;').replace(/"/g, '&quot;').replace(/\t/g, '&#x9;').replace(/\n/g, '&#xA;').replace(/\r/g, '&#xD;');
	    };

	    return XMLStringifier;

	  })();

	}).call(commonjsGlobal);
	return XMLStringifier.exports;
}

var XMLStringWriter = {exports: {}};

var XMLWriterBase = {exports: {}};

var WriterState = {exports: {}};

var hasRequiredWriterState;

function requireWriterState () {
	if (hasRequiredWriterState) return WriterState.exports;
	hasRequiredWriterState = 1;
	// Generated by CoffeeScript 1.12.7
	(function() {
	  WriterState.exports = {
	    None: 0,
	    OpenTag: 1,
	    InsideTag: 2,
	    CloseTag: 3
	  };

	}).call(commonjsGlobal);
	return WriterState.exports;
}

var hasRequiredXMLWriterBase;

function requireXMLWriterBase () {
	if (hasRequiredXMLWriterBase) return XMLWriterBase.exports;
	hasRequiredXMLWriterBase = 1;
	// Generated by CoffeeScript 1.12.7
	(function() {
	  var NodeType, WriterState, assign,
	    hasProp = {}.hasOwnProperty;

	  assign = requireUtility().assign;

	  NodeType = requireNodeType();

	  requireXMLDeclaration();

	  requireXMLDocType();

	  requireXMLCData();

	  requireXMLComment();

	  requireXMLElement();

	  requireXMLRaw();

	  requireXMLText();

	  requireXMLProcessingInstruction();

	  requireXMLDummy();

	  requireXMLDTDAttList();

	  requireXMLDTDElement();

	  requireXMLDTDEntity();

	  requireXMLDTDNotation();

	  WriterState = requireWriterState();

	  XMLWriterBase.exports = (function() {
	    function XMLWriterBase(options) {
	      var key, ref, value;
	      options || (options = {});
	      this.options = options;
	      ref = options.writer || {};
	      for (key in ref) {
	        if (!hasProp.call(ref, key)) continue;
	        value = ref[key];
	        this["_" + key] = this[key];
	        this[key] = value;
	      }
	    }

	    XMLWriterBase.prototype.filterOptions = function(options) {
	      var filteredOptions, ref, ref1, ref2, ref3, ref4, ref5, ref6;
	      options || (options = {});
	      options = assign({}, this.options, options);
	      filteredOptions = {
	        writer: this
	      };
	      filteredOptions.pretty = options.pretty || false;
	      filteredOptions.allowEmpty = options.allowEmpty || false;
	      filteredOptions.indent = (ref = options.indent) != null ? ref : '  ';
	      filteredOptions.newline = (ref1 = options.newline) != null ? ref1 : '\n';
	      filteredOptions.offset = (ref2 = options.offset) != null ? ref2 : 0;
	      filteredOptions.dontPrettyTextNodes = (ref3 = (ref4 = options.dontPrettyTextNodes) != null ? ref4 : options.dontprettytextnodes) != null ? ref3 : 0;
	      filteredOptions.spaceBeforeSlash = (ref5 = (ref6 = options.spaceBeforeSlash) != null ? ref6 : options.spacebeforeslash) != null ? ref5 : '';
	      if (filteredOptions.spaceBeforeSlash === true) {
	        filteredOptions.spaceBeforeSlash = ' ';
	      }
	      filteredOptions.suppressPrettyCount = 0;
	      filteredOptions.user = {};
	      filteredOptions.state = WriterState.None;
	      return filteredOptions;
	    };

	    XMLWriterBase.prototype.indent = function(node, options, level) {
	      var indentLevel;
	      if (!options.pretty || options.suppressPrettyCount) {
	        return '';
	      } else if (options.pretty) {
	        indentLevel = (level || 0) + options.offset + 1;
	        if (indentLevel > 0) {
	          return new Array(indentLevel).join(options.indent);
	        }
	      }
	      return '';
	    };

	    XMLWriterBase.prototype.endline = function(node, options, level) {
	      if (!options.pretty || options.suppressPrettyCount) {
	        return '';
	      } else {
	        return options.newline;
	      }
	    };

	    XMLWriterBase.prototype.attribute = function(att, options, level) {
	      var r;
	      this.openAttribute(att, options, level);
	      r = ' ' + att.name + '="' + att.value + '"';
	      this.closeAttribute(att, options, level);
	      return r;
	    };

	    XMLWriterBase.prototype.cdata = function(node, options, level) {
	      var r;
	      this.openNode(node, options, level);
	      options.state = WriterState.OpenTag;
	      r = this.indent(node, options, level) + '<![CDATA[';
	      options.state = WriterState.InsideTag;
	      r += node.value;
	      options.state = WriterState.CloseTag;
	      r += ']]>' + this.endline(node, options, level);
	      options.state = WriterState.None;
	      this.closeNode(node, options, level);
	      return r;
	    };

	    XMLWriterBase.prototype.comment = function(node, options, level) {
	      var r;
	      this.openNode(node, options, level);
	      options.state = WriterState.OpenTag;
	      r = this.indent(node, options, level) + '<!-- ';
	      options.state = WriterState.InsideTag;
	      r += node.value;
	      options.state = WriterState.CloseTag;
	      r += ' -->' + this.endline(node, options, level);
	      options.state = WriterState.None;
	      this.closeNode(node, options, level);
	      return r;
	    };

	    XMLWriterBase.prototype.declaration = function(node, options, level) {
	      var r;
	      this.openNode(node, options, level);
	      options.state = WriterState.OpenTag;
	      r = this.indent(node, options, level) + '<?xml';
	      options.state = WriterState.InsideTag;
	      r += ' version="' + node.version + '"';
	      if (node.encoding != null) {
	        r += ' encoding="' + node.encoding + '"';
	      }
	      if (node.standalone != null) {
	        r += ' standalone="' + node.standalone + '"';
	      }
	      options.state = WriterState.CloseTag;
	      r += options.spaceBeforeSlash + '?>';
	      r += this.endline(node, options, level);
	      options.state = WriterState.None;
	      this.closeNode(node, options, level);
	      return r;
	    };

	    XMLWriterBase.prototype.docType = function(node, options, level) {
	      var child, i, len, r, ref;
	      level || (level = 0);
	      this.openNode(node, options, level);
	      options.state = WriterState.OpenTag;
	      r = this.indent(node, options, level);
	      r += '<!DOCTYPE ' + node.root().name;
	      if (node.pubID && node.sysID) {
	        r += ' PUBLIC "' + node.pubID + '" "' + node.sysID + '"';
	      } else if (node.sysID) {
	        r += ' SYSTEM "' + node.sysID + '"';
	      }
	      if (node.children.length > 0) {
	        r += ' [';
	        r += this.endline(node, options, level);
	        options.state = WriterState.InsideTag;
	        ref = node.children;
	        for (i = 0, len = ref.length; i < len; i++) {
	          child = ref[i];
	          r += this.writeChildNode(child, options, level + 1);
	        }
	        options.state = WriterState.CloseTag;
	        r += ']';
	      }
	      options.state = WriterState.CloseTag;
	      r += options.spaceBeforeSlash + '>';
	      r += this.endline(node, options, level);
	      options.state = WriterState.None;
	      this.closeNode(node, options, level);
	      return r;
	    };

	    XMLWriterBase.prototype.element = function(node, options, level) {
	      var att, child, childNodeCount, firstChildNode, i, j, len, len1, name, prettySuppressed, r, ref, ref1, ref2;
	      level || (level = 0);
	      prettySuppressed = false;
	      r = '';
	      this.openNode(node, options, level);
	      options.state = WriterState.OpenTag;
	      r += this.indent(node, options, level) + '<' + node.name;
	      ref = node.attribs;
	      for (name in ref) {
	        if (!hasProp.call(ref, name)) continue;
	        att = ref[name];
	        r += this.attribute(att, options, level);
	      }
	      childNodeCount = node.children.length;
	      firstChildNode = childNodeCount === 0 ? null : node.children[0];
	      if (childNodeCount === 0 || node.children.every(function(e) {
	        return (e.type === NodeType.Text || e.type === NodeType.Raw) && e.value === '';
	      })) {
	        if (options.allowEmpty) {
	          r += '>';
	          options.state = WriterState.CloseTag;
	          r += '</' + node.name + '>' + this.endline(node, options, level);
	        } else {
	          options.state = WriterState.CloseTag;
	          r += options.spaceBeforeSlash + '/>' + this.endline(node, options, level);
	        }
	      } else if (options.pretty && childNodeCount === 1 && (firstChildNode.type === NodeType.Text || firstChildNode.type === NodeType.Raw) && (firstChildNode.value != null)) {
	        r += '>';
	        options.state = WriterState.InsideTag;
	        options.suppressPrettyCount++;
	        prettySuppressed = true;
	        r += this.writeChildNode(firstChildNode, options, level + 1);
	        options.suppressPrettyCount--;
	        prettySuppressed = false;
	        options.state = WriterState.CloseTag;
	        r += '</' + node.name + '>' + this.endline(node, options, level);
	      } else {
	        if (options.dontPrettyTextNodes) {
	          ref1 = node.children;
	          for (i = 0, len = ref1.length; i < len; i++) {
	            child = ref1[i];
	            if ((child.type === NodeType.Text || child.type === NodeType.Raw) && (child.value != null)) {
	              options.suppressPrettyCount++;
	              prettySuppressed = true;
	              break;
	            }
	          }
	        }
	        r += '>' + this.endline(node, options, level);
	        options.state = WriterState.InsideTag;
	        ref2 = node.children;
	        for (j = 0, len1 = ref2.length; j < len1; j++) {
	          child = ref2[j];
	          r += this.writeChildNode(child, options, level + 1);
	        }
	        options.state = WriterState.CloseTag;
	        r += this.indent(node, options, level) + '</' + node.name + '>';
	        if (prettySuppressed) {
	          options.suppressPrettyCount--;
	        }
	        r += this.endline(node, options, level);
	        options.state = WriterState.None;
	      }
	      this.closeNode(node, options, level);
	      return r;
	    };

	    XMLWriterBase.prototype.writeChildNode = function(node, options, level) {
	      switch (node.type) {
	        case NodeType.CData:
	          return this.cdata(node, options, level);
	        case NodeType.Comment:
	          return this.comment(node, options, level);
	        case NodeType.Element:
	          return this.element(node, options, level);
	        case NodeType.Raw:
	          return this.raw(node, options, level);
	        case NodeType.Text:
	          return this.text(node, options, level);
	        case NodeType.ProcessingInstruction:
	          return this.processingInstruction(node, options, level);
	        case NodeType.Dummy:
	          return '';
	        case NodeType.Declaration:
	          return this.declaration(node, options, level);
	        case NodeType.DocType:
	          return this.docType(node, options, level);
	        case NodeType.AttributeDeclaration:
	          return this.dtdAttList(node, options, level);
	        case NodeType.ElementDeclaration:
	          return this.dtdElement(node, options, level);
	        case NodeType.EntityDeclaration:
	          return this.dtdEntity(node, options, level);
	        case NodeType.NotationDeclaration:
	          return this.dtdNotation(node, options, level);
	        default:
	          throw new Error("Unknown XML node type: " + node.constructor.name);
	      }
	    };

	    XMLWriterBase.prototype.processingInstruction = function(node, options, level) {
	      var r;
	      this.openNode(node, options, level);
	      options.state = WriterState.OpenTag;
	      r = this.indent(node, options, level) + '<?';
	      options.state = WriterState.InsideTag;
	      r += node.target;
	      if (node.value) {
	        r += ' ' + node.value;
	      }
	      options.state = WriterState.CloseTag;
	      r += options.spaceBeforeSlash + '?>';
	      r += this.endline(node, options, level);
	      options.state = WriterState.None;
	      this.closeNode(node, options, level);
	      return r;
	    };

	    XMLWriterBase.prototype.raw = function(node, options, level) {
	      var r;
	      this.openNode(node, options, level);
	      options.state = WriterState.OpenTag;
	      r = this.indent(node, options, level);
	      options.state = WriterState.InsideTag;
	      r += node.value;
	      options.state = WriterState.CloseTag;
	      r += this.endline(node, options, level);
	      options.state = WriterState.None;
	      this.closeNode(node, options, level);
	      return r;
	    };

	    XMLWriterBase.prototype.text = function(node, options, level) {
	      var r;
	      this.openNode(node, options, level);
	      options.state = WriterState.OpenTag;
	      r = this.indent(node, options, level);
	      options.state = WriterState.InsideTag;
	      r += node.value;
	      options.state = WriterState.CloseTag;
	      r += this.endline(node, options, level);
	      options.state = WriterState.None;
	      this.closeNode(node, options, level);
	      return r;
	    };

	    XMLWriterBase.prototype.dtdAttList = function(node, options, level) {
	      var r;
	      this.openNode(node, options, level);
	      options.state = WriterState.OpenTag;
	      r = this.indent(node, options, level) + '<!ATTLIST';
	      options.state = WriterState.InsideTag;
	      r += ' ' + node.elementName + ' ' + node.attributeName + ' ' + node.attributeType;
	      if (node.defaultValueType !== '#DEFAULT') {
	        r += ' ' + node.defaultValueType;
	      }
	      if (node.defaultValue) {
	        r += ' "' + node.defaultValue + '"';
	      }
	      options.state = WriterState.CloseTag;
	      r += options.spaceBeforeSlash + '>' + this.endline(node, options, level);
	      options.state = WriterState.None;
	      this.closeNode(node, options, level);
	      return r;
	    };

	    XMLWriterBase.prototype.dtdElement = function(node, options, level) {
	      var r;
	      this.openNode(node, options, level);
	      options.state = WriterState.OpenTag;
	      r = this.indent(node, options, level) + '<!ELEMENT';
	      options.state = WriterState.InsideTag;
	      r += ' ' + node.name + ' ' + node.value;
	      options.state = WriterState.CloseTag;
	      r += options.spaceBeforeSlash + '>' + this.endline(node, options, level);
	      options.state = WriterState.None;
	      this.closeNode(node, options, level);
	      return r;
	    };

	    XMLWriterBase.prototype.dtdEntity = function(node, options, level) {
	      var r;
	      this.openNode(node, options, level);
	      options.state = WriterState.OpenTag;
	      r = this.indent(node, options, level) + '<!ENTITY';
	      options.state = WriterState.InsideTag;
	      if (node.pe) {
	        r += ' %';
	      }
	      r += ' ' + node.name;
	      if (node.value) {
	        r += ' "' + node.value + '"';
	      } else {
	        if (node.pubID && node.sysID) {
	          r += ' PUBLIC "' + node.pubID + '" "' + node.sysID + '"';
	        } else if (node.sysID) {
	          r += ' SYSTEM "' + node.sysID + '"';
	        }
	        if (node.nData) {
	          r += ' NDATA ' + node.nData;
	        }
	      }
	      options.state = WriterState.CloseTag;
	      r += options.spaceBeforeSlash + '>' + this.endline(node, options, level);
	      options.state = WriterState.None;
	      this.closeNode(node, options, level);
	      return r;
	    };

	    XMLWriterBase.prototype.dtdNotation = function(node, options, level) {
	      var r;
	      this.openNode(node, options, level);
	      options.state = WriterState.OpenTag;
	      r = this.indent(node, options, level) + '<!NOTATION';
	      options.state = WriterState.InsideTag;
	      r += ' ' + node.name;
	      if (node.pubID && node.sysID) {
	        r += ' PUBLIC "' + node.pubID + '" "' + node.sysID + '"';
	      } else if (node.pubID) {
	        r += ' PUBLIC "' + node.pubID + '"';
	      } else if (node.sysID) {
	        r += ' SYSTEM "' + node.sysID + '"';
	      }
	      options.state = WriterState.CloseTag;
	      r += options.spaceBeforeSlash + '>' + this.endline(node, options, level);
	      options.state = WriterState.None;
	      this.closeNode(node, options, level);
	      return r;
	    };

	    XMLWriterBase.prototype.openNode = function(node, options, level) {};

	    XMLWriterBase.prototype.closeNode = function(node, options, level) {};

	    XMLWriterBase.prototype.openAttribute = function(att, options, level) {};

	    XMLWriterBase.prototype.closeAttribute = function(att, options, level) {};

	    return XMLWriterBase;

	  })();

	}).call(commonjsGlobal);
	return XMLWriterBase.exports;
}

var hasRequiredXMLStringWriter;

function requireXMLStringWriter () {
	if (hasRequiredXMLStringWriter) return XMLStringWriter.exports;
	hasRequiredXMLStringWriter = 1;
	// Generated by CoffeeScript 1.12.7
	(function() {
	  var XMLWriterBase,
	    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	    hasProp = {}.hasOwnProperty;

	  XMLWriterBase = requireXMLWriterBase();

	  XMLStringWriter.exports = (function(superClass) {
	    extend(XMLStringWriter, superClass);

	    function XMLStringWriter(options) {
	      XMLStringWriter.__super__.constructor.call(this, options);
	    }

	    XMLStringWriter.prototype.document = function(doc, options) {
	      var child, i, len, r, ref;
	      options = this.filterOptions(options);
	      r = '';
	      ref = doc.children;
	      for (i = 0, len = ref.length; i < len; i++) {
	        child = ref[i];
	        r += this.writeChildNode(child, options, 0);
	      }
	      if (options.pretty && r.slice(-options.newline.length) === options.newline) {
	        r = r.slice(0, -options.newline.length);
	      }
	      return r;
	    };

	    return XMLStringWriter;

	  })(XMLWriterBase);

	}).call(commonjsGlobal);
	return XMLStringWriter.exports;
}

var hasRequiredXMLDocument;

function requireXMLDocument () {
	if (hasRequiredXMLDocument) return XMLDocument.exports;
	hasRequiredXMLDocument = 1;
	// Generated by CoffeeScript 1.12.7
	(function() {
	  var NodeType, XMLDOMConfiguration, XMLDOMImplementation, XMLNode, XMLStringWriter, XMLStringifier, isPlainObject,
	    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	    hasProp = {}.hasOwnProperty;

	  isPlainObject = requireUtility().isPlainObject;

	  XMLDOMImplementation = requireXMLDOMImplementation();

	  XMLDOMConfiguration = requireXMLDOMConfiguration();

	  XMLNode = requireXMLNode();

	  NodeType = requireNodeType();

	  XMLStringifier = requireXMLStringifier();

	  XMLStringWriter = requireXMLStringWriter();

	  XMLDocument.exports = (function(superClass) {
	    extend(XMLDocument, superClass);

	    function XMLDocument(options) {
	      XMLDocument.__super__.constructor.call(this, null);
	      this.name = "#document";
	      this.type = NodeType.Document;
	      this.documentURI = null;
	      this.domConfig = new XMLDOMConfiguration();
	      options || (options = {});
	      if (!options.writer) {
	        options.writer = new XMLStringWriter();
	      }
	      this.options = options;
	      this.stringify = new XMLStringifier(options);
	    }

	    Object.defineProperty(XMLDocument.prototype, 'implementation', {
	      value: new XMLDOMImplementation()
	    });

	    Object.defineProperty(XMLDocument.prototype, 'doctype', {
	      get: function() {
	        var child, i, len, ref;
	        ref = this.children;
	        for (i = 0, len = ref.length; i < len; i++) {
	          child = ref[i];
	          if (child.type === NodeType.DocType) {
	            return child;
	          }
	        }
	        return null;
	      }
	    });

	    Object.defineProperty(XMLDocument.prototype, 'documentElement', {
	      get: function() {
	        return this.rootObject || null;
	      }
	    });

	    Object.defineProperty(XMLDocument.prototype, 'inputEncoding', {
	      get: function() {
	        return null;
	      }
	    });

	    Object.defineProperty(XMLDocument.prototype, 'strictErrorChecking', {
	      get: function() {
	        return false;
	      }
	    });

	    Object.defineProperty(XMLDocument.prototype, 'xmlEncoding', {
	      get: function() {
	        if (this.children.length !== 0 && this.children[0].type === NodeType.Declaration) {
	          return this.children[0].encoding;
	        } else {
	          return null;
	        }
	      }
	    });

	    Object.defineProperty(XMLDocument.prototype, 'xmlStandalone', {
	      get: function() {
	        if (this.children.length !== 0 && this.children[0].type === NodeType.Declaration) {
	          return this.children[0].standalone === 'yes';
	        } else {
	          return false;
	        }
	      }
	    });

	    Object.defineProperty(XMLDocument.prototype, 'xmlVersion', {
	      get: function() {
	        if (this.children.length !== 0 && this.children[0].type === NodeType.Declaration) {
	          return this.children[0].version;
	        } else {
	          return "1.0";
	        }
	      }
	    });

	    Object.defineProperty(XMLDocument.prototype, 'URL', {
	      get: function() {
	        return this.documentURI;
	      }
	    });

	    Object.defineProperty(XMLDocument.prototype, 'origin', {
	      get: function() {
	        return null;
	      }
	    });

	    Object.defineProperty(XMLDocument.prototype, 'compatMode', {
	      get: function() {
	        return null;
	      }
	    });

	    Object.defineProperty(XMLDocument.prototype, 'characterSet', {
	      get: function() {
	        return null;
	      }
	    });

	    Object.defineProperty(XMLDocument.prototype, 'contentType', {
	      get: function() {
	        return null;
	      }
	    });

	    XMLDocument.prototype.end = function(writer) {
	      var writerOptions;
	      writerOptions = {};
	      if (!writer) {
	        writer = this.options.writer;
	      } else if (isPlainObject(writer)) {
	        writerOptions = writer;
	        writer = this.options.writer;
	      }
	      return writer.document(this, writer.filterOptions(writerOptions));
	    };

	    XMLDocument.prototype.toString = function(options) {
	      return this.options.writer.document(this, this.options.writer.filterOptions(options));
	    };

	    XMLDocument.prototype.createElement = function(tagName) {
	      throw new Error("This DOM method is not implemented." + this.debugInfo());
	    };

	    XMLDocument.prototype.createDocumentFragment = function() {
	      throw new Error("This DOM method is not implemented." + this.debugInfo());
	    };

	    XMLDocument.prototype.createTextNode = function(data) {
	      throw new Error("This DOM method is not implemented." + this.debugInfo());
	    };

	    XMLDocument.prototype.createComment = function(data) {
	      throw new Error("This DOM method is not implemented." + this.debugInfo());
	    };

	    XMLDocument.prototype.createCDATASection = function(data) {
	      throw new Error("This DOM method is not implemented." + this.debugInfo());
	    };

	    XMLDocument.prototype.createProcessingInstruction = function(target, data) {
	      throw new Error("This DOM method is not implemented." + this.debugInfo());
	    };

	    XMLDocument.prototype.createAttribute = function(name) {
	      throw new Error("This DOM method is not implemented." + this.debugInfo());
	    };

	    XMLDocument.prototype.createEntityReference = function(name) {
	      throw new Error("This DOM method is not implemented." + this.debugInfo());
	    };

	    XMLDocument.prototype.getElementsByTagName = function(tagname) {
	      throw new Error("This DOM method is not implemented." + this.debugInfo());
	    };

	    XMLDocument.prototype.importNode = function(importedNode, deep) {
	      throw new Error("This DOM method is not implemented." + this.debugInfo());
	    };

	    XMLDocument.prototype.createElementNS = function(namespaceURI, qualifiedName) {
	      throw new Error("This DOM method is not implemented." + this.debugInfo());
	    };

	    XMLDocument.prototype.createAttributeNS = function(namespaceURI, qualifiedName) {
	      throw new Error("This DOM method is not implemented." + this.debugInfo());
	    };

	    XMLDocument.prototype.getElementsByTagNameNS = function(namespaceURI, localName) {
	      throw new Error("This DOM method is not implemented." + this.debugInfo());
	    };

	    XMLDocument.prototype.getElementById = function(elementId) {
	      throw new Error("This DOM method is not implemented." + this.debugInfo());
	    };

	    XMLDocument.prototype.adoptNode = function(source) {
	      throw new Error("This DOM method is not implemented." + this.debugInfo());
	    };

	    XMLDocument.prototype.normalizeDocument = function() {
	      throw new Error("This DOM method is not implemented." + this.debugInfo());
	    };

	    XMLDocument.prototype.renameNode = function(node, namespaceURI, qualifiedName) {
	      throw new Error("This DOM method is not implemented." + this.debugInfo());
	    };

	    XMLDocument.prototype.getElementsByClassName = function(classNames) {
	      throw new Error("This DOM method is not implemented." + this.debugInfo());
	    };

	    XMLDocument.prototype.createEvent = function(eventInterface) {
	      throw new Error("This DOM method is not implemented." + this.debugInfo());
	    };

	    XMLDocument.prototype.createRange = function() {
	      throw new Error("This DOM method is not implemented." + this.debugInfo());
	    };

	    XMLDocument.prototype.createNodeIterator = function(root, whatToShow, filter) {
	      throw new Error("This DOM method is not implemented." + this.debugInfo());
	    };

	    XMLDocument.prototype.createTreeWalker = function(root, whatToShow, filter) {
	      throw new Error("This DOM method is not implemented." + this.debugInfo());
	    };

	    return XMLDocument;

	  })(XMLNode);

	}).call(commonjsGlobal);
	return XMLDocument.exports;
}

var XMLDocumentCB = {exports: {}};

var hasRequiredXMLDocumentCB;

function requireXMLDocumentCB () {
	if (hasRequiredXMLDocumentCB) return XMLDocumentCB.exports;
	hasRequiredXMLDocumentCB = 1;
	// Generated by CoffeeScript 1.12.7
	(function() {
	  var NodeType, WriterState, XMLAttribute, XMLCData, XMLComment, XMLDTDAttList, XMLDTDElement, XMLDTDEntity, XMLDTDNotation, XMLDeclaration, XMLDocType, XMLDocument, XMLElement, XMLProcessingInstruction, XMLRaw, XMLStringWriter, XMLStringifier, XMLText, getValue, isFunction, isObject, isPlainObject, ref,
	    hasProp = {}.hasOwnProperty;

	  ref = requireUtility(), isObject = ref.isObject, isFunction = ref.isFunction, isPlainObject = ref.isPlainObject, getValue = ref.getValue;

	  NodeType = requireNodeType();

	  XMLDocument = requireXMLDocument();

	  XMLElement = requireXMLElement();

	  XMLCData = requireXMLCData();

	  XMLComment = requireXMLComment();

	  XMLRaw = requireXMLRaw();

	  XMLText = requireXMLText();

	  XMLProcessingInstruction = requireXMLProcessingInstruction();

	  XMLDeclaration = requireXMLDeclaration();

	  XMLDocType = requireXMLDocType();

	  XMLDTDAttList = requireXMLDTDAttList();

	  XMLDTDEntity = requireXMLDTDEntity();

	  XMLDTDElement = requireXMLDTDElement();

	  XMLDTDNotation = requireXMLDTDNotation();

	  XMLAttribute = requireXMLAttribute();

	  XMLStringifier = requireXMLStringifier();

	  XMLStringWriter = requireXMLStringWriter();

	  WriterState = requireWriterState();

	  XMLDocumentCB.exports = (function() {
	    function XMLDocumentCB(options, onData, onEnd) {
	      var writerOptions;
	      this.name = "?xml";
	      this.type = NodeType.Document;
	      options || (options = {});
	      writerOptions = {};
	      if (!options.writer) {
	        options.writer = new XMLStringWriter();
	      } else if (isPlainObject(options.writer)) {
	        writerOptions = options.writer;
	        options.writer = new XMLStringWriter();
	      }
	      this.options = options;
	      this.writer = options.writer;
	      this.writerOptions = this.writer.filterOptions(writerOptions);
	      this.stringify = new XMLStringifier(options);
	      this.onDataCallback = onData || function() {};
	      this.onEndCallback = onEnd || function() {};
	      this.currentNode = null;
	      this.currentLevel = -1;
	      this.openTags = {};
	      this.documentStarted = false;
	      this.documentCompleted = false;
	      this.root = null;
	    }

	    XMLDocumentCB.prototype.createChildNode = function(node) {
	      var att, attName, attributes, child, i, len, ref1, ref2;
	      switch (node.type) {
	        case NodeType.CData:
	          this.cdata(node.value);
	          break;
	        case NodeType.Comment:
	          this.comment(node.value);
	          break;
	        case NodeType.Element:
	          attributes = {};
	          ref1 = node.attribs;
	          for (attName in ref1) {
	            if (!hasProp.call(ref1, attName)) continue;
	            att = ref1[attName];
	            attributes[attName] = att.value;
	          }
	          this.node(node.name, attributes);
	          break;
	        case NodeType.Dummy:
	          this.dummy();
	          break;
	        case NodeType.Raw:
	          this.raw(node.value);
	          break;
	        case NodeType.Text:
	          this.text(node.value);
	          break;
	        case NodeType.ProcessingInstruction:
	          this.instruction(node.target, node.value);
	          break;
	        default:
	          throw new Error("This XML node type is not supported in a JS object: " + node.constructor.name);
	      }
	      ref2 = node.children;
	      for (i = 0, len = ref2.length; i < len; i++) {
	        child = ref2[i];
	        this.createChildNode(child);
	        if (child.type === NodeType.Element) {
	          this.up();
	        }
	      }
	      return this;
	    };

	    XMLDocumentCB.prototype.dummy = function() {
	      return this;
	    };

	    XMLDocumentCB.prototype.node = function(name, attributes, text) {
	      var ref1;
	      if (name == null) {
	        throw new Error("Missing node name.");
	      }
	      if (this.root && this.currentLevel === -1) {
	        throw new Error("Document can only have one root node. " + this.debugInfo(name));
	      }
	      this.openCurrent();
	      name = getValue(name);
	      if (attributes == null) {
	        attributes = {};
	      }
	      attributes = getValue(attributes);
	      if (!isObject(attributes)) {
	        ref1 = [attributes, text], text = ref1[0], attributes = ref1[1];
	      }
	      this.currentNode = new XMLElement(this, name, attributes);
	      this.currentNode.children = false;
	      this.currentLevel++;
	      this.openTags[this.currentLevel] = this.currentNode;
	      if (text != null) {
	        this.text(text);
	      }
	      return this;
	    };

	    XMLDocumentCB.prototype.element = function(name, attributes, text) {
	      var child, i, len, oldValidationFlag, ref1, root;
	      if (this.currentNode && this.currentNode.type === NodeType.DocType) {
	        this.dtdElement.apply(this, arguments);
	      } else {
	        if (Array.isArray(name) || isObject(name) || isFunction(name)) {
	          oldValidationFlag = this.options.noValidation;
	          this.options.noValidation = true;
	          root = new XMLDocument(this.options).element('TEMP_ROOT');
	          root.element(name);
	          this.options.noValidation = oldValidationFlag;
	          ref1 = root.children;
	          for (i = 0, len = ref1.length; i < len; i++) {
	            child = ref1[i];
	            this.createChildNode(child);
	            if (child.type === NodeType.Element) {
	              this.up();
	            }
	          }
	        } else {
	          this.node(name, attributes, text);
	        }
	      }
	      return this;
	    };

	    XMLDocumentCB.prototype.attribute = function(name, value) {
	      var attName, attValue;
	      if (!this.currentNode || this.currentNode.children) {
	        throw new Error("att() can only be used immediately after an ele() call in callback mode. " + this.debugInfo(name));
	      }
	      if (name != null) {
	        name = getValue(name);
	      }
	      if (isObject(name)) {
	        for (attName in name) {
	          if (!hasProp.call(name, attName)) continue;
	          attValue = name[attName];
	          this.attribute(attName, attValue);
	        }
	      } else {
	        if (isFunction(value)) {
	          value = value.apply();
	        }
	        if (this.options.keepNullAttributes && (value == null)) {
	          this.currentNode.attribs[name] = new XMLAttribute(this, name, "");
	        } else if (value != null) {
	          this.currentNode.attribs[name] = new XMLAttribute(this, name, value);
	        }
	      }
	      return this;
	    };

	    XMLDocumentCB.prototype.text = function(value) {
	      var node;
	      this.openCurrent();
	      node = new XMLText(this, value);
	      this.onData(this.writer.text(node, this.writerOptions, this.currentLevel + 1), this.currentLevel + 1);
	      return this;
	    };

	    XMLDocumentCB.prototype.cdata = function(value) {
	      var node;
	      this.openCurrent();
	      node = new XMLCData(this, value);
	      this.onData(this.writer.cdata(node, this.writerOptions, this.currentLevel + 1), this.currentLevel + 1);
	      return this;
	    };

	    XMLDocumentCB.prototype.comment = function(value) {
	      var node;
	      this.openCurrent();
	      node = new XMLComment(this, value);
	      this.onData(this.writer.comment(node, this.writerOptions, this.currentLevel + 1), this.currentLevel + 1);
	      return this;
	    };

	    XMLDocumentCB.prototype.raw = function(value) {
	      var node;
	      this.openCurrent();
	      node = new XMLRaw(this, value);
	      this.onData(this.writer.raw(node, this.writerOptions, this.currentLevel + 1), this.currentLevel + 1);
	      return this;
	    };

	    XMLDocumentCB.prototype.instruction = function(target, value) {
	      var i, insTarget, insValue, len, node;
	      this.openCurrent();
	      if (target != null) {
	        target = getValue(target);
	      }
	      if (value != null) {
	        value = getValue(value);
	      }
	      if (Array.isArray(target)) {
	        for (i = 0, len = target.length; i < len; i++) {
	          insTarget = target[i];
	          this.instruction(insTarget);
	        }
	      } else if (isObject(target)) {
	        for (insTarget in target) {
	          if (!hasProp.call(target, insTarget)) continue;
	          insValue = target[insTarget];
	          this.instruction(insTarget, insValue);
	        }
	      } else {
	        if (isFunction(value)) {
	          value = value.apply();
	        }
	        node = new XMLProcessingInstruction(this, target, value);
	        this.onData(this.writer.processingInstruction(node, this.writerOptions, this.currentLevel + 1), this.currentLevel + 1);
	      }
	      return this;
	    };

	    XMLDocumentCB.prototype.declaration = function(version, encoding, standalone) {
	      var node;
	      this.openCurrent();
	      if (this.documentStarted) {
	        throw new Error("declaration() must be the first node.");
	      }
	      node = new XMLDeclaration(this, version, encoding, standalone);
	      this.onData(this.writer.declaration(node, this.writerOptions, this.currentLevel + 1), this.currentLevel + 1);
	      return this;
	    };

	    XMLDocumentCB.prototype.doctype = function(root, pubID, sysID) {
	      this.openCurrent();
	      if (root == null) {
	        throw new Error("Missing root node name.");
	      }
	      if (this.root) {
	        throw new Error("dtd() must come before the root node.");
	      }
	      this.currentNode = new XMLDocType(this, pubID, sysID);
	      this.currentNode.rootNodeName = root;
	      this.currentNode.children = false;
	      this.currentLevel++;
	      this.openTags[this.currentLevel] = this.currentNode;
	      return this;
	    };

	    XMLDocumentCB.prototype.dtdElement = function(name, value) {
	      var node;
	      this.openCurrent();
	      node = new XMLDTDElement(this, name, value);
	      this.onData(this.writer.dtdElement(node, this.writerOptions, this.currentLevel + 1), this.currentLevel + 1);
	      return this;
	    };

	    XMLDocumentCB.prototype.attList = function(elementName, attributeName, attributeType, defaultValueType, defaultValue) {
	      var node;
	      this.openCurrent();
	      node = new XMLDTDAttList(this, elementName, attributeName, attributeType, defaultValueType, defaultValue);
	      this.onData(this.writer.dtdAttList(node, this.writerOptions, this.currentLevel + 1), this.currentLevel + 1);
	      return this;
	    };

	    XMLDocumentCB.prototype.entity = function(name, value) {
	      var node;
	      this.openCurrent();
	      node = new XMLDTDEntity(this, false, name, value);
	      this.onData(this.writer.dtdEntity(node, this.writerOptions, this.currentLevel + 1), this.currentLevel + 1);
	      return this;
	    };

	    XMLDocumentCB.prototype.pEntity = function(name, value) {
	      var node;
	      this.openCurrent();
	      node = new XMLDTDEntity(this, true, name, value);
	      this.onData(this.writer.dtdEntity(node, this.writerOptions, this.currentLevel + 1), this.currentLevel + 1);
	      return this;
	    };

	    XMLDocumentCB.prototype.notation = function(name, value) {
	      var node;
	      this.openCurrent();
	      node = new XMLDTDNotation(this, name, value);
	      this.onData(this.writer.dtdNotation(node, this.writerOptions, this.currentLevel + 1), this.currentLevel + 1);
	      return this;
	    };

	    XMLDocumentCB.prototype.up = function() {
	      if (this.currentLevel < 0) {
	        throw new Error("The document node has no parent.");
	      }
	      if (this.currentNode) {
	        if (this.currentNode.children) {
	          this.closeNode(this.currentNode);
	        } else {
	          this.openNode(this.currentNode);
	        }
	        this.currentNode = null;
	      } else {
	        this.closeNode(this.openTags[this.currentLevel]);
	      }
	      delete this.openTags[this.currentLevel];
	      this.currentLevel--;
	      return this;
	    };

	    XMLDocumentCB.prototype.end = function() {
	      while (this.currentLevel >= 0) {
	        this.up();
	      }
	      return this.onEnd();
	    };

	    XMLDocumentCB.prototype.openCurrent = function() {
	      if (this.currentNode) {
	        this.currentNode.children = true;
	        return this.openNode(this.currentNode);
	      }
	    };

	    XMLDocumentCB.prototype.openNode = function(node) {
	      var att, chunk, name, ref1;
	      if (!node.isOpen) {
	        if (!this.root && this.currentLevel === 0 && node.type === NodeType.Element) {
	          this.root = node;
	        }
	        chunk = '';
	        if (node.type === NodeType.Element) {
	          this.writerOptions.state = WriterState.OpenTag;
	          chunk = this.writer.indent(node, this.writerOptions, this.currentLevel) + '<' + node.name;
	          ref1 = node.attribs;
	          for (name in ref1) {
	            if (!hasProp.call(ref1, name)) continue;
	            att = ref1[name];
	            chunk += this.writer.attribute(att, this.writerOptions, this.currentLevel);
	          }
	          chunk += (node.children ? '>' : '/>') + this.writer.endline(node, this.writerOptions, this.currentLevel);
	          this.writerOptions.state = WriterState.InsideTag;
	        } else {
	          this.writerOptions.state = WriterState.OpenTag;
	          chunk = this.writer.indent(node, this.writerOptions, this.currentLevel) + '<!DOCTYPE ' + node.rootNodeName;
	          if (node.pubID && node.sysID) {
	            chunk += ' PUBLIC "' + node.pubID + '" "' + node.sysID + '"';
	          } else if (node.sysID) {
	            chunk += ' SYSTEM "' + node.sysID + '"';
	          }
	          if (node.children) {
	            chunk += ' [';
	            this.writerOptions.state = WriterState.InsideTag;
	          } else {
	            this.writerOptions.state = WriterState.CloseTag;
	            chunk += '>';
	          }
	          chunk += this.writer.endline(node, this.writerOptions, this.currentLevel);
	        }
	        this.onData(chunk, this.currentLevel);
	        return node.isOpen = true;
	      }
	    };

	    XMLDocumentCB.prototype.closeNode = function(node) {
	      var chunk;
	      if (!node.isClosed) {
	        chunk = '';
	        this.writerOptions.state = WriterState.CloseTag;
	        if (node.type === NodeType.Element) {
	          chunk = this.writer.indent(node, this.writerOptions, this.currentLevel) + '</' + node.name + '>' + this.writer.endline(node, this.writerOptions, this.currentLevel);
	        } else {
	          chunk = this.writer.indent(node, this.writerOptions, this.currentLevel) + ']>' + this.writer.endline(node, this.writerOptions, this.currentLevel);
	        }
	        this.writerOptions.state = WriterState.None;
	        this.onData(chunk, this.currentLevel);
	        return node.isClosed = true;
	      }
	    };

	    XMLDocumentCB.prototype.onData = function(chunk, level) {
	      this.documentStarted = true;
	      return this.onDataCallback(chunk, level + 1);
	    };

	    XMLDocumentCB.prototype.onEnd = function() {
	      this.documentCompleted = true;
	      return this.onEndCallback();
	    };

	    XMLDocumentCB.prototype.debugInfo = function(name) {
	      if (name == null) {
	        return "";
	      } else {
	        return "node: <" + name + ">";
	      }
	    };

	    XMLDocumentCB.prototype.ele = function() {
	      return this.element.apply(this, arguments);
	    };

	    XMLDocumentCB.prototype.nod = function(name, attributes, text) {
	      return this.node(name, attributes, text);
	    };

	    XMLDocumentCB.prototype.txt = function(value) {
	      return this.text(value);
	    };

	    XMLDocumentCB.prototype.dat = function(value) {
	      return this.cdata(value);
	    };

	    XMLDocumentCB.prototype.com = function(value) {
	      return this.comment(value);
	    };

	    XMLDocumentCB.prototype.ins = function(target, value) {
	      return this.instruction(target, value);
	    };

	    XMLDocumentCB.prototype.dec = function(version, encoding, standalone) {
	      return this.declaration(version, encoding, standalone);
	    };

	    XMLDocumentCB.prototype.dtd = function(root, pubID, sysID) {
	      return this.doctype(root, pubID, sysID);
	    };

	    XMLDocumentCB.prototype.e = function(name, attributes, text) {
	      return this.element(name, attributes, text);
	    };

	    XMLDocumentCB.prototype.n = function(name, attributes, text) {
	      return this.node(name, attributes, text);
	    };

	    XMLDocumentCB.prototype.t = function(value) {
	      return this.text(value);
	    };

	    XMLDocumentCB.prototype.d = function(value) {
	      return this.cdata(value);
	    };

	    XMLDocumentCB.prototype.c = function(value) {
	      return this.comment(value);
	    };

	    XMLDocumentCB.prototype.r = function(value) {
	      return this.raw(value);
	    };

	    XMLDocumentCB.prototype.i = function(target, value) {
	      return this.instruction(target, value);
	    };

	    XMLDocumentCB.prototype.att = function() {
	      if (this.currentNode && this.currentNode.type === NodeType.DocType) {
	        return this.attList.apply(this, arguments);
	      } else {
	        return this.attribute.apply(this, arguments);
	      }
	    };

	    XMLDocumentCB.prototype.a = function() {
	      if (this.currentNode && this.currentNode.type === NodeType.DocType) {
	        return this.attList.apply(this, arguments);
	      } else {
	        return this.attribute.apply(this, arguments);
	      }
	    };

	    XMLDocumentCB.prototype.ent = function(name, value) {
	      return this.entity(name, value);
	    };

	    XMLDocumentCB.prototype.pent = function(name, value) {
	      return this.pEntity(name, value);
	    };

	    XMLDocumentCB.prototype.not = function(name, value) {
	      return this.notation(name, value);
	    };

	    return XMLDocumentCB;

	  })();

	}).call(commonjsGlobal);
	return XMLDocumentCB.exports;
}

var XMLStreamWriter = {exports: {}};

var hasRequiredXMLStreamWriter;

function requireXMLStreamWriter () {
	if (hasRequiredXMLStreamWriter) return XMLStreamWriter.exports;
	hasRequiredXMLStreamWriter = 1;
	// Generated by CoffeeScript 1.12.7
	(function() {
	  var NodeType, WriterState, XMLWriterBase,
	    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	    hasProp = {}.hasOwnProperty;

	  NodeType = requireNodeType();

	  XMLWriterBase = requireXMLWriterBase();

	  WriterState = requireWriterState();

	  XMLStreamWriter.exports = (function(superClass) {
	    extend(XMLStreamWriter, superClass);

	    function XMLStreamWriter(stream, options) {
	      this.stream = stream;
	      XMLStreamWriter.__super__.constructor.call(this, options);
	    }

	    XMLStreamWriter.prototype.endline = function(node, options, level) {
	      if (node.isLastRootNode && options.state === WriterState.CloseTag) {
	        return '';
	      } else {
	        return XMLStreamWriter.__super__.endline.call(this, node, options, level);
	      }
	    };

	    XMLStreamWriter.prototype.document = function(doc, options) {
	      var child, i, j, k, len, len1, ref, ref1, results;
	      ref = doc.children;
	      for (i = j = 0, len = ref.length; j < len; i = ++j) {
	        child = ref[i];
	        child.isLastRootNode = i === doc.children.length - 1;
	      }
	      options = this.filterOptions(options);
	      ref1 = doc.children;
	      results = [];
	      for (k = 0, len1 = ref1.length; k < len1; k++) {
	        child = ref1[k];
	        results.push(this.writeChildNode(child, options, 0));
	      }
	      return results;
	    };

	    XMLStreamWriter.prototype.attribute = function(att, options, level) {
	      return this.stream.write(XMLStreamWriter.__super__.attribute.call(this, att, options, level));
	    };

	    XMLStreamWriter.prototype.cdata = function(node, options, level) {
	      return this.stream.write(XMLStreamWriter.__super__.cdata.call(this, node, options, level));
	    };

	    XMLStreamWriter.prototype.comment = function(node, options, level) {
	      return this.stream.write(XMLStreamWriter.__super__.comment.call(this, node, options, level));
	    };

	    XMLStreamWriter.prototype.declaration = function(node, options, level) {
	      return this.stream.write(XMLStreamWriter.__super__.declaration.call(this, node, options, level));
	    };

	    XMLStreamWriter.prototype.docType = function(node, options, level) {
	      var child, j, len, ref;
	      level || (level = 0);
	      this.openNode(node, options, level);
	      options.state = WriterState.OpenTag;
	      this.stream.write(this.indent(node, options, level));
	      this.stream.write('<!DOCTYPE ' + node.root().name);
	      if (node.pubID && node.sysID) {
	        this.stream.write(' PUBLIC "' + node.pubID + '" "' + node.sysID + '"');
	      } else if (node.sysID) {
	        this.stream.write(' SYSTEM "' + node.sysID + '"');
	      }
	      if (node.children.length > 0) {
	        this.stream.write(' [');
	        this.stream.write(this.endline(node, options, level));
	        options.state = WriterState.InsideTag;
	        ref = node.children;
	        for (j = 0, len = ref.length; j < len; j++) {
	          child = ref[j];
	          this.writeChildNode(child, options, level + 1);
	        }
	        options.state = WriterState.CloseTag;
	        this.stream.write(']');
	      }
	      options.state = WriterState.CloseTag;
	      this.stream.write(options.spaceBeforeSlash + '>');
	      this.stream.write(this.endline(node, options, level));
	      options.state = WriterState.None;
	      return this.closeNode(node, options, level);
	    };

	    XMLStreamWriter.prototype.element = function(node, options, level) {
	      var att, child, childNodeCount, firstChildNode, j, len, name, ref, ref1;
	      level || (level = 0);
	      this.openNode(node, options, level);
	      options.state = WriterState.OpenTag;
	      this.stream.write(this.indent(node, options, level) + '<' + node.name);
	      ref = node.attribs;
	      for (name in ref) {
	        if (!hasProp.call(ref, name)) continue;
	        att = ref[name];
	        this.attribute(att, options, level);
	      }
	      childNodeCount = node.children.length;
	      firstChildNode = childNodeCount === 0 ? null : node.children[0];
	      if (childNodeCount === 0 || node.children.every(function(e) {
	        return (e.type === NodeType.Text || e.type === NodeType.Raw) && e.value === '';
	      })) {
	        if (options.allowEmpty) {
	          this.stream.write('>');
	          options.state = WriterState.CloseTag;
	          this.stream.write('</' + node.name + '>');
	        } else {
	          options.state = WriterState.CloseTag;
	          this.stream.write(options.spaceBeforeSlash + '/>');
	        }
	      } else if (options.pretty && childNodeCount === 1 && (firstChildNode.type === NodeType.Text || firstChildNode.type === NodeType.Raw) && (firstChildNode.value != null)) {
	        this.stream.write('>');
	        options.state = WriterState.InsideTag;
	        options.suppressPrettyCount++;
	        this.writeChildNode(firstChildNode, options, level + 1);
	        options.suppressPrettyCount--;
	        options.state = WriterState.CloseTag;
	        this.stream.write('</' + node.name + '>');
	      } else {
	        this.stream.write('>' + this.endline(node, options, level));
	        options.state = WriterState.InsideTag;
	        ref1 = node.children;
	        for (j = 0, len = ref1.length; j < len; j++) {
	          child = ref1[j];
	          this.writeChildNode(child, options, level + 1);
	        }
	        options.state = WriterState.CloseTag;
	        this.stream.write(this.indent(node, options, level) + '</' + node.name + '>');
	      }
	      this.stream.write(this.endline(node, options, level));
	      options.state = WriterState.None;
	      return this.closeNode(node, options, level);
	    };

	    XMLStreamWriter.prototype.processingInstruction = function(node, options, level) {
	      return this.stream.write(XMLStreamWriter.__super__.processingInstruction.call(this, node, options, level));
	    };

	    XMLStreamWriter.prototype.raw = function(node, options, level) {
	      return this.stream.write(XMLStreamWriter.__super__.raw.call(this, node, options, level));
	    };

	    XMLStreamWriter.prototype.text = function(node, options, level) {
	      return this.stream.write(XMLStreamWriter.__super__.text.call(this, node, options, level));
	    };

	    XMLStreamWriter.prototype.dtdAttList = function(node, options, level) {
	      return this.stream.write(XMLStreamWriter.__super__.dtdAttList.call(this, node, options, level));
	    };

	    XMLStreamWriter.prototype.dtdElement = function(node, options, level) {
	      return this.stream.write(XMLStreamWriter.__super__.dtdElement.call(this, node, options, level));
	    };

	    XMLStreamWriter.prototype.dtdEntity = function(node, options, level) {
	      return this.stream.write(XMLStreamWriter.__super__.dtdEntity.call(this, node, options, level));
	    };

	    XMLStreamWriter.prototype.dtdNotation = function(node, options, level) {
	      return this.stream.write(XMLStreamWriter.__super__.dtdNotation.call(this, node, options, level));
	    };

	    return XMLStreamWriter;

	  })(XMLWriterBase);

	}).call(commonjsGlobal);
	return XMLStreamWriter.exports;
}

var hasRequiredLib;

function requireLib () {
	if (hasRequiredLib) return lib;
	hasRequiredLib = 1;
	// Generated by CoffeeScript 1.12.7
	(function() {
	  var NodeType, WriterState, XMLDOMImplementation, XMLDocument, XMLDocumentCB, XMLStreamWriter, XMLStringWriter, assign, isFunction, ref;

	  ref = requireUtility(), assign = ref.assign, isFunction = ref.isFunction;

	  XMLDOMImplementation = requireXMLDOMImplementation();

	  XMLDocument = requireXMLDocument();

	  XMLDocumentCB = requireXMLDocumentCB();

	  XMLStringWriter = requireXMLStringWriter();

	  XMLStreamWriter = requireXMLStreamWriter();

	  NodeType = requireNodeType();

	  WriterState = requireWriterState();

	  lib.create = function(name, xmldec, doctype, options) {
	    var doc, root;
	    if (name == null) {
	      throw new Error("Root element needs a name.");
	    }
	    options = assign({}, xmldec, doctype, options);
	    doc = new XMLDocument(options);
	    root = doc.element(name);
	    if (!options.headless) {
	      doc.declaration(options);
	      if ((options.pubID != null) || (options.sysID != null)) {
	        doc.dtd(options);
	      }
	    }
	    return root;
	  };

	  lib.begin = function(options, onData, onEnd) {
	    var ref1;
	    if (isFunction(options)) {
	      ref1 = [options, onData], onData = ref1[0], onEnd = ref1[1];
	      options = {};
	    }
	    if (onData) {
	      return new XMLDocumentCB(options, onData, onEnd);
	    } else {
	      return new XMLDocument(options);
	    }
	  };

	  lib.stringWriter = function(options) {
	    return new XMLStringWriter(options);
	  };

	  lib.streamWriter = function(stream, options) {
	    return new XMLStreamWriter(stream, options);
	  };

	  lib.implementation = new XMLDOMImplementation();

	  lib.nodeType = NodeType;

	  lib.writerState = WriterState;

	}).call(commonjsGlobal);
	return lib;
}

var hasRequiredBuilder;

function requireBuilder () {
	if (hasRequiredBuilder) return builder;
	hasRequiredBuilder = 1;
	// Generated by CoffeeScript 1.12.7
	(function() {
	  var builder$1, defaults, escapeCDATA, requiresCDATA, wrapCDATA,
	    hasProp = {}.hasOwnProperty;

	  builder$1 = requireLib();

	  defaults = requireDefaults().defaults;

	  requiresCDATA = function(entry) {
	    return typeof entry === "string" && (entry.indexOf('&') >= 0 || entry.indexOf('>') >= 0 || entry.indexOf('<') >= 0);
	  };

	  wrapCDATA = function(entry) {
	    return "<![CDATA[" + (escapeCDATA(entry)) + "]]>";
	  };

	  escapeCDATA = function(entry) {
	    return entry.replace(']]>', ']]]]><![CDATA[>');
	  };

	  builder.Builder = (function() {
	    function Builder(opts) {
	      var key, ref, value;
	      this.options = {};
	      ref = defaults["0.2"];
	      for (key in ref) {
	        if (!hasProp.call(ref, key)) continue;
	        value = ref[key];
	        this.options[key] = value;
	      }
	      for (key in opts) {
	        if (!hasProp.call(opts, key)) continue;
	        value = opts[key];
	        this.options[key] = value;
	      }
	    }

	    Builder.prototype.buildObject = function(rootObj) {
	      var attrkey, charkey, render, rootElement, rootName;
	      attrkey = this.options.attrkey;
	      charkey = this.options.charkey;
	      if ((Object.keys(rootObj).length === 1) && (this.options.rootName === defaults['0.2'].rootName)) {
	        rootName = Object.keys(rootObj)[0];
	        rootObj = rootObj[rootName];
	      } else {
	        rootName = this.options.rootName;
	      }
	      render = (function(_this) {
	        return function(element, obj) {
	          var attr, child, entry, index, key, value;
	          if (typeof obj !== 'object') {
	            if (_this.options.cdata && requiresCDATA(obj)) {
	              element.raw(wrapCDATA(obj));
	            } else {
	              element.txt(obj);
	            }
	          } else if (Array.isArray(obj)) {
	            for (index in obj) {
	              if (!hasProp.call(obj, index)) continue;
	              child = obj[index];
	              for (key in child) {
	                entry = child[key];
	                element = render(element.ele(key), entry).up();
	              }
	            }
	          } else {
	            for (key in obj) {
	              if (!hasProp.call(obj, key)) continue;
	              child = obj[key];
	              if (key === attrkey) {
	                if (typeof child === "object") {
	                  for (attr in child) {
	                    value = child[attr];
	                    element = element.att(attr, value);
	                  }
	                }
	              } else if (key === charkey) {
	                if (_this.options.cdata && requiresCDATA(child)) {
	                  element = element.raw(wrapCDATA(child));
	                } else {
	                  element = element.txt(child);
	                }
	              } else if (Array.isArray(child)) {
	                for (index in child) {
	                  if (!hasProp.call(child, index)) continue;
	                  entry = child[index];
	                  if (typeof entry === 'string') {
	                    if (_this.options.cdata && requiresCDATA(entry)) {
	                      element = element.ele(key).raw(wrapCDATA(entry)).up();
	                    } else {
	                      element = element.ele(key, entry).up();
	                    }
	                  } else {
	                    element = render(element.ele(key), entry).up();
	                  }
	                }
	              } else if (typeof child === "object") {
	                element = render(element.ele(key), child).up();
	              } else {
	                if (typeof child === 'string' && _this.options.cdata && requiresCDATA(child)) {
	                  element = element.ele(key).raw(wrapCDATA(child)).up();
	                } else {
	                  if (child == null) {
	                    child = '';
	                  }
	                  element = element.ele(key, child.toString()).up();
	                }
	              }
	            }
	          }
	          return element;
	        };
	      })(this);
	      rootElement = builder$1.create(rootName, this.options.xmldec, this.options.doctype, {
	        headless: this.options.headless,
	        allowSurrogateChars: this.options.allowSurrogateChars
	      });
	      return render(rootElement, rootObj).end(this.options.renderOpts);
	    };

	    return Builder;

	  })();

	}).call(commonjsGlobal);
	return builder;
}

var parser = {};

var sax = {};

var hasRequiredSax;

function requireSax () {
	if (hasRequiredSax) return sax;
	hasRequiredSax = 1;
	(function (exports) {
(function (sax) { // wrapper for non-node envs
		  sax.parser = function (strict, opt) { return new SAXParser(strict, opt) };
		  sax.SAXParser = SAXParser;
		  sax.SAXStream = SAXStream;
		  sax.createStream = createStream;

		  // When we pass the MAX_BUFFER_LENGTH position, start checking for buffer overruns.
		  // When we check, schedule the next check for MAX_BUFFER_LENGTH - (max(buffer lengths)),
		  // since that's the earliest that a buffer overrun could occur.  This way, checks are
		  // as rare as required, but as often as necessary to ensure never crossing this bound.
		  // Furthermore, buffers are only tested at most once per write(), so passing a very
		  // large string into write() might have undesirable effects, but this is manageable by
		  // the caller, so it is assumed to be safe.  Thus, a call to write() may, in the extreme
		  // edge case, result in creating at most one complete copy of the string passed in.
		  // Set to Infinity to have unlimited buffers.
		  sax.MAX_BUFFER_LENGTH = 64 * 1024;

		  var buffers = [
		    'comment', 'sgmlDecl', 'textNode', 'tagName', 'doctype',
		    'procInstName', 'procInstBody', 'entity', 'attribName',
		    'attribValue', 'cdata', 'script'
		  ];

		  sax.EVENTS = [
		    'text',
		    'processinginstruction',
		    'sgmldeclaration',
		    'doctype',
		    'comment',
		    'opentagstart',
		    'attribute',
		    'opentag',
		    'closetag',
		    'opencdata',
		    'cdata',
		    'closecdata',
		    'error',
		    'end',
		    'ready',
		    'script',
		    'opennamespace',
		    'closenamespace'
		  ];

		  function SAXParser (strict, opt) {
		    if (!(this instanceof SAXParser)) {
		      return new SAXParser(strict, opt)
		    }

		    var parser = this;
		    clearBuffers(parser);
		    parser.q = parser.c = '';
		    parser.bufferCheckPosition = sax.MAX_BUFFER_LENGTH;
		    parser.opt = opt || {};
		    parser.opt.lowercase = parser.opt.lowercase || parser.opt.lowercasetags;
		    parser.looseCase = parser.opt.lowercase ? 'toLowerCase' : 'toUpperCase';
		    parser.tags = [];
		    parser.closed = parser.closedRoot = parser.sawRoot = false;
		    parser.tag = parser.error = null;
		    parser.strict = !!strict;
		    parser.noscript = !!(strict || parser.opt.noscript);
		    parser.state = S.BEGIN;
		    parser.strictEntities = parser.opt.strictEntities;
		    parser.ENTITIES = parser.strictEntities ? Object.create(sax.XML_ENTITIES) : Object.create(sax.ENTITIES);
		    parser.attribList = [];

		    // namespaces form a prototype chain.
		    // it always points at the current tag,
		    // which protos to its parent tag.
		    if (parser.opt.xmlns) {
		      parser.ns = Object.create(rootNS);
		    }

		    // mostly just for error reporting
		    parser.trackPosition = parser.opt.position !== false;
		    if (parser.trackPosition) {
		      parser.position = parser.line = parser.column = 0;
		    }
		    emit(parser, 'onready');
		  }

		  if (!Object.create) {
		    Object.create = function (o) {
		      function F () {}
		      F.prototype = o;
		      var newf = new F();
		      return newf
		    };
		  }

		  if (!Object.keys) {
		    Object.keys = function (o) {
		      var a = [];
		      for (var i in o) if (o.hasOwnProperty(i)) a.push(i);
		      return a
		    };
		  }

		  function checkBufferLength (parser) {
		    var maxAllowed = Math.max(sax.MAX_BUFFER_LENGTH, 10);
		    var maxActual = 0;
		    for (var i = 0, l = buffers.length; i < l; i++) {
		      var len = parser[buffers[i]].length;
		      if (len > maxAllowed) {
		        // Text/cdata nodes can get big, and since they're buffered,
		        // we can get here under normal conditions.
		        // Avoid issues by emitting the text node now,
		        // so at least it won't get any bigger.
		        switch (buffers[i]) {
		          case 'textNode':
		            closeText(parser);
		            break

		          case 'cdata':
		            emitNode(parser, 'oncdata', parser.cdata);
		            parser.cdata = '';
		            break

		          case 'script':
		            emitNode(parser, 'onscript', parser.script);
		            parser.script = '';
		            break

		          default:
		            error(parser, 'Max buffer length exceeded: ' + buffers[i]);
		        }
		      }
		      maxActual = Math.max(maxActual, len);
		    }
		    // schedule the next check for the earliest possible buffer overrun.
		    var m = sax.MAX_BUFFER_LENGTH - maxActual;
		    parser.bufferCheckPosition = m + parser.position;
		  }

		  function clearBuffers (parser) {
		    for (var i = 0, l = buffers.length; i < l; i++) {
		      parser[buffers[i]] = '';
		    }
		  }

		  function flushBuffers (parser) {
		    closeText(parser);
		    if (parser.cdata !== '') {
		      emitNode(parser, 'oncdata', parser.cdata);
		      parser.cdata = '';
		    }
		    if (parser.script !== '') {
		      emitNode(parser, 'onscript', parser.script);
		      parser.script = '';
		    }
		  }

		  SAXParser.prototype = {
		    end: function () { end(this); },
		    write: write,
		    resume: function () { this.error = null; return this },
		    close: function () { return this.write(null) },
		    flush: function () { flushBuffers(this); }
		  };

		  var Stream;
		  try {
		    Stream = require('stream').Stream;
		  } catch (ex) {
		    Stream = function () {};
		  }

		  var streamWraps = sax.EVENTS.filter(function (ev) {
		    return ev !== 'error' && ev !== 'end'
		  });

		  function createStream (strict, opt) {
		    return new SAXStream(strict, opt)
		  }

		  function SAXStream (strict, opt) {
		    if (!(this instanceof SAXStream)) {
		      return new SAXStream(strict, opt)
		    }

		    Stream.apply(this);

		    this._parser = new SAXParser(strict, opt);
		    this.writable = true;
		    this.readable = true;

		    var me = this;

		    this._parser.onend = function () {
		      me.emit('end');
		    };

		    this._parser.onerror = function (er) {
		      me.emit('error', er);

		      // if didn't throw, then means error was handled.
		      // go ahead and clear error, so we can write again.
		      me._parser.error = null;
		    };

		    this._decoder = null;

		    streamWraps.forEach(function (ev) {
		      Object.defineProperty(me, 'on' + ev, {
		        get: function () {
		          return me._parser['on' + ev]
		        },
		        set: function (h) {
		          if (!h) {
		            me.removeAllListeners(ev);
		            me._parser['on' + ev] = h;
		            return h
		          }
		          me.on(ev, h);
		        },
		        enumerable: true,
		        configurable: false
		      });
		    });
		  }

		  SAXStream.prototype = Object.create(Stream.prototype, {
		    constructor: {
		      value: SAXStream
		    }
		  });

		  SAXStream.prototype.write = function (data) {
		    if (typeof Buffer === 'function' &&
		      typeof Buffer.isBuffer === 'function' &&
		      Buffer.isBuffer(data)) {
		      if (!this._decoder) {
		        var SD = require$$1.StringDecoder;
		        this._decoder = new SD('utf8');
		      }
		      data = this._decoder.write(data);
		    }

		    this._parser.write(data.toString());
		    this.emit('data', data);
		    return true
		  };

		  SAXStream.prototype.end = function (chunk) {
		    if (chunk && chunk.length) {
		      this.write(chunk);
		    }
		    this._parser.end();
		    return true
		  };

		  SAXStream.prototype.on = function (ev, handler) {
		    var me = this;
		    if (!me._parser['on' + ev] && streamWraps.indexOf(ev) !== -1) {
		      me._parser['on' + ev] = function () {
		        var args = arguments.length === 1 ? [arguments[0]] : Array.apply(null, arguments);
		        args.splice(0, 0, ev);
		        me.emit.apply(me, args);
		      };
		    }

		    return Stream.prototype.on.call(me, ev, handler)
		  };

		  // this really needs to be replaced with character classes.
		  // XML allows all manner of ridiculous numbers and digits.
		  var CDATA = '[CDATA[';
		  var DOCTYPE = 'DOCTYPE';
		  var XML_NAMESPACE = 'http://www.w3.org/XML/1998/namespace';
		  var XMLNS_NAMESPACE = 'http://www.w3.org/2000/xmlns/';
		  var rootNS = { xml: XML_NAMESPACE, xmlns: XMLNS_NAMESPACE };

		  // http://www.w3.org/TR/REC-xml/#NT-NameStartChar
		  // This implementation works on strings, a single character at a time
		  // as such, it cannot ever support astral-plane characters (10000-EFFFF)
		  // without a significant breaking change to either this  parser, or the
		  // JavaScript language.  Implementation of an emoji-capable xml parser
		  // is left as an exercise for the reader.
		  var nameStart = /[:_A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]/;

		  var nameBody = /[:_A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\u00B7\u0300-\u036F\u203F-\u2040.\d-]/;

		  var entityStart = /[#:_A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]/;
		  var entityBody = /[#:_A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\u00B7\u0300-\u036F\u203F-\u2040.\d-]/;

		  function isWhitespace (c) {
		    return c === ' ' || c === '\n' || c === '\r' || c === '\t'
		  }

		  function isQuote (c) {
		    return c === '"' || c === '\''
		  }

		  function isAttribEnd (c) {
		    return c === '>' || isWhitespace(c)
		  }

		  function isMatch (regex, c) {
		    return regex.test(c)
		  }

		  function notMatch (regex, c) {
		    return !isMatch(regex, c)
		  }

		  var S = 0;
		  sax.STATE = {
		    BEGIN: S++, // leading byte order mark or whitespace
		    BEGIN_WHITESPACE: S++, // leading whitespace
		    TEXT: S++, // general stuff
		    TEXT_ENTITY: S++, // &amp and such.
		    OPEN_WAKA: S++, // <
		    SGML_DECL: S++, // <!BLARG
		    SGML_DECL_QUOTED: S++, // <!BLARG foo "bar
		    DOCTYPE: S++, // <!DOCTYPE
		    DOCTYPE_QUOTED: S++, // <!DOCTYPE "//blah
		    DOCTYPE_DTD: S++, // <!DOCTYPE "//blah" [ ...
		    DOCTYPE_DTD_QUOTED: S++, // <!DOCTYPE "//blah" [ "foo
		    COMMENT_STARTING: S++, // <!-
		    COMMENT: S++, // <!--
		    COMMENT_ENDING: S++, // <!-- blah -
		    COMMENT_ENDED: S++, // <!-- blah --
		    CDATA: S++, // <![CDATA[ something
		    CDATA_ENDING: S++, // ]
		    CDATA_ENDING_2: S++, // ]]
		    PROC_INST: S++, // <?hi
		    PROC_INST_BODY: S++, // <?hi there
		    PROC_INST_ENDING: S++, // <?hi "there" ?
		    OPEN_TAG: S++, // <strong
		    OPEN_TAG_SLASH: S++, // <strong /
		    ATTRIB: S++, // <a
		    ATTRIB_NAME: S++, // <a foo
		    ATTRIB_NAME_SAW_WHITE: S++, // <a foo _
		    ATTRIB_VALUE: S++, // <a foo=
		    ATTRIB_VALUE_QUOTED: S++, // <a foo="bar
		    ATTRIB_VALUE_CLOSED: S++, // <a foo="bar"
		    ATTRIB_VALUE_UNQUOTED: S++, // <a foo=bar
		    ATTRIB_VALUE_ENTITY_Q: S++, // <foo bar="&quot;"
		    ATTRIB_VALUE_ENTITY_U: S++, // <foo bar=&quot
		    CLOSE_TAG: S++, // </a
		    CLOSE_TAG_SAW_WHITE: S++, // </a   >
		    SCRIPT: S++, // <script> ...
		    SCRIPT_ENDING: S++ // <script> ... <
		  };

		  sax.XML_ENTITIES = {
		    'amp': '&',
		    'gt': '>',
		    'lt': '<',
		    'quot': '"',
		    'apos': "'"
		  };

		  sax.ENTITIES = {
		    'amp': '&',
		    'gt': '>',
		    'lt': '<',
		    'quot': '"',
		    'apos': "'",
		    'AElig': 198,
		    'Aacute': 193,
		    'Acirc': 194,
		    'Agrave': 192,
		    'Aring': 197,
		    'Atilde': 195,
		    'Auml': 196,
		    'Ccedil': 199,
		    'ETH': 208,
		    'Eacute': 201,
		    'Ecirc': 202,
		    'Egrave': 200,
		    'Euml': 203,
		    'Iacute': 205,
		    'Icirc': 206,
		    'Igrave': 204,
		    'Iuml': 207,
		    'Ntilde': 209,
		    'Oacute': 211,
		    'Ocirc': 212,
		    'Ograve': 210,
		    'Oslash': 216,
		    'Otilde': 213,
		    'Ouml': 214,
		    'THORN': 222,
		    'Uacute': 218,
		    'Ucirc': 219,
		    'Ugrave': 217,
		    'Uuml': 220,
		    'Yacute': 221,
		    'aacute': 225,
		    'acirc': 226,
		    'aelig': 230,
		    'agrave': 224,
		    'aring': 229,
		    'atilde': 227,
		    'auml': 228,
		    'ccedil': 231,
		    'eacute': 233,
		    'ecirc': 234,
		    'egrave': 232,
		    'eth': 240,
		    'euml': 235,
		    'iacute': 237,
		    'icirc': 238,
		    'igrave': 236,
		    'iuml': 239,
		    'ntilde': 241,
		    'oacute': 243,
		    'ocirc': 244,
		    'ograve': 242,
		    'oslash': 248,
		    'otilde': 245,
		    'ouml': 246,
		    'szlig': 223,
		    'thorn': 254,
		    'uacute': 250,
		    'ucirc': 251,
		    'ugrave': 249,
		    'uuml': 252,
		    'yacute': 253,
		    'yuml': 255,
		    'copy': 169,
		    'reg': 174,
		    'nbsp': 160,
		    'iexcl': 161,
		    'cent': 162,
		    'pound': 163,
		    'curren': 164,
		    'yen': 165,
		    'brvbar': 166,
		    'sect': 167,
		    'uml': 168,
		    'ordf': 170,
		    'laquo': 171,
		    'not': 172,
		    'shy': 173,
		    'macr': 175,
		    'deg': 176,
		    'plusmn': 177,
		    'sup1': 185,
		    'sup2': 178,
		    'sup3': 179,
		    'acute': 180,
		    'micro': 181,
		    'para': 182,
		    'middot': 183,
		    'cedil': 184,
		    'ordm': 186,
		    'raquo': 187,
		    'frac14': 188,
		    'frac12': 189,
		    'frac34': 190,
		    'iquest': 191,
		    'times': 215,
		    'divide': 247,
		    'OElig': 338,
		    'oelig': 339,
		    'Scaron': 352,
		    'scaron': 353,
		    'Yuml': 376,
		    'fnof': 402,
		    'circ': 710,
		    'tilde': 732,
		    'Alpha': 913,
		    'Beta': 914,
		    'Gamma': 915,
		    'Delta': 916,
		    'Epsilon': 917,
		    'Zeta': 918,
		    'Eta': 919,
		    'Theta': 920,
		    'Iota': 921,
		    'Kappa': 922,
		    'Lambda': 923,
		    'Mu': 924,
		    'Nu': 925,
		    'Xi': 926,
		    'Omicron': 927,
		    'Pi': 928,
		    'Rho': 929,
		    'Sigma': 931,
		    'Tau': 932,
		    'Upsilon': 933,
		    'Phi': 934,
		    'Chi': 935,
		    'Psi': 936,
		    'Omega': 937,
		    'alpha': 945,
		    'beta': 946,
		    'gamma': 947,
		    'delta': 948,
		    'epsilon': 949,
		    'zeta': 950,
		    'eta': 951,
		    'theta': 952,
		    'iota': 953,
		    'kappa': 954,
		    'lambda': 955,
		    'mu': 956,
		    'nu': 957,
		    'xi': 958,
		    'omicron': 959,
		    'pi': 960,
		    'rho': 961,
		    'sigmaf': 962,
		    'sigma': 963,
		    'tau': 964,
		    'upsilon': 965,
		    'phi': 966,
		    'chi': 967,
		    'psi': 968,
		    'omega': 969,
		    'thetasym': 977,
		    'upsih': 978,
		    'piv': 982,
		    'ensp': 8194,
		    'emsp': 8195,
		    'thinsp': 8201,
		    'zwnj': 8204,
		    'zwj': 8205,
		    'lrm': 8206,
		    'rlm': 8207,
		    'ndash': 8211,
		    'mdash': 8212,
		    'lsquo': 8216,
		    'rsquo': 8217,
		    'sbquo': 8218,
		    'ldquo': 8220,
		    'rdquo': 8221,
		    'bdquo': 8222,
		    'dagger': 8224,
		    'Dagger': 8225,
		    'bull': 8226,
		    'hellip': 8230,
		    'permil': 8240,
		    'prime': 8242,
		    'Prime': 8243,
		    'lsaquo': 8249,
		    'rsaquo': 8250,
		    'oline': 8254,
		    'frasl': 8260,
		    'euro': 8364,
		    'image': 8465,
		    'weierp': 8472,
		    'real': 8476,
		    'trade': 8482,
		    'alefsym': 8501,
		    'larr': 8592,
		    'uarr': 8593,
		    'rarr': 8594,
		    'darr': 8595,
		    'harr': 8596,
		    'crarr': 8629,
		    'lArr': 8656,
		    'uArr': 8657,
		    'rArr': 8658,
		    'dArr': 8659,
		    'hArr': 8660,
		    'forall': 8704,
		    'part': 8706,
		    'exist': 8707,
		    'empty': 8709,
		    'nabla': 8711,
		    'isin': 8712,
		    'notin': 8713,
		    'ni': 8715,
		    'prod': 8719,
		    'sum': 8721,
		    'minus': 8722,
		    'lowast': 8727,
		    'radic': 8730,
		    'prop': 8733,
		    'infin': 8734,
		    'ang': 8736,
		    'and': 8743,
		    'or': 8744,
		    'cap': 8745,
		    'cup': 8746,
		    'int': 8747,
		    'there4': 8756,
		    'sim': 8764,
		    'cong': 8773,
		    'asymp': 8776,
		    'ne': 8800,
		    'equiv': 8801,
		    'le': 8804,
		    'ge': 8805,
		    'sub': 8834,
		    'sup': 8835,
		    'nsub': 8836,
		    'sube': 8838,
		    'supe': 8839,
		    'oplus': 8853,
		    'otimes': 8855,
		    'perp': 8869,
		    'sdot': 8901,
		    'lceil': 8968,
		    'rceil': 8969,
		    'lfloor': 8970,
		    'rfloor': 8971,
		    'lang': 9001,
		    'rang': 9002,
		    'loz': 9674,
		    'spades': 9824,
		    'clubs': 9827,
		    'hearts': 9829,
		    'diams': 9830
		  };

		  Object.keys(sax.ENTITIES).forEach(function (key) {
		    var e = sax.ENTITIES[key];
		    var s = typeof e === 'number' ? String.fromCharCode(e) : e;
		    sax.ENTITIES[key] = s;
		  });

		  for (var s in sax.STATE) {
		    sax.STATE[sax.STATE[s]] = s;
		  }

		  // shorthand
		  S = sax.STATE;

		  function emit (parser, event, data) {
		    parser[event] && parser[event](data);
		  }

		  function emitNode (parser, nodeType, data) {
		    if (parser.textNode) closeText(parser);
		    emit(parser, nodeType, data);
		  }

		  function closeText (parser) {
		    parser.textNode = textopts(parser.opt, parser.textNode);
		    if (parser.textNode) emit(parser, 'ontext', parser.textNode);
		    parser.textNode = '';
		  }

		  function textopts (opt, text) {
		    if (opt.trim) text = text.trim();
		    if (opt.normalize) text = text.replace(/\s+/g, ' ');
		    return text
		  }

		  function error (parser, er) {
		    closeText(parser);
		    if (parser.trackPosition) {
		      er += '\nLine: ' + parser.line +
		        '\nColumn: ' + parser.column +
		        '\nChar: ' + parser.c;
		    }
		    er = new Error(er);
		    parser.error = er;
		    emit(parser, 'onerror', er);
		    return parser
		  }

		  function end (parser) {
		    if (parser.sawRoot && !parser.closedRoot) strictFail(parser, 'Unclosed root tag');
		    if ((parser.state !== S.BEGIN) &&
		      (parser.state !== S.BEGIN_WHITESPACE) &&
		      (parser.state !== S.TEXT)) {
		      error(parser, 'Unexpected end');
		    }
		    closeText(parser);
		    parser.c = '';
		    parser.closed = true;
		    emit(parser, 'onend');
		    SAXParser.call(parser, parser.strict, parser.opt);
		    return parser
		  }

		  function strictFail (parser, message) {
		    if (typeof parser !== 'object' || !(parser instanceof SAXParser)) {
		      throw new Error('bad call to strictFail')
		    }
		    if (parser.strict) {
		      error(parser, message);
		    }
		  }

		  function newTag (parser) {
		    if (!parser.strict) parser.tagName = parser.tagName[parser.looseCase]();
		    var parent = parser.tags[parser.tags.length - 1] || parser;
		    var tag = parser.tag = { name: parser.tagName, attributes: {} };

		    // will be overridden if tag contails an xmlns="foo" or xmlns:foo="bar"
		    if (parser.opt.xmlns) {
		      tag.ns = parent.ns;
		    }
		    parser.attribList.length = 0;
		    emitNode(parser, 'onopentagstart', tag);
		  }

		  function qname (name, attribute) {
		    var i = name.indexOf(':');
		    var qualName = i < 0 ? [ '', name ] : name.split(':');
		    var prefix = qualName[0];
		    var local = qualName[1];

		    // <x "xmlns"="http://foo">
		    if (attribute && name === 'xmlns') {
		      prefix = 'xmlns';
		      local = '';
		    }

		    return { prefix: prefix, local: local }
		  }

		  function attrib (parser) {
		    if (!parser.strict) {
		      parser.attribName = parser.attribName[parser.looseCase]();
		    }

		    if (parser.attribList.indexOf(parser.attribName) !== -1 ||
		      parser.tag.attributes.hasOwnProperty(parser.attribName)) {
		      parser.attribName = parser.attribValue = '';
		      return
		    }

		    if (parser.opt.xmlns) {
		      var qn = qname(parser.attribName, true);
		      var prefix = qn.prefix;
		      var local = qn.local;

		      if (prefix === 'xmlns') {
		        // namespace binding attribute. push the binding into scope
		        if (local === 'xml' && parser.attribValue !== XML_NAMESPACE) {
		          strictFail(parser,
		            'xml: prefix must be bound to ' + XML_NAMESPACE + '\n' +
		            'Actual: ' + parser.attribValue);
		        } else if (local === 'xmlns' && parser.attribValue !== XMLNS_NAMESPACE) {
		          strictFail(parser,
		            'xmlns: prefix must be bound to ' + XMLNS_NAMESPACE + '\n' +
		            'Actual: ' + parser.attribValue);
		        } else {
		          var tag = parser.tag;
		          var parent = parser.tags[parser.tags.length - 1] || parser;
		          if (tag.ns === parent.ns) {
		            tag.ns = Object.create(parent.ns);
		          }
		          tag.ns[local] = parser.attribValue;
		        }
		      }

		      // defer onattribute events until all attributes have been seen
		      // so any new bindings can take effect. preserve attribute order
		      // so deferred events can be emitted in document order
		      parser.attribList.push([parser.attribName, parser.attribValue]);
		    } else {
		      // in non-xmlns mode, we can emit the event right away
		      parser.tag.attributes[parser.attribName] = parser.attribValue;
		      emitNode(parser, 'onattribute', {
		        name: parser.attribName,
		        value: parser.attribValue
		      });
		    }

		    parser.attribName = parser.attribValue = '';
		  }

		  function openTag (parser, selfClosing) {
		    if (parser.opt.xmlns) {
		      // emit namespace binding events
		      var tag = parser.tag;

		      // add namespace info to tag
		      var qn = qname(parser.tagName);
		      tag.prefix = qn.prefix;
		      tag.local = qn.local;
		      tag.uri = tag.ns[qn.prefix] || '';

		      if (tag.prefix && !tag.uri) {
		        strictFail(parser, 'Unbound namespace prefix: ' +
		          JSON.stringify(parser.tagName));
		        tag.uri = qn.prefix;
		      }

		      var parent = parser.tags[parser.tags.length - 1] || parser;
		      if (tag.ns && parent.ns !== tag.ns) {
		        Object.keys(tag.ns).forEach(function (p) {
		          emitNode(parser, 'onopennamespace', {
		            prefix: p,
		            uri: tag.ns[p]
		          });
		        });
		      }

		      // handle deferred onattribute events
		      // Note: do not apply default ns to attributes:
		      //   http://www.w3.org/TR/REC-xml-names/#defaulting
		      for (var i = 0, l = parser.attribList.length; i < l; i++) {
		        var nv = parser.attribList[i];
		        var name = nv[0];
		        var value = nv[1];
		        var qualName = qname(name, true);
		        var prefix = qualName.prefix;
		        var local = qualName.local;
		        var uri = prefix === '' ? '' : (tag.ns[prefix] || '');
		        var a = {
		          name: name,
		          value: value,
		          prefix: prefix,
		          local: local,
		          uri: uri
		        };

		        // if there's any attributes with an undefined namespace,
		        // then fail on them now.
		        if (prefix && prefix !== 'xmlns' && !uri) {
		          strictFail(parser, 'Unbound namespace prefix: ' +
		            JSON.stringify(prefix));
		          a.uri = prefix;
		        }
		        parser.tag.attributes[name] = a;
		        emitNode(parser, 'onattribute', a);
		      }
		      parser.attribList.length = 0;
		    }

		    parser.tag.isSelfClosing = !!selfClosing;

		    // process the tag
		    parser.sawRoot = true;
		    parser.tags.push(parser.tag);
		    emitNode(parser, 'onopentag', parser.tag);
		    if (!selfClosing) {
		      // special case for <script> in non-strict mode.
		      if (!parser.noscript && parser.tagName.toLowerCase() === 'script') {
		        parser.state = S.SCRIPT;
		      } else {
		        parser.state = S.TEXT;
		      }
		      parser.tag = null;
		      parser.tagName = '';
		    }
		    parser.attribName = parser.attribValue = '';
		    parser.attribList.length = 0;
		  }

		  function closeTag (parser) {
		    if (!parser.tagName) {
		      strictFail(parser, 'Weird empty close tag.');
		      parser.textNode += '</>';
		      parser.state = S.TEXT;
		      return
		    }

		    if (parser.script) {
		      if (parser.tagName !== 'script') {
		        parser.script += '</' + parser.tagName + '>';
		        parser.tagName = '';
		        parser.state = S.SCRIPT;
		        return
		      }
		      emitNode(parser, 'onscript', parser.script);
		      parser.script = '';
		    }

		    // first make sure that the closing tag actually exists.
		    // <a><b></c></b></a> will close everything, otherwise.
		    var t = parser.tags.length;
		    var tagName = parser.tagName;
		    if (!parser.strict) {
		      tagName = tagName[parser.looseCase]();
		    }
		    var closeTo = tagName;
		    while (t--) {
		      var close = parser.tags[t];
		      if (close.name !== closeTo) {
		        // fail the first time in strict mode
		        strictFail(parser, 'Unexpected close tag');
		      } else {
		        break
		      }
		    }

		    // didn't find it.  we already failed for strict, so just abort.
		    if (t < 0) {
		      strictFail(parser, 'Unmatched closing tag: ' + parser.tagName);
		      parser.textNode += '</' + parser.tagName + '>';
		      parser.state = S.TEXT;
		      return
		    }
		    parser.tagName = tagName;
		    var s = parser.tags.length;
		    while (s-- > t) {
		      var tag = parser.tag = parser.tags.pop();
		      parser.tagName = parser.tag.name;
		      emitNode(parser, 'onclosetag', parser.tagName);

		      var x = {};
		      for (var i in tag.ns) {
		        x[i] = tag.ns[i];
		      }

		      var parent = parser.tags[parser.tags.length - 1] || parser;
		      if (parser.opt.xmlns && tag.ns !== parent.ns) {
		        // remove namespace bindings introduced by tag
		        Object.keys(tag.ns).forEach(function (p) {
		          var n = tag.ns[p];
		          emitNode(parser, 'onclosenamespace', { prefix: p, uri: n });
		        });
		      }
		    }
		    if (t === 0) parser.closedRoot = true;
		    parser.tagName = parser.attribValue = parser.attribName = '';
		    parser.attribList.length = 0;
		    parser.state = S.TEXT;
		  }

		  function parseEntity (parser) {
		    var entity = parser.entity;
		    var entityLC = entity.toLowerCase();
		    var num;
		    var numStr = '';

		    if (parser.ENTITIES[entity]) {
		      return parser.ENTITIES[entity]
		    }
		    if (parser.ENTITIES[entityLC]) {
		      return parser.ENTITIES[entityLC]
		    }
		    entity = entityLC;
		    if (entity.charAt(0) === '#') {
		      if (entity.charAt(1) === 'x') {
		        entity = entity.slice(2);
		        num = parseInt(entity, 16);
		        numStr = num.toString(16);
		      } else {
		        entity = entity.slice(1);
		        num = parseInt(entity, 10);
		        numStr = num.toString(10);
		      }
		    }
		    entity = entity.replace(/^0+/, '');
		    if (isNaN(num) || numStr.toLowerCase() !== entity) {
		      strictFail(parser, 'Invalid character entity');
		      return '&' + parser.entity + ';'
		    }

		    return String.fromCodePoint(num)
		  }

		  function beginWhiteSpace (parser, c) {
		    if (c === '<') {
		      parser.state = S.OPEN_WAKA;
		      parser.startTagPosition = parser.position;
		    } else if (!isWhitespace(c)) {
		      // have to process this as a text node.
		      // weird, but happens.
		      strictFail(parser, 'Non-whitespace before first tag.');
		      parser.textNode = c;
		      parser.state = S.TEXT;
		    }
		  }

		  function charAt (chunk, i) {
		    var result = '';
		    if (i < chunk.length) {
		      result = chunk.charAt(i);
		    }
		    return result
		  }

		  function write (chunk) {
		    var parser = this;
		    if (this.error) {
		      throw this.error
		    }
		    if (parser.closed) {
		      return error(parser,
		        'Cannot write after close. Assign an onready handler.')
		    }
		    if (chunk === null) {
		      return end(parser)
		    }
		    if (typeof chunk === 'object') {
		      chunk = chunk.toString();
		    }
		    var i = 0;
		    var c = '';
		    while (true) {
		      c = charAt(chunk, i++);
		      parser.c = c;

		      if (!c) {
		        break
		      }

		      if (parser.trackPosition) {
		        parser.position++;
		        if (c === '\n') {
		          parser.line++;
		          parser.column = 0;
		        } else {
		          parser.column++;
		        }
		      }

		      switch (parser.state) {
		        case S.BEGIN:
		          parser.state = S.BEGIN_WHITESPACE;
		          if (c === '\uFEFF') {
		            continue
		          }
		          beginWhiteSpace(parser, c);
		          continue

		        case S.BEGIN_WHITESPACE:
		          beginWhiteSpace(parser, c);
		          continue

		        case S.TEXT:
		          if (parser.sawRoot && !parser.closedRoot) {
		            var starti = i - 1;
		            while (c && c !== '<' && c !== '&') {
		              c = charAt(chunk, i++);
		              if (c && parser.trackPosition) {
		                parser.position++;
		                if (c === '\n') {
		                  parser.line++;
		                  parser.column = 0;
		                } else {
		                  parser.column++;
		                }
		              }
		            }
		            parser.textNode += chunk.substring(starti, i - 1);
		          }
		          if (c === '<' && !(parser.sawRoot && parser.closedRoot && !parser.strict)) {
		            parser.state = S.OPEN_WAKA;
		            parser.startTagPosition = parser.position;
		          } else {
		            if (!isWhitespace(c) && (!parser.sawRoot || parser.closedRoot)) {
		              strictFail(parser, 'Text data outside of root node.');
		            }
		            if (c === '&') {
		              parser.state = S.TEXT_ENTITY;
		            } else {
		              parser.textNode += c;
		            }
		          }
		          continue

		        case S.SCRIPT:
		          // only non-strict
		          if (c === '<') {
		            parser.state = S.SCRIPT_ENDING;
		          } else {
		            parser.script += c;
		          }
		          continue

		        case S.SCRIPT_ENDING:
		          if (c === '/') {
		            parser.state = S.CLOSE_TAG;
		          } else {
		            parser.script += '<' + c;
		            parser.state = S.SCRIPT;
		          }
		          continue

		        case S.OPEN_WAKA:
		          // either a /, ?, !, or text is coming next.
		          if (c === '!') {
		            parser.state = S.SGML_DECL;
		            parser.sgmlDecl = '';
		          } else if (isWhitespace(c)) ; else if (isMatch(nameStart, c)) {
		            parser.state = S.OPEN_TAG;
		            parser.tagName = c;
		          } else if (c === '/') {
		            parser.state = S.CLOSE_TAG;
		            parser.tagName = '';
		          } else if (c === '?') {
		            parser.state = S.PROC_INST;
		            parser.procInstName = parser.procInstBody = '';
		          } else {
		            strictFail(parser, 'Unencoded <');
		            // if there was some whitespace, then add that in.
		            if (parser.startTagPosition + 1 < parser.position) {
		              var pad = parser.position - parser.startTagPosition;
		              c = new Array(pad).join(' ') + c;
		            }
		            parser.textNode += '<' + c;
		            parser.state = S.TEXT;
		          }
		          continue

		        case S.SGML_DECL:
		          if ((parser.sgmlDecl + c).toUpperCase() === CDATA) {
		            emitNode(parser, 'onopencdata');
		            parser.state = S.CDATA;
		            parser.sgmlDecl = '';
		            parser.cdata = '';
		          } else if (parser.sgmlDecl + c === '--') {
		            parser.state = S.COMMENT;
		            parser.comment = '';
		            parser.sgmlDecl = '';
		          } else if ((parser.sgmlDecl + c).toUpperCase() === DOCTYPE) {
		            parser.state = S.DOCTYPE;
		            if (parser.doctype || parser.sawRoot) {
		              strictFail(parser,
		                'Inappropriately located doctype declaration');
		            }
		            parser.doctype = '';
		            parser.sgmlDecl = '';
		          } else if (c === '>') {
		            emitNode(parser, 'onsgmldeclaration', parser.sgmlDecl);
		            parser.sgmlDecl = '';
		            parser.state = S.TEXT;
		          } else if (isQuote(c)) {
		            parser.state = S.SGML_DECL_QUOTED;
		            parser.sgmlDecl += c;
		          } else {
		            parser.sgmlDecl += c;
		          }
		          continue

		        case S.SGML_DECL_QUOTED:
		          if (c === parser.q) {
		            parser.state = S.SGML_DECL;
		            parser.q = '';
		          }
		          parser.sgmlDecl += c;
		          continue

		        case S.DOCTYPE:
		          if (c === '>') {
		            parser.state = S.TEXT;
		            emitNode(parser, 'ondoctype', parser.doctype);
		            parser.doctype = true; // just remember that we saw it.
		          } else {
		            parser.doctype += c;
		            if (c === '[') {
		              parser.state = S.DOCTYPE_DTD;
		            } else if (isQuote(c)) {
		              parser.state = S.DOCTYPE_QUOTED;
		              parser.q = c;
		            }
		          }
		          continue

		        case S.DOCTYPE_QUOTED:
		          parser.doctype += c;
		          if (c === parser.q) {
		            parser.q = '';
		            parser.state = S.DOCTYPE;
		          }
		          continue

		        case S.DOCTYPE_DTD:
		          parser.doctype += c;
		          if (c === ']') {
		            parser.state = S.DOCTYPE;
		          } else if (isQuote(c)) {
		            parser.state = S.DOCTYPE_DTD_QUOTED;
		            parser.q = c;
		          }
		          continue

		        case S.DOCTYPE_DTD_QUOTED:
		          parser.doctype += c;
		          if (c === parser.q) {
		            parser.state = S.DOCTYPE_DTD;
		            parser.q = '';
		          }
		          continue

		        case S.COMMENT:
		          if (c === '-') {
		            parser.state = S.COMMENT_ENDING;
		          } else {
		            parser.comment += c;
		          }
		          continue

		        case S.COMMENT_ENDING:
		          if (c === '-') {
		            parser.state = S.COMMENT_ENDED;
		            parser.comment = textopts(parser.opt, parser.comment);
		            if (parser.comment) {
		              emitNode(parser, 'oncomment', parser.comment);
		            }
		            parser.comment = '';
		          } else {
		            parser.comment += '-' + c;
		            parser.state = S.COMMENT;
		          }
		          continue

		        case S.COMMENT_ENDED:
		          if (c !== '>') {
		            strictFail(parser, 'Malformed comment');
		            // allow <!-- blah -- bloo --> in non-strict mode,
		            // which is a comment of " blah -- bloo "
		            parser.comment += '--' + c;
		            parser.state = S.COMMENT;
		          } else {
		            parser.state = S.TEXT;
		          }
		          continue

		        case S.CDATA:
		          if (c === ']') {
		            parser.state = S.CDATA_ENDING;
		          } else {
		            parser.cdata += c;
		          }
		          continue

		        case S.CDATA_ENDING:
		          if (c === ']') {
		            parser.state = S.CDATA_ENDING_2;
		          } else {
		            parser.cdata += ']' + c;
		            parser.state = S.CDATA;
		          }
		          continue

		        case S.CDATA_ENDING_2:
		          if (c === '>') {
		            if (parser.cdata) {
		              emitNode(parser, 'oncdata', parser.cdata);
		            }
		            emitNode(parser, 'onclosecdata');
		            parser.cdata = '';
		            parser.state = S.TEXT;
		          } else if (c === ']') {
		            parser.cdata += ']';
		          } else {
		            parser.cdata += ']]' + c;
		            parser.state = S.CDATA;
		          }
		          continue

		        case S.PROC_INST:
		          if (c === '?') {
		            parser.state = S.PROC_INST_ENDING;
		          } else if (isWhitespace(c)) {
		            parser.state = S.PROC_INST_BODY;
		          } else {
		            parser.procInstName += c;
		          }
		          continue

		        case S.PROC_INST_BODY:
		          if (!parser.procInstBody && isWhitespace(c)) {
		            continue
		          } else if (c === '?') {
		            parser.state = S.PROC_INST_ENDING;
		          } else {
		            parser.procInstBody += c;
		          }
		          continue

		        case S.PROC_INST_ENDING:
		          if (c === '>') {
		            emitNode(parser, 'onprocessinginstruction', {
		              name: parser.procInstName,
		              body: parser.procInstBody
		            });
		            parser.procInstName = parser.procInstBody = '';
		            parser.state = S.TEXT;
		          } else {
		            parser.procInstBody += '?' + c;
		            parser.state = S.PROC_INST_BODY;
		          }
		          continue

		        case S.OPEN_TAG:
		          if (isMatch(nameBody, c)) {
		            parser.tagName += c;
		          } else {
		            newTag(parser);
		            if (c === '>') {
		              openTag(parser);
		            } else if (c === '/') {
		              parser.state = S.OPEN_TAG_SLASH;
		            } else {
		              if (!isWhitespace(c)) {
		                strictFail(parser, 'Invalid character in tag name');
		              }
		              parser.state = S.ATTRIB;
		            }
		          }
		          continue

		        case S.OPEN_TAG_SLASH:
		          if (c === '>') {
		            openTag(parser, true);
		            closeTag(parser);
		          } else {
		            strictFail(parser, 'Forward-slash in opening tag not followed by >');
		            parser.state = S.ATTRIB;
		          }
		          continue

		        case S.ATTRIB:
		          // haven't read the attribute name yet.
		          if (isWhitespace(c)) {
		            continue
		          } else if (c === '>') {
		            openTag(parser);
		          } else if (c === '/') {
		            parser.state = S.OPEN_TAG_SLASH;
		          } else if (isMatch(nameStart, c)) {
		            parser.attribName = c;
		            parser.attribValue = '';
		            parser.state = S.ATTRIB_NAME;
		          } else {
		            strictFail(parser, 'Invalid attribute name');
		          }
		          continue

		        case S.ATTRIB_NAME:
		          if (c === '=') {
		            parser.state = S.ATTRIB_VALUE;
		          } else if (c === '>') {
		            strictFail(parser, 'Attribute without value');
		            parser.attribValue = parser.attribName;
		            attrib(parser);
		            openTag(parser);
		          } else if (isWhitespace(c)) {
		            parser.state = S.ATTRIB_NAME_SAW_WHITE;
		          } else if (isMatch(nameBody, c)) {
		            parser.attribName += c;
		          } else {
		            strictFail(parser, 'Invalid attribute name');
		          }
		          continue

		        case S.ATTRIB_NAME_SAW_WHITE:
		          if (c === '=') {
		            parser.state = S.ATTRIB_VALUE;
		          } else if (isWhitespace(c)) {
		            continue
		          } else {
		            strictFail(parser, 'Attribute without value');
		            parser.tag.attributes[parser.attribName] = '';
		            parser.attribValue = '';
		            emitNode(parser, 'onattribute', {
		              name: parser.attribName,
		              value: ''
		            });
		            parser.attribName = '';
		            if (c === '>') {
		              openTag(parser);
		            } else if (isMatch(nameStart, c)) {
		              parser.attribName = c;
		              parser.state = S.ATTRIB_NAME;
		            } else {
		              strictFail(parser, 'Invalid attribute name');
		              parser.state = S.ATTRIB;
		            }
		          }
		          continue

		        case S.ATTRIB_VALUE:
		          if (isWhitespace(c)) {
		            continue
		          } else if (isQuote(c)) {
		            parser.q = c;
		            parser.state = S.ATTRIB_VALUE_QUOTED;
		          } else {
		            strictFail(parser, 'Unquoted attribute value');
		            parser.state = S.ATTRIB_VALUE_UNQUOTED;
		            parser.attribValue = c;
		          }
		          continue

		        case S.ATTRIB_VALUE_QUOTED:
		          if (c !== parser.q) {
		            if (c === '&') {
		              parser.state = S.ATTRIB_VALUE_ENTITY_Q;
		            } else {
		              parser.attribValue += c;
		            }
		            continue
		          }
		          attrib(parser);
		          parser.q = '';
		          parser.state = S.ATTRIB_VALUE_CLOSED;
		          continue

		        case S.ATTRIB_VALUE_CLOSED:
		          if (isWhitespace(c)) {
		            parser.state = S.ATTRIB;
		          } else if (c === '>') {
		            openTag(parser);
		          } else if (c === '/') {
		            parser.state = S.OPEN_TAG_SLASH;
		          } else if (isMatch(nameStart, c)) {
		            strictFail(parser, 'No whitespace between attributes');
		            parser.attribName = c;
		            parser.attribValue = '';
		            parser.state = S.ATTRIB_NAME;
		          } else {
		            strictFail(parser, 'Invalid attribute name');
		          }
		          continue

		        case S.ATTRIB_VALUE_UNQUOTED:
		          if (!isAttribEnd(c)) {
		            if (c === '&') {
		              parser.state = S.ATTRIB_VALUE_ENTITY_U;
		            } else {
		              parser.attribValue += c;
		            }
		            continue
		          }
		          attrib(parser);
		          if (c === '>') {
		            openTag(parser);
		          } else {
		            parser.state = S.ATTRIB;
		          }
		          continue

		        case S.CLOSE_TAG:
		          if (!parser.tagName) {
		            if (isWhitespace(c)) {
		              continue
		            } else if (notMatch(nameStart, c)) {
		              if (parser.script) {
		                parser.script += '</' + c;
		                parser.state = S.SCRIPT;
		              } else {
		                strictFail(parser, 'Invalid tagname in closing tag.');
		              }
		            } else {
		              parser.tagName = c;
		            }
		          } else if (c === '>') {
		            closeTag(parser);
		          } else if (isMatch(nameBody, c)) {
		            parser.tagName += c;
		          } else if (parser.script) {
		            parser.script += '</' + parser.tagName;
		            parser.tagName = '';
		            parser.state = S.SCRIPT;
		          } else {
		            if (!isWhitespace(c)) {
		              strictFail(parser, 'Invalid tagname in closing tag');
		            }
		            parser.state = S.CLOSE_TAG_SAW_WHITE;
		          }
		          continue

		        case S.CLOSE_TAG_SAW_WHITE:
		          if (isWhitespace(c)) {
		            continue
		          }
		          if (c === '>') {
		            closeTag(parser);
		          } else {
		            strictFail(parser, 'Invalid characters in closing tag');
		          }
		          continue

		        case S.TEXT_ENTITY:
		        case S.ATTRIB_VALUE_ENTITY_Q:
		        case S.ATTRIB_VALUE_ENTITY_U:
		          var returnState;
		          var buffer;
		          switch (parser.state) {
		            case S.TEXT_ENTITY:
		              returnState = S.TEXT;
		              buffer = 'textNode';
		              break

		            case S.ATTRIB_VALUE_ENTITY_Q:
		              returnState = S.ATTRIB_VALUE_QUOTED;
		              buffer = 'attribValue';
		              break

		            case S.ATTRIB_VALUE_ENTITY_U:
		              returnState = S.ATTRIB_VALUE_UNQUOTED;
		              buffer = 'attribValue';
		              break
		          }

		          if (c === ';') {
		            parser[buffer] += parseEntity(parser);
		            parser.entity = '';
		            parser.state = returnState;
		          } else if (isMatch(parser.entity.length ? entityBody : entityStart, c)) {
		            parser.entity += c;
		          } else {
		            strictFail(parser, 'Invalid character in entity name');
		            parser[buffer] += '&' + parser.entity + c;
		            parser.entity = '';
		            parser.state = returnState;
		          }

		          continue

		        default:
		          throw new Error(parser, 'Unknown state: ' + parser.state)
		      }
		    } // while

		    if (parser.position >= parser.bufferCheckPosition) {
		      checkBufferLength(parser);
		    }
		    return parser
		  }

		  /*! http://mths.be/fromcodepoint v0.1.0 by @mathias */
		  /* istanbul ignore next */
		  if (!String.fromCodePoint) {
		    (function () {
		      var stringFromCharCode = String.fromCharCode;
		      var floor = Math.floor;
		      var fromCodePoint = function () {
		        var MAX_SIZE = 0x4000;
		        var codeUnits = [];
		        var highSurrogate;
		        var lowSurrogate;
		        var index = -1;
		        var length = arguments.length;
		        if (!length) {
		          return ''
		        }
		        var result = '';
		        while (++index < length) {
		          var codePoint = Number(arguments[index]);
		          if (
		            !isFinite(codePoint) || // `NaN`, `+Infinity`, or `-Infinity`
		            codePoint < 0 || // not a valid Unicode code point
		            codePoint > 0x10FFFF || // not a valid Unicode code point
		            floor(codePoint) !== codePoint // not an integer
		          ) {
		            throw RangeError('Invalid code point: ' + codePoint)
		          }
		          if (codePoint <= 0xFFFF) { // BMP code point
		            codeUnits.push(codePoint);
		          } else { // Astral code point; split in surrogate halves
		            // http://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae
		            codePoint -= 0x10000;
		            highSurrogate = (codePoint >> 10) + 0xD800;
		            lowSurrogate = (codePoint % 0x400) + 0xDC00;
		            codeUnits.push(highSurrogate, lowSurrogate);
		          }
		          if (index + 1 === length || codeUnits.length > MAX_SIZE) {
		            result += stringFromCharCode.apply(null, codeUnits);
		            codeUnits.length = 0;
		          }
		        }
		        return result
		      };
		      /* istanbul ignore next */
		      if (Object.defineProperty) {
		        Object.defineProperty(String, 'fromCodePoint', {
		          value: fromCodePoint,
		          configurable: true,
		          writable: true
		        });
		      } else {
		        String.fromCodePoint = fromCodePoint;
		      }
		    }());
		  }
		})(exports); 
	} (sax));
	return sax;
}

var bom = {};

var hasRequiredBom;

function requireBom () {
	if (hasRequiredBom) return bom;
	hasRequiredBom = 1;
	// Generated by CoffeeScript 1.12.7
	(function() {
	  bom.stripBOM = function(str) {
	    if (str[0] === '\uFEFF') {
	      return str.substring(1);
	    } else {
	      return str;
	    }
	  };

	}).call(commonjsGlobal);
	return bom;
}

var processors = {};

var hasRequiredProcessors;

function requireProcessors () {
	if (hasRequiredProcessors) return processors;
	hasRequiredProcessors = 1;
	// Generated by CoffeeScript 1.12.7
	(function() {
	  var prefixMatch;

	  prefixMatch = new RegExp(/(?!xmlns)^.*:/);

	  processors.normalize = function(str) {
	    return str.toLowerCase();
	  };

	  processors.firstCharLowerCase = function(str) {
	    return str.charAt(0).toLowerCase() + str.slice(1);
	  };

	  processors.stripPrefix = function(str) {
	    return str.replace(prefixMatch, '');
	  };

	  processors.parseNumbers = function(str) {
	    if (!isNaN(str)) {
	      str = str % 1 === 0 ? parseInt(str, 10) : parseFloat(str);
	    }
	    return str;
	  };

	  processors.parseBooleans = function(str) {
	    if (/^(?:true|false)$/i.test(str)) {
	      str = str.toLowerCase() === 'true';
	    }
	    return str;
	  };

	}).call(commonjsGlobal);
	return processors;
}

var hasRequiredParser;

function requireParser () {
	if (hasRequiredParser) return parser;
	hasRequiredParser = 1;
	(function (exports) {
		// Generated by CoffeeScript 1.12.7
		(function() {
		  var bom, defaults, defineProperty, events, isEmpty, processItem, processors, sax, setImmediate,
		    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
		    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
		    hasProp = {}.hasOwnProperty;

		  sax = requireSax();

		  events = require$$2;

		  bom = requireBom();

		  processors = requireProcessors();

		  setImmediate = require$$4.setImmediate;

		  defaults = requireDefaults().defaults;

		  isEmpty = function(thing) {
		    return typeof thing === "object" && (thing != null) && Object.keys(thing).length === 0;
		  };

		  processItem = function(processors, item, key) {
		    var i, len, process;
		    for (i = 0, len = processors.length; i < len; i++) {
		      process = processors[i];
		      item = process(item, key);
		    }
		    return item;
		  };

		  defineProperty = function(obj, key, value) {
		    var descriptor;
		    descriptor = Object.create(null);
		    descriptor.value = value;
		    descriptor.writable = true;
		    descriptor.enumerable = true;
		    descriptor.configurable = true;
		    return Object.defineProperty(obj, key, descriptor);
		  };

		  exports.Parser = (function(superClass) {
		    extend(Parser, superClass);

		    function Parser(opts) {
		      this.parseStringPromise = bind(this.parseStringPromise, this);
		      this.parseString = bind(this.parseString, this);
		      this.reset = bind(this.reset, this);
		      this.assignOrPush = bind(this.assignOrPush, this);
		      this.processAsync = bind(this.processAsync, this);
		      var key, ref, value;
		      if (!(this instanceof exports.Parser)) {
		        return new exports.Parser(opts);
		      }
		      this.options = {};
		      ref = defaults["0.2"];
		      for (key in ref) {
		        if (!hasProp.call(ref, key)) continue;
		        value = ref[key];
		        this.options[key] = value;
		      }
		      for (key in opts) {
		        if (!hasProp.call(opts, key)) continue;
		        value = opts[key];
		        this.options[key] = value;
		      }
		      if (this.options.xmlns) {
		        this.options.xmlnskey = this.options.attrkey + "ns";
		      }
		      if (this.options.normalizeTags) {
		        if (!this.options.tagNameProcessors) {
		          this.options.tagNameProcessors = [];
		        }
		        this.options.tagNameProcessors.unshift(processors.normalize);
		      }
		      this.reset();
		    }

		    Parser.prototype.processAsync = function() {
		      var chunk, err;
		      try {
		        if (this.remaining.length <= this.options.chunkSize) {
		          chunk = this.remaining;
		          this.remaining = '';
		          this.saxParser = this.saxParser.write(chunk);
		          return this.saxParser.close();
		        } else {
		          chunk = this.remaining.substr(0, this.options.chunkSize);
		          this.remaining = this.remaining.substr(this.options.chunkSize, this.remaining.length);
		          this.saxParser = this.saxParser.write(chunk);
		          return setImmediate(this.processAsync);
		        }
		      } catch (error1) {
		        err = error1;
		        if (!this.saxParser.errThrown) {
		          this.saxParser.errThrown = true;
		          return this.emit(err);
		        }
		      }
		    };

		    Parser.prototype.assignOrPush = function(obj, key, newValue) {
		      if (!(key in obj)) {
		        if (!this.options.explicitArray) {
		          return defineProperty(obj, key, newValue);
		        } else {
		          return defineProperty(obj, key, [newValue]);
		        }
		      } else {
		        if (!(obj[key] instanceof Array)) {
		          defineProperty(obj, key, [obj[key]]);
		        }
		        return obj[key].push(newValue);
		      }
		    };

		    Parser.prototype.reset = function() {
		      var attrkey, charkey, ontext, stack;
		      this.removeAllListeners();
		      this.saxParser = sax.parser(this.options.strict, {
		        trim: false,
		        normalize: false,
		        xmlns: this.options.xmlns
		      });
		      this.saxParser.errThrown = false;
		      this.saxParser.onerror = (function(_this) {
		        return function(error) {
		          _this.saxParser.resume();
		          if (!_this.saxParser.errThrown) {
		            _this.saxParser.errThrown = true;
		            return _this.emit("error", error);
		          }
		        };
		      })(this);
		      this.saxParser.onend = (function(_this) {
		        return function() {
		          if (!_this.saxParser.ended) {
		            _this.saxParser.ended = true;
		            return _this.emit("end", _this.resultObject);
		          }
		        };
		      })(this);
		      this.saxParser.ended = false;
		      this.EXPLICIT_CHARKEY = this.options.explicitCharkey;
		      this.resultObject = null;
		      stack = [];
		      attrkey = this.options.attrkey;
		      charkey = this.options.charkey;
		      this.saxParser.onopentag = (function(_this) {
		        return function(node) {
		          var key, newValue, obj, processedKey, ref;
		          obj = {};
		          obj[charkey] = "";
		          if (!_this.options.ignoreAttrs) {
		            ref = node.attributes;
		            for (key in ref) {
		              if (!hasProp.call(ref, key)) continue;
		              if (!(attrkey in obj) && !_this.options.mergeAttrs) {
		                obj[attrkey] = {};
		              }
		              newValue = _this.options.attrValueProcessors ? processItem(_this.options.attrValueProcessors, node.attributes[key], key) : node.attributes[key];
		              processedKey = _this.options.attrNameProcessors ? processItem(_this.options.attrNameProcessors, key) : key;
		              if (_this.options.mergeAttrs) {
		                _this.assignOrPush(obj, processedKey, newValue);
		              } else {
		                defineProperty(obj[attrkey], processedKey, newValue);
		              }
		            }
		          }
		          obj["#name"] = _this.options.tagNameProcessors ? processItem(_this.options.tagNameProcessors, node.name) : node.name;
		          if (_this.options.xmlns) {
		            obj[_this.options.xmlnskey] = {
		              uri: node.uri,
		              local: node.local
		            };
		          }
		          return stack.push(obj);
		        };
		      })(this);
		      this.saxParser.onclosetag = (function(_this) {
		        return function() {
		          var cdata, emptyStr, key, node, nodeName, obj, objClone, old, s, xpath;
		          obj = stack.pop();
		          nodeName = obj["#name"];
		          if (!_this.options.explicitChildren || !_this.options.preserveChildrenOrder) {
		            delete obj["#name"];
		          }
		          if (obj.cdata === true) {
		            cdata = obj.cdata;
		            delete obj.cdata;
		          }
		          s = stack[stack.length - 1];
		          if (obj[charkey].match(/^\s*$/) && !cdata) {
		            emptyStr = obj[charkey];
		            delete obj[charkey];
		          } else {
		            if (_this.options.trim) {
		              obj[charkey] = obj[charkey].trim();
		            }
		            if (_this.options.normalize) {
		              obj[charkey] = obj[charkey].replace(/\s{2,}/g, " ").trim();
		            }
		            obj[charkey] = _this.options.valueProcessors ? processItem(_this.options.valueProcessors, obj[charkey], nodeName) : obj[charkey];
		            if (Object.keys(obj).length === 1 && charkey in obj && !_this.EXPLICIT_CHARKEY) {
		              obj = obj[charkey];
		            }
		          }
		          if (isEmpty(obj)) {
		            if (typeof _this.options.emptyTag === 'function') {
		              obj = _this.options.emptyTag();
		            } else {
		              obj = _this.options.emptyTag !== '' ? _this.options.emptyTag : emptyStr;
		            }
		          }
		          if (_this.options.validator != null) {
		            xpath = "/" + ((function() {
		              var i, len, results;
		              results = [];
		              for (i = 0, len = stack.length; i < len; i++) {
		                node = stack[i];
		                results.push(node["#name"]);
		              }
		              return results;
		            })()).concat(nodeName).join("/");
		            (function() {
		              var err;
		              try {
		                return obj = _this.options.validator(xpath, s && s[nodeName], obj);
		              } catch (error1) {
		                err = error1;
		                return _this.emit("error", err);
		              }
		            })();
		          }
		          if (_this.options.explicitChildren && !_this.options.mergeAttrs && typeof obj === 'object') {
		            if (!_this.options.preserveChildrenOrder) {
		              node = {};
		              if (_this.options.attrkey in obj) {
		                node[_this.options.attrkey] = obj[_this.options.attrkey];
		                delete obj[_this.options.attrkey];
		              }
		              if (!_this.options.charsAsChildren && _this.options.charkey in obj) {
		                node[_this.options.charkey] = obj[_this.options.charkey];
		                delete obj[_this.options.charkey];
		              }
		              if (Object.getOwnPropertyNames(obj).length > 0) {
		                node[_this.options.childkey] = obj;
		              }
		              obj = node;
		            } else if (s) {
		              s[_this.options.childkey] = s[_this.options.childkey] || [];
		              objClone = {};
		              for (key in obj) {
		                if (!hasProp.call(obj, key)) continue;
		                defineProperty(objClone, key, obj[key]);
		              }
		              s[_this.options.childkey].push(objClone);
		              delete obj["#name"];
		              if (Object.keys(obj).length === 1 && charkey in obj && !_this.EXPLICIT_CHARKEY) {
		                obj = obj[charkey];
		              }
		            }
		          }
		          if (stack.length > 0) {
		            return _this.assignOrPush(s, nodeName, obj);
		          } else {
		            if (_this.options.explicitRoot) {
		              old = obj;
		              obj = {};
		              defineProperty(obj, nodeName, old);
		            }
		            _this.resultObject = obj;
		            _this.saxParser.ended = true;
		            return _this.emit("end", _this.resultObject);
		          }
		        };
		      })(this);
		      ontext = (function(_this) {
		        return function(text) {
		          var charChild, s;
		          s = stack[stack.length - 1];
		          if (s) {
		            s[charkey] += text;
		            if (_this.options.explicitChildren && _this.options.preserveChildrenOrder && _this.options.charsAsChildren && (_this.options.includeWhiteChars || text.replace(/\\n/g, '').trim() !== '')) {
		              s[_this.options.childkey] = s[_this.options.childkey] || [];
		              charChild = {
		                '#name': '__text__'
		              };
		              charChild[charkey] = text;
		              if (_this.options.normalize) {
		                charChild[charkey] = charChild[charkey].replace(/\s{2,}/g, " ").trim();
		              }
		              s[_this.options.childkey].push(charChild);
		            }
		            return s;
		          }
		        };
		      })(this);
		      this.saxParser.ontext = ontext;
		      return this.saxParser.oncdata = (function(_this) {
		        return function(text) {
		          var s;
		          s = ontext(text);
		          if (s) {
		            return s.cdata = true;
		          }
		        };
		      })();
		    };

		    Parser.prototype.parseString = function(str, cb) {
		      var err;
		      if ((cb != null) && typeof cb === "function") {
		        this.on("end", function(result) {
		          this.reset();
		          return cb(null, result);
		        });
		        this.on("error", function(err) {
		          this.reset();
		          return cb(err);
		        });
		      }
		      try {
		        str = str.toString();
		        if (str.trim() === '') {
		          this.emit("end", null);
		          return true;
		        }
		        str = bom.stripBOM(str);
		        if (this.options.async) {
		          this.remaining = str;
		          setImmediate(this.processAsync);
		          return this.saxParser;
		        }
		        return this.saxParser.write(str).close();
		      } catch (error1) {
		        err = error1;
		        if (!(this.saxParser.errThrown || this.saxParser.ended)) {
		          this.emit('error', err);
		          return this.saxParser.errThrown = true;
		        } else if (this.saxParser.ended) {
		          throw err;
		        }
		      }
		    };

		    Parser.prototype.parseStringPromise = function(str) {
		      return new Promise((function(_this) {
		        return function(resolve, reject) {
		          return _this.parseString(str, function(err, value) {
		            if (err) {
		              return reject(err);
		            } else {
		              return resolve(value);
		            }
		          });
		        };
		      })(this));
		    };

		    return Parser;

		  })(events);

		  exports.parseString = function(str, a, b) {
		    var cb, options, parser;
		    if (b != null) {
		      if (typeof b === 'function') {
		        cb = b;
		      }
		      if (typeof a === 'object') {
		        options = a;
		      }
		    } else {
		      if (typeof a === 'function') {
		        cb = a;
		      }
		      options = {};
		    }
		    parser = new exports.Parser(options);
		    return parser.parseString(str, cb);
		  };

		  exports.parseStringPromise = function(str, a) {
		    var options, parser;
		    if (typeof a === 'object') {
		      options = a;
		    }
		    parser = new exports.Parser(options);
		    return parser.parseStringPromise(str);
		  };

		}).call(commonjsGlobal); 
	} (parser));
	return parser;
}

var parseString;
// Generated by CoffeeScript 1.12.7
(function() {
  var builder, defaults, parser, extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  defaults = requireDefaults();

  builder = requireBuilder();

  parser = requireParser();

  requireProcessors();

  defaults.defaults;

  ((function(superClass) {
    extend(ValidationError, superClass);

    function ValidationError(message) {
      this.message = message;
    }

    return ValidationError;

  }))(Error);

  builder.Builder;

  parser.Parser;

  parseString = parser.parseString;

  parser.parseStringPromise;

}).call(commonjsGlobal);

var cosJsSdkV5 = {exports: {}};

(function (module, exports) {
	(function webpackUniversalModuleDefinition(root, factory) {
		module.exports = factory();
	})(commonjsGlobal, function() {
	return /******/ (function(modules) { // webpackBootstrap
	/******/ 	// The module cache
	/******/ 	var installedModules = {};
	/******/
	/******/ 	// The require function
	/******/ 	function __webpack_require__(moduleId) {
	/******/
	/******/ 		// Check if module is in cache
	/******/ 		if(installedModules[moduleId]) {
	/******/ 			return installedModules[moduleId].exports;
	/******/ 		}
	/******/ 		// Create a new module (and put it into the cache)
	/******/ 		var module = installedModules[moduleId] = {
	/******/ 			i: moduleId,
	/******/ 			l: false,
	/******/ 			exports: {}
	/******/ 		};
	/******/
	/******/ 		// Execute the module function
	/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
	/******/
	/******/ 		// Flag the module as loaded
	/******/ 		module.l = true;
	/******/
	/******/ 		// Return the exports of the module
	/******/ 		return module.exports;
	/******/ 	}
	/******/
	/******/
	/******/ 	// expose the modules object (__webpack_modules__)
	/******/ 	__webpack_require__.m = modules;
	/******/
	/******/ 	// expose the module cache
	/******/ 	__webpack_require__.c = installedModules;
	/******/
	/******/ 	// define getter function for harmony exports
	/******/ 	__webpack_require__.d = function(exports, name, getter) {
	/******/ 		if(!__webpack_require__.o(exports, name)) {
	/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
	/******/ 		}
	/******/ 	};
	/******/
	/******/ 	// define __esModule on exports
	/******/ 	__webpack_require__.r = function(exports) {
	/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
	/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
	/******/ 		}
	/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
	/******/ 	};
	/******/
	/******/ 	// create a fake namespace object
	/******/ 	// mode & 1: value is a module id, require it
	/******/ 	// mode & 2: merge all properties of value into the ns
	/******/ 	// mode & 4: return value when already ns object
	/******/ 	// mode & 8|1: behave like require
	/******/ 	__webpack_require__.t = function(value, mode) {
	/******/ 		if(mode & 1) value = __webpack_require__(value);
	/******/ 		if(mode & 8) return value;
	/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
	/******/ 		var ns = Object.create(null);
	/******/ 		__webpack_require__.r(ns);
	/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
	/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
	/******/ 		return ns;
	/******/ 	};
	/******/
	/******/ 	// getDefaultExport function for compatibility with non-harmony modules
	/******/ 	__webpack_require__.n = function(module) {
	/******/ 		var getter = module && module.__esModule ?
	/******/ 			function getDefault() { return module['default']; } :
	/******/ 			function getModuleExports() { return module; };
	/******/ 		__webpack_require__.d(getter, 'a', getter);
	/******/ 		return getter;
	/******/ 	};
	/******/
	/******/ 	// Object.prototype.hasOwnProperty.call
	/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
	/******/
	/******/ 	// __webpack_public_path__
	/******/ 	__webpack_require__.p = "/dist/";
	/******/
	/******/
	/******/ 	// Load entry module and return exports
	/******/ 	return __webpack_require__(__webpack_require__.s = "./index.js");
	/******/ })
	/************************************************************************/
	/******/ ({

	/***/ "./index.js":
	/*!******************!*\
	  !*** ./index.js ***!
	  \******************/
	/*! no static exports found */
	/***/ (function(module, exports, __webpack_require__) {

	var COS = __webpack_require__(/*! ./src/cos */ "./src/cos.js");

	module.exports = COS;

	/***/ }),

	/***/ "./lib/base64.js":
	/*!***********************!*\
	  !*** ./lib/base64.js ***!
	  \***********************/
	/*! no static exports found */
	/***/ (function(module, exports) {

	/*
	 * $Id: base64.js,v 2.15 2014/04/05 12:58:57 dankogai Exp dankogai $
	 *
	 *  Licensed under the BSD 3-Clause License.
	 *    http://opensource.org/licenses/BSD-3-Clause
	 *
	 *  References:
	 *    http://en.wikipedia.org/wiki/Base64
	 */
	var Base64 = function (global) {
	  global = global || {};


	  var _Base64 = global.Base64;
	  var version = "2.1.9"; // if node.js, we use Buffer

	  var b64chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';

	  var b64tab = function (bin) {
	    var t = {};

	    for (var i = 0, l = bin.length; i < l; i++) {
	      t[bin.charAt(i)] = i;
	    }

	    return t;
	  }(b64chars);

	  var fromCharCode = String.fromCharCode; // encoder stuff

	  var cb_utob = function cb_utob(c) {
	    if (c.length < 2) {
	      var cc = c.charCodeAt(0);
	      return cc < 0x80 ? c : cc < 0x800 ? fromCharCode(0xc0 | cc >>> 6) + fromCharCode(0x80 | cc & 0x3f) : fromCharCode(0xe0 | cc >>> 12 & 0x0f) + fromCharCode(0x80 | cc >>> 6 & 0x3f) + fromCharCode(0x80 | cc & 0x3f);
	    } else {
	      var cc = 0x10000 + (c.charCodeAt(0) - 0xD800) * 0x400 + (c.charCodeAt(1) - 0xDC00);
	      return fromCharCode(0xf0 | cc >>> 18 & 0x07) + fromCharCode(0x80 | cc >>> 12 & 0x3f) + fromCharCode(0x80 | cc >>> 6 & 0x3f) + fromCharCode(0x80 | cc & 0x3f);
	    }
	  };

	  var re_utob = /[\uD800-\uDBFF][\uDC00-\uDFFFF]|[^\x00-\x7F]/g;

	  var utob = function utob(u) {
	    return u.replace(re_utob, cb_utob);
	  };

	  var cb_encode = function cb_encode(ccc) {
	    var padlen = [0, 2, 1][ccc.length % 3],
	        ord = ccc.charCodeAt(0) << 16 | (ccc.length > 1 ? ccc.charCodeAt(1) : 0) << 8 | (ccc.length > 2 ? ccc.charCodeAt(2) : 0),
	        chars = [b64chars.charAt(ord >>> 18), b64chars.charAt(ord >>> 12 & 63), padlen >= 2 ? '=' : b64chars.charAt(ord >>> 6 & 63), padlen >= 1 ? '=' : b64chars.charAt(ord & 63)];
	    return chars.join('');
	  };

	  var btoa = global.btoa ? function (b) {
	    return global.btoa(b);
	  } : function (b) {
	    return b.replace(/[\s\S]{1,3}/g, cb_encode);
	  };

	  var _encode = function (u) {
	    return btoa(utob(u));
	  };

	  var encode = function encode(u, urisafe) {
	    return !urisafe ? _encode(String(u)) : _encode(String(u)).replace(/[+\/]/g, function (m0) {
	      return m0 == '+' ? '-' : '_';
	    }).replace(/=/g, '');
	  };

	  var encodeURI = function encodeURI(u) {
	    return encode(u, true);
	  }; // decoder stuff


	  var re_btou = new RegExp(['[\xC0-\xDF][\x80-\xBF]', '[\xE0-\xEF][\x80-\xBF]{2}', '[\xF0-\xF7][\x80-\xBF]{3}'].join('|'), 'g');

	  var cb_btou = function cb_btou(cccc) {
	    switch (cccc.length) {
	      case 4:
	        var cp = (0x07 & cccc.charCodeAt(0)) << 18 | (0x3f & cccc.charCodeAt(1)) << 12 | (0x3f & cccc.charCodeAt(2)) << 6 | 0x3f & cccc.charCodeAt(3),
	            offset = cp - 0x10000;
	        return fromCharCode((offset >>> 10) + 0xD800) + fromCharCode((offset & 0x3FF) + 0xDC00);

	      case 3:
	        return fromCharCode((0x0f & cccc.charCodeAt(0)) << 12 | (0x3f & cccc.charCodeAt(1)) << 6 | 0x3f & cccc.charCodeAt(2));

	      default:
	        return fromCharCode((0x1f & cccc.charCodeAt(0)) << 6 | 0x3f & cccc.charCodeAt(1));
	    }
	  };

	  var btou = function btou(b) {
	    return b.replace(re_btou, cb_btou);
	  };

	  var cb_decode = function cb_decode(cccc) {
	    var len = cccc.length,
	        padlen = len % 4,
	        n = (len > 0 ? b64tab[cccc.charAt(0)] << 18 : 0) | (len > 1 ? b64tab[cccc.charAt(1)] << 12 : 0) | (len > 2 ? b64tab[cccc.charAt(2)] << 6 : 0) | (len > 3 ? b64tab[cccc.charAt(3)] : 0),
	        chars = [fromCharCode(n >>> 16), fromCharCode(n >>> 8 & 0xff), fromCharCode(n & 0xff)];
	    chars.length -= [0, 0, 2, 1][padlen];
	    return chars.join('');
	  };

	  var atob = global.atob ? function (a) {
	    return global.atob(a);
	  } : function (a) {
	    return a.replace(/[\s\S]{1,4}/g, cb_decode);
	  };

	  var _decode = function (a) {
	    return btou(atob(a));
	  };

	  var decode = function decode(a) {
	    return _decode(String(a).replace(/[-_]/g, function (m0) {
	      return m0 == '-' ? '+' : '/';
	    }).replace(/[^A-Za-z0-9\+\/]/g, ''));
	  };

	  var noConflict = function noConflict() {
	    var Base64 = global.Base64;
	    global.Base64 = _Base64;
	    return Base64;
	  }; // export Base64


	  var Base64 = {
	    VERSION: version,
	    atob: atob,
	    btoa: btoa,
	    fromBase64: decode,
	    toBase64: encode,
	    utob: utob,
	    encode: encode,
	    encodeURI: encodeURI,
	    btou: btou,
	    decode: decode,
	    noConflict: noConflict
	  };
	  return Base64;
	}();

	module.exports = Base64;

	/***/ }),

	/***/ "./lib/beacon.min.js":
	/*!***************************!*\
	  !*** ./lib/beacon.min.js ***!
	  \***************************/
	/*! no static exports found */
	/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;var _typeof = __webpack_require__(/*! @babel/runtime/helpers/typeof */ "./node_modules/@babel/runtime/helpers/typeof.js");

	!function (t, e) {
	  "object" == ( _typeof(exports)) && "undefined" != typeof module ? module.exports = e() :  !(__WEBPACK_AMD_DEFINE_FACTORY__ = (e),
					__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
					(__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) :
					__WEBPACK_AMD_DEFINE_FACTORY__),
					__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) ;
	}(this, function () {

	  var _t = function t(e, n) {
	    return _t = Object.setPrototypeOf || {
	      __proto__: []
	    } instanceof Array && function (t, e) {
	      t.__proto__ = e;
	    } || function (t, e) {
	      for (var n in e) {
	        Object.prototype.hasOwnProperty.call(e, n) && (t[n] = e[n]);
	      }
	    }, _t(e, n);
	  };

	  var _e = function e() {
	    return _e = Object.assign || function (t) {
	      for (var e, n = 1, r = arguments.length; n < r; n++) {
	        for (var o in e = arguments[n]) {
	          Object.prototype.hasOwnProperty.call(e, o) && (t[o] = e[o]);
	        }
	      }

	      return t;
	    }, _e.apply(this, arguments);
	  };

	  function n(t, e, n, r) {
	    return new (n || (n = Promise))(function (o, i) {
	      function s(t) {
	        try {
	          u(r.next(t));
	        } catch (t) {
	          i(t);
	        }
	      }

	      function a(t) {
	        try {
	          u(r.throw(t));
	        } catch (t) {
	          i(t);
	        }
	      }

	      function u(t) {
	        var e;
	        t.done ? o(t.value) : (e = t.value, e instanceof n ? e : new n(function (t) {
	          t(e);
	        })).then(s, a);
	      }

	      u((r = r.apply(t, e || [])).next());
	    });
	  }

	  function r(t, e) {
	    var n,
	        r,
	        o,
	        i,
	        s = {
	      label: 0,
	      sent: function sent() {
	        if (1 & o[0]) throw o[1];
	        return o[1];
	      },
	      trys: [],
	      ops: []
	    };
	    return i = {
	      next: a(0),
	      throw: a(1),
	      return: a(2)
	    }, "function" == typeof Symbol && (i[Symbol.iterator] = function () {
	      return this;
	    }), i;

	    function a(i) {
	      return function (a) {
	        return function (i) {
	          if (n) throw new TypeError("Generator is already executing.");

	          for (; s;) {
	            try {
	              if (n = 1, r && (o = 2 & i[0] ? r.return : i[0] ? r.throw || ((o = r.return) && o.call(r), 0) : r.next) && !(o = o.call(r, i[1])).done) return o;

	              switch (r = 0, o && (i = [2 & i[0], o.value]), i[0]) {
	                case 0:
	                case 1:
	                  o = i;
	                  break;

	                case 4:
	                  return s.label++, {
	                    value: i[1],
	                    done: !1
	                  };

	                case 5:
	                  s.label++, r = i[1], i = [0];
	                  continue;

	                case 7:
	                  i = s.ops.pop(), s.trys.pop();
	                  continue;

	                default:
	                  if (!(o = s.trys, (o = o.length > 0 && o[o.length - 1]) || 6 !== i[0] && 2 !== i[0])) {
	                    s = 0;
	                    continue;
	                  }

	                  if (3 === i[0] && (!o || i[1] > o[0] && i[1] < o[3])) {
	                    s.label = i[1];
	                    break;
	                  }

	                  if (6 === i[0] && s.label < o[1]) {
	                    s.label = o[1], o = i;
	                    break;
	                  }

	                  if (o && s.label < o[2]) {
	                    s.label = o[2], s.ops.push(i);
	                    break;
	                  }

	                  o[2] && s.ops.pop(), s.trys.pop();
	                  continue;
	              }

	              i = e.call(t, s);
	            } catch (t) {
	              i = [6, t], r = 0;
	            } finally {
	              n = o = 0;
	            }
	          }

	          if (5 & i[0]) throw i[1];
	          return {
	            value: i[0] ? i[1] : void 0,
	            done: !0
	          };
	        }([i, a]);
	      };
	    }
	  }

	  var o = "__BEACON_",
	      i = "__BEACON_deviceId",
	      s = "last_report_time",
	      a = "sending_event_ids",
	      u = "beacon_config",
	      c = "beacon_config_request_time",
	      l = function () {
	    function t() {
	      var t = this;
	      this.emit = function (e, n) {
	        if (t) {
	          var r,
	              o = t.__EventsList[e];

	          if (null == o ? void 0 : o.length) {
	            o = o.slice();

	            for (var i = 0; i < o.length; i++) {
	              r = o[i];

	              try {
	                var s = r.callback.apply(t, [n]);
	                if (1 === r.type && t.remove(e, r.callback), !1 === s) break;
	              } catch (t) {
	                throw t;
	              }
	            }
	          }

	          return t;
	        }
	      }, this.__EventsList = {};
	    }

	    return t.prototype.indexOf = function (t, e) {
	      for (var n = 0; n < t.length; n++) {
	        if (t[n].callback === e) return n;
	      }

	      return -1;
	    }, t.prototype.on = function (t, e, n) {
	      if (void 0 === n && (n = 0), this) {
	        var r = this.__EventsList[t];

	        if (r || (r = this.__EventsList[t] = []), -1 === this.indexOf(r, e)) {
	          var o = {
	            name: t,
	            type: n || 0,
	            callback: e
	          };
	          return r.push(o), this;
	        }

	        return this;
	      }
	    }, t.prototype.one = function (t, e) {
	      this.on(t, e, 1);
	    }, t.prototype.remove = function (t, e) {
	      if (this) {
	        var n = this.__EventsList[t];
	        if (!n) return null;

	        if (!e) {
	          try {
	            delete this.__EventsList[t];
	          } catch (t) {}

	          return null;
	        }

	        if (n.length) {
	          var r = this.indexOf(n, e);
	          n.splice(r, 1);
	        }

	        return this;
	      }
	    }, t;
	  }();

	  function p(t, e) {
	    for (var n = {}, r = 0, o = Object.keys(t); r < o.length; r++) {
	      var i = o[r],
	          s = t[i];
	      if ("string" == typeof s) n[h(i)] = h(s);else {
	        if (e) throw new Error("value mast be string  !!!!");
	        n[h(String(i))] = h(String(s));
	      }
	    }

	    return n;
	  }

	  function h(t) {
	    if ("string" != typeof t) return t;

	    try {
	      return t.replace(new RegExp("\\|", "g"), "%7C").replace(new RegExp("\\&", "g"), "%26").replace(new RegExp("\\=", "g"), "%3D").replace(new RegExp("\\+", "g"), "%2B");
	    } catch (t) {
	      return "";
	    }
	  }

	  function f(t) {
	    return String(t.A99) + String(t.A100);
	  }

	  var d = function d() {};

	  var v = function () {
	    function t(t) {
	      var n = this;
	      this.lifeCycle = new l(), this.uploadJobQueue = [], this.additionalParams = {}, this.delayTime = 0, this._normalLogPipeline = function (t) {
	        if (!t || !t.reduce || !t.length) throw new TypeError("createPipeline 方法需要传入至少有一个 pipe 的数组");
	        return 1 === t.length ? function (e, n) {
	          t[0](e, n || d);
	        } : t.reduce(function (t, e) {
	          return function (n, r) {
	            return void 0 === r && (r = d), t(n, function (t) {
	              return null == e ? void 0 : e(t, r);
	            });
	          };
	        });
	      }([function (t) {
	        n.send({
	          url: n.strategy.getUploadUrl(),
	          data: t,
	          method: "post",
	          contentType: "application/json;charset=UTF-8"
	        }, function () {
	          var e = n.config.onReportSuccess;
	          "function" == typeof e && e(JSON.stringify(t.events));
	        }, function () {
	          var e = n.config.onReportFail;
	          "function" == typeof e && e(JSON.stringify(t.events));
	        });
	      }]), function (t, e) {
	        if (!t) throw e instanceof Error ? e : new Error(e);
	      }(Boolean(t.appkey), "appkey must be initial"), this.config = _e({}, t);
	    }

	    return t.prototype.onUserAction = function (t, e) {
	      this.preReport(t, e, !1);
	    }, t.prototype.onDirectUserAction = function (t, e) {
	      this.preReport(t, e, !0);
	    }, t.prototype.preReport = function (t, e, n) {
	      t ? this.strategy.isEventUpOnOff() && (this.strategy.isBlackEvent(t) || this.strategy.isSampleEvent(t) || this.onReport(t, e, n)) : this.errorReport.reportError("602", " no eventCode");
	    }, t.prototype.addAdditionalParams = function (t) {
	      for (var e = 0, n = Object.keys(t); e < n.length; e++) {
	        var r = n[e];
	        this.additionalParams[r] = t[r];
	      }
	    }, t.prototype.setChannelId = function (t) {
	      this.commonInfo.channelID = String(t);
	    }, t.prototype.setOpenId = function (t) {
	      this.commonInfo.openid = String(t);
	    }, t.prototype.setUnionid = function (t) {
	      this.commonInfo.unid = String(t);
	    }, t.prototype.getDeviceId = function () {
	      return this.commonInfo.deviceId;
	    }, t.prototype.getCommonInfo = function () {
	      return this.commonInfo;
	    }, t.prototype.removeSendingId = function (t) {
	      try {
	        var e = JSON.parse(this.storage.getItem(a)),
	            n = e.indexOf(t);
	        -1 != n && (e.splice(n, 1), this.storage.setItem(a, JSON.stringify(e)));
	      } catch (t) {}
	    }, t;
	  }(),
	      g = function () {
	    function t(t, e, n, r) {
	      this.requestParams = {}, this.network = r, this.requestParams.attaid = "00400014144", this.requestParams.token = "6478159937", this.requestParams.product_id = t.appkey, this.requestParams.platform = n, this.requestParams.uin = e.deviceId, this.requestParams.model = "", this.requestParams.os = n, this.requestParams.app_version = t.appVersion, this.requestParams.sdk_version = e.sdkVersion, this.requestParams.error_stack = "", this.uploadUrl = t.isOversea ? "https://htrace.wetvinfo.com/kv" : "https://h.trace.qq.com/kv";
	    }

	    return t.prototype.reportError = function (t, e) {
	      this.requestParams._dc = Math.random(), this.requestParams.error_msg = e, this.requestParams.error_code = t, this.network.get(this.uploadUrl, {
	        params: this.requestParams
	      }).catch(function (t) {});
	    }, t;
	  }(),
	      y = function () {
	    function t(t, e, n, r, o) {
	      this.strategy = {
	        isEventUpOnOff: !0,
	        httpsUploadUrl: "https://otheve.beacon.qq.com/analytics/v2_upload",
	        requestInterval: 30,
	        blacklist: [],
	        samplelist: []
	      }, this.realSample = {}, this.appkey = "", this.needQueryConfig = !0, this.appkey = e.appkey, this.storage = r, this.needQueryConfig = t;

	      try {
	        var i = JSON.parse(this.storage.getItem(u));
	        i && this.processData(i);
	      } catch (t) {}

	      e.isOversea && (this.strategy.httpsUploadUrl = "https://svibeacon.onezapp.com/analytics/v2_upload"), !e.isOversea && this.needRequestConfig() && this.requestConfig(e.appVersion, n, o);
	    }

	    return t.prototype.requestConfig = function (t, e, n) {
	      var r = this;
	      this.storage.setItem(c, Date.now().toString()), n.post("https://oth.str.beacon.qq.com/trpc.beacon.configserver.BeaconConfigService/QueryConfig", {
	        platformId: "undefined" == typeof wx ? "3" : "4",
	        mainAppKey: this.appkey,
	        appVersion: t,
	        sdkVersion: e.sdkVersion,
	        osVersion: e.userAgent,
	        model: "",
	        packageName: "",
	        params: {
	          A3: e.deviceId
	        }
	      }).then(function (t) {
	        if (0 == t.data.ret) try {
	          var e = JSON.parse(t.data.beaconConfig);
	          e && (r.processData(e), r.storage.setItem(u, t.data.beaconConfig));
	        } catch (t) {} else r.processData(null), r.storage.setItem(u, "");
	      }).catch(function (t) {});
	    }, t.prototype.processData = function (t) {
	      var e, n, r, o, i;
	      this.strategy.isEventUpOnOff = null !== (e = null == t ? void 0 : t.isEventUpOnOff) && void 0 !== e ? e : this.strategy.isEventUpOnOff, this.strategy.httpsUploadUrl = null !== (n = null == t ? void 0 : t.httpsUploadUrl) && void 0 !== n ? n : this.strategy.httpsUploadUrl, this.strategy.requestInterval = null !== (r = null == t ? void 0 : t.requestInterval) && void 0 !== r ? r : this.strategy.requestInterval, this.strategy.blacklist = null !== (o = null == t ? void 0 : t.blacklist) && void 0 !== o ? o : this.strategy.blacklist, this.strategy.samplelist = null !== (i = null == t ? void 0 : t.samplelist) && void 0 !== i ? i : this.strategy.samplelist;

	      for (var s = 0, a = this.strategy.samplelist; s < a.length; s++) {
	        var u = a[s].split(",");
	        2 == u.length && (this.realSample[u[0]] = u[1]);
	      }
	    }, t.prototype.needRequestConfig = function () {
	      if (!this.needQueryConfig) return !1;
	      var t = Number(this.storage.getItem(c));
	      return Date.now() - t > 60 * this.strategy.requestInterval * 1e3;
	    }, t.prototype.getUploadUrl = function () {
	      return this.strategy.httpsUploadUrl + "?appkey=" + this.appkey;
	    }, t.prototype.isBlackEvent = function (t) {
	      return -1 != this.strategy.blacklist.indexOf(t);
	    }, t.prototype.isEventUpOnOff = function () {
	      return this.strategy.isEventUpOnOff;
	    }, t.prototype.isSampleEvent = function (t) {
	      return !!Object.prototype.hasOwnProperty.call(this.realSample, t) && this.realSample[t] < Math.floor(Math.random() * Math.floor(1e4));
	    }, t;
	  }(),
	      m = "session_storage_key",
	      w = function () {
	    function t(t, e, n) {
	      this.getSessionStackDepth = 0, this.beacon = n, this.storage = t, this.duration = e, this.appkey = n.config.appkey;
	    }

	    return t.prototype.getSession = function () {
	      this.getSessionStackDepth += 1;
	      var t = this.storage.getItem(m);
	      if (!t) return this.createSession();
	      var e = "",
	          n = 0;

	      try {
	        var r = JSON.parse(t) || {
	          sessionId: void 0,
	          sessionStart: void 0
	        };
	        if (!r.sessionId || !r.sessionStart) return this.createSession();
	        var o = Number(this.storage.getItem(s));
	        if (Date.now() - o > this.duration) return this.createSession();
	        e = r.sessionId, n = r.sessionStart, this.getSessionStackDepth = 0;
	      } catch (t) {}

	      return {
	        sessionId: e,
	        sessionStart: n
	      };
	    }, t.prototype.createSession = function () {
	      var t = Date.now(),
	          e = {
	        sessionId: this.appkey + "_" + t.toString(),
	        sessionStart: t
	      };
	      this.storage.setItem(m, JSON.stringify(e)), this.storage.setItem(s, t.toString());
	      var n = "is_new_user",
	          r = this.storage.getItem(n);
	      return this.getSessionStackDepth <= 1 && this.beacon.onDirectUserAction("rqd_applaunched", {
	        A21: r ? "N" : "Y"
	      }), this.storage.setItem(n, JSON.stringify(!1)), e;
	    }, t;
	  }();

	  function b() {
	    var t = navigator.userAgent,
	        e = t.indexOf("compatible") > -1 && t.indexOf("MSIE") > -1,
	        n = t.indexOf("Edge") > -1 && !e,
	        r = t.indexOf("Trident") > -1 && t.indexOf("rv:11.0") > -1;

	    if (e) {
	      new RegExp("MSIE (\\d+\\.\\d+);").test(t);
	      var o = parseFloat(RegExp.$1);
	      return 7 == o ? 7 : 8 == o ? 8 : 9 == o ? 9 : 10 == o ? 10 : 6;
	    }

	    return n ? -2 : r ? 11 : -1;
	  }

	  function S(t, e) {
	    var n, r;
	    return (n = "https://tun-cos-1258344701.file.myqcloud.com/fp.js", void 0 === r && (r = Date.now() + "-" + Math.random()), new Promise(function (t, e) {
	      if (document.getElementById(r)) t(void 0);else {
	        var o = document.getElementsByTagName("head")[0],
	            i = document.createElement("script");
	        i.onload = function () {
	          return function () {
	            i.onload = null, t(void 0);
	          };
	        }, i.onerror = function (t) {
	          i.onerror = null, o.removeChild(i), e(t);
	        }, i.src = n, i.id = r, o.appendChild(i);
	      }
	    })).then(function () {
	      new Fingerprint().getQimei36(t, e);
	    }).catch(function (t) {}), "";
	  }

	  var _I = function I() {
	    return (_I = Object.assign || function (t) {
	      for (var e, n = 1, r = arguments.length; n < r; n++) {
	        for (var o in e = arguments[n]) {
	          Object.prototype.hasOwnProperty.call(e, o) && (t[o] = e[o]);
	        }
	      }

	      return t;
	    }).apply(this, arguments);
	  };

	  var E,
	      k = function () {
	    function t(t, e) {
	      void 0 === e && (e = {}), this.reportOptions = {}, this.config = t, this.reportOptions = e;
	    }

	    return t.canUseDB = function () {
	      return !!(null === window || void 0 === window ? void 0 : window.indexedDB);
	    }, t.prototype.openDB = function () {
	      var e = this;
	      return new Promise(function (n, r) {
	        if (!t.canUseDB()) return r({
	          message: "当前不支持 indexeddb"
	        });
	        var o = e.config,
	            i = o.name,
	            s = o.version,
	            a = o.stores,
	            u = indexedDB.open(i, s);
	        u.onsuccess = function () {
	          e.db = u.result, n(), _I({
	            result: 1,
	            func: "open",
	            params: JSON.stringify(e.config)
	          }, e.reportOptions);
	        }, u.onerror = function (t) {
	          var n, o;
	          r(t), _I({
	            result: 0,
	            func: "open",
	            params: JSON.stringify(e.config),
	            error_msg: null === (o = null === (n = t.target) || void 0 === n ? void 0 : n.error) || void 0 === o ? void 0 : o.message
	          }, e.reportOptions);
	        }, u.onupgradeneeded = function () {
	          e.db = u.result;

	          try {
	            null == a || a.forEach(function (t) {
	              e.createStore(t);
	            });
	          } catch (t) {
	            _I({
	              result: 0,
	              func: "open",
	              params: JSON.stringify(e.config),
	              error_msg: t.message
	            }, e.reportOptions), r(t);
	          }
	        };
	      });
	    }, t.prototype.useStore = function (t) {
	      return this.storeName = t, this;
	    }, t.prototype.deleteDB = function () {
	      var t = this;
	      return this.closeDB(), new Promise(function (e, n) {
	        var r = indexedDB.deleteDatabase(t.config.name);
	        r.onsuccess = function () {
	          return e();
	        }, r.onerror = n;
	      });
	    }, t.prototype.closeDB = function () {
	      var t;
	      null === (t = this.db) || void 0 === t || t.close(), this.db = null;
	    }, t.prototype.getStoreCount = function () {
	      var t = this;
	      return new Promise(function (e, n) {
	        var r = t.getStore("readonly").count();
	        r.onsuccess = function () {
	          return e(r.result);
	        }, r.onerror = n;
	      });
	    }, t.prototype.clearStore = function () {
	      var t = this;
	      return new Promise(function (e, n) {
	        var r = t.getStore("readwrite").clear();
	        r.onsuccess = function () {
	          return e();
	        }, r.onerror = n;
	      });
	    }, t.prototype.add = function (t, e) {
	      var n = this;
	      return new Promise(function (r, o) {
	        var i = n.getStore("readwrite").add(t, e);
	        i.onsuccess = function () {
	          r(i.result);
	        }, i.onerror = o;
	      });
	    }, t.prototype.put = function (t, e) {
	      var n = this;
	      return new Promise(function (r, o) {
	        var i = n.getStore("readwrite").put(t, e);
	        i.onsuccess = function () {
	          r(i.result);
	        }, i.onerror = o;
	      });
	    }, t.prototype.getStoreAllData = function () {
	      var t = this;
	      return new Promise(function (e, n) {
	        var r = t.getStore("readonly").openCursor(),
	            o = [];
	        r.onsuccess = function () {
	          var t;

	          if (null === (t = r.result) || void 0 === t ? void 0 : t.value) {
	            var n = r.result.value;
	            o.push(n), r.result.continue();
	          } else e(o);
	        }, r.onerror = n;
	      });
	    }, t.prototype.getDataRangeByIndex = function (t, e, n, r, o) {
	      var i = this;
	      return new Promise(function (s, a) {
	        var u = i.getStore().index(t),
	            c = IDBKeyRange.bound(e, n, r, o),
	            l = [],
	            p = u.openCursor(c);
	        p.onsuccess = function () {
	          var t;
	          (null === (t = null == p ? void 0 : p.result) || void 0 === t ? void 0 : t.value) ? (l.push(null == p ? void 0 : p.result.value), null == p || p.result.continue()) : s(l);
	        }, p.onerror = a;
	      });
	    }, t.prototype.removeDataByIndex = function (t, e, n, r, o) {
	      var i = this;
	      return new Promise(function (s, a) {
	        var u = i.getStore("readwrite").index(t),
	            c = IDBKeyRange.bound(e, n, r, o),
	            l = u.openCursor(c),
	            p = 0;
	        l.onsuccess = function (t) {
	          var e = t.target.result;
	          e ? (p += 1, e.delete(), e.continue()) : s(p);
	        }, l.onerror = a;
	      });
	    }, t.prototype.createStore = function (t) {
	      var e = t.name,
	          n = t.indexes,
	          r = void 0 === n ? [] : n,
	          o = t.options;

	      if (this.db) {
	        this.db.objectStoreNames.contains(e) && this.db.deleteObjectStore(e);
	        var i = this.db.createObjectStore(e, o);
	        r.forEach(function (t) {
	          i.createIndex(t.indexName, t.keyPath, t.options);
	        });
	      }
	    }, t.prototype.getStore = function (t) {
	      var e;
	      return void 0 === t && (t = "readonly"), null === (e = this.db) || void 0 === e ? void 0 : e.transaction(this.storeName, t).objectStore(this.storeName);
	    }, t;
	  }(),
	      O = "event_table_v3",
	      C = "eventId",
	      D = function () {
	    function t(t) {
	      this.isReady = !1, this.taskQueue = Promise.resolve(), this.db = new k({
	        name: "Beacon_" + t + "_V3",
	        version: 1,
	        stores: [{
	          name: O,
	          options: {
	            keyPath: C
	          },
	          indexes: [{
	            indexName: C,
	            keyPath: C,
	            options: {
	              unique: !0
	            }
	          }]
	        }]
	      }), this.open();
	    }

	    return t.prototype.getCount = function () {
	      var t = this;
	      return this.readyExec(function () {
	        return t.db.getStoreCount();
	      });
	    }, t.prototype.setItem = function (t, e) {
	      var n = this;
	      return this.readyExec(function () {
	        return n.db.add({
	          eventId: t,
	          value: e
	        });
	      });
	    }, t.prototype.getItem = function (t) {
	      return n(this, void 0, void 0, function () {
	        var e = this;
	        return r(this, function (n) {
	          return [2, this.readyExec(function () {
	            return e.db.getDataRangeByIndex(C, t, t);
	          })];
	        });
	      });
	    }, t.prototype.removeItem = function (t) {
	      var e = this;
	      return this.readyExec(function () {
	        return e.db.removeDataByIndex(C, t, t);
	      });
	    }, t.prototype.updateItem = function (t, e) {
	      var n = this;
	      return this.readyExec(function () {
	        return n.db.put({
	          eventId: t,
	          value: e
	        });
	      });
	    }, t.prototype.iterate = function (t) {
	      var e = this;
	      return this.readyExec(function () {
	        return e.db.getStoreAllData().then(function (e) {
	          e.forEach(function (e) {
	            t(e.value);
	          });
	        });
	      });
	    }, t.prototype.open = function () {
	      return n(this, void 0, void 0, function () {
	        var t = this;
	        return r(this, function (e) {
	          switch (e.label) {
	            case 0:
	              return this.taskQueue = this.taskQueue.then(function () {
	                return t.db.openDB();
	              }), [4, this.taskQueue];

	            case 1:
	              return e.sent(), this.isReady = !0, this.db.useStore(O), [2];
	          }
	        });
	      });
	    }, t.prototype.readyExec = function (t) {
	      return this.isReady ? t() : (this.taskQueue = this.taskQueue.then(function () {
	        return t();
	      }), this.taskQueue);
	    }, t;
	  }(),
	      x = function () {
	    function t(t) {
	      this.keyObject = {}, this.storage = t;
	    }

	    return t.prototype.getCount = function () {
	      return this.storage.getStoreCount();
	    }, t.prototype.removeItem = function (t) {
	      this.storage.removeItem(t), delete this.keyObject[t];
	    }, t.prototype.setItem = function (t, e) {
	      var n = JSON.stringify(e);
	      this.storage.setItem(t, n), this.keyObject[t] = e;
	    }, t.prototype.iterate = function (t) {
	      for (var e = Object.keys(this.keyObject), n = 0; n < e.length; n++) {
	        var r = this.storage.getItem(e[n]);
	        t(JSON.parse(r));
	      }
	    }, t;
	  }(),
	      _ = function () {
	    function t(t, e) {
	      var n = this;
	      this.dbEventCount = 0, b() > 0 || !window.indexedDB || /X5Lite/.test(navigator.userAgent) ? (this.store = new x(e), this.dbEventCount = this.store.getCount()) : (this.store = new D(t), this.getCount().then(function (t) {
	        n.dbEventCount = t;
	      }).catch(function (t) {}));
	    }

	    return t.prototype.getCount = function () {
	      return n(this, void 0, void 0, function () {
	        return r(this, function (t) {
	          switch (t.label) {
	            case 0:
	              return t.trys.push([0, 2,, 3]), [4, this.store.getCount()];

	            case 1:
	              return [2, t.sent()];

	            case 2:
	              return t.sent(), [2, Promise.reject()];

	            case 3:
	              return [2];
	          }
	        });
	      });
	    }, t.prototype.insertEvent = function (t, e) {
	      return n(this, void 0, void 0, function () {
	        var n, o;
	        return r(this, function (r) {
	          switch (r.label) {
	            case 0:
	              if (this.dbEventCount >= 1e4) return [2, Promise.reject()];
	              n = f(t.mapValue), r.label = 1;

	            case 1:
	              return r.trys.push([1, 3,, 4]), this.dbEventCount++, [4, this.store.setItem(n, t)];

	            case 2:
	              return [2, r.sent()];

	            case 3:
	              return o = r.sent(), e && e(o, t), this.dbEventCount--, [2, Promise.reject()];

	            case 4:
	              return [2];
	          }
	        });
	      });
	    }, t.prototype.getEvents = function () {
	      return n(this, void 0, void 0, function () {
	        var t;
	        return r(this, function (e) {
	          switch (e.label) {
	            case 0:
	              t = [], e.label = 1;

	            case 1:
	              return e.trys.push([1, 3,, 4]), [4, this.store.iterate(function (e) {
	                t.push(e);
	              })];

	            case 2:
	              return e.sent(), [2, Promise.all(t)];

	            case 3:
	              return e.sent(), [2, Promise.all(t)];

	            case 4:
	              return [2];
	          }
	        });
	      });
	    }, t.prototype.removeEvent = function (t) {
	      return n(this, void 0, void 0, function () {
	        var e;
	        return r(this, function (n) {
	          switch (n.label) {
	            case 0:
	              e = f(t.mapValue), n.label = 1;

	            case 1:
	              return n.trys.push([1, 3,, 4]), this.dbEventCount--, [4, this.store.removeItem(e)];

	            case 2:
	              return [2, n.sent()];

	            case 3:
	              return n.sent(), this.dbEventCount++, [2, Promise.reject()];

	            case 4:
	              return [2];
	          }
	        });
	      });
	    }, t;
	  }(),
	      _P = function P() {
	    return (_P = Object.assign || function (t) {
	      for (var e, n = 1, r = arguments.length; n < r; n++) {
	        for (var o in e = arguments[n]) {
	          Object.prototype.hasOwnProperty.call(e, o) && (t[o] = e[o]);
	        }
	      }

	      return t;
	    }).apply(this, arguments);
	  };

	  function T(t) {
	    try {
	      return decodeURIComponent(t.replace(/\+/g, " "));
	    } catch (t) {
	      return null;
	    }
	  }

	  function U(t, e) {
	    var n = [null, void 0, "", NaN].includes(t);
	    if (e.isSkipEmpty && n) return null;
	    var r = !e.isSkipEmpty && n ? "" : t;

	    try {
	      return e.encode ? encodeURIComponent(r) : r;
	    } catch (t) {
	      return null;
	    }
	  }

	  function N(t, e) {
	    void 0 === e && (e = {
	      encode: !0,
	      isSkipEmpty: !1
	    });

	    var n = t.url,
	        r = t.query,
	        o = void 0 === r ? {} : r,
	        i = t.hash,
	        s = n.split("#"),
	        a = s[0],
	        u = s[1],
	        c = void 0 === u ? "" : u,
	        l = a.split("?")[0],
	        p = [],
	        h = U(i || c, e),
	        f = _P(_P({}, function (t) {
	      var e = t.split("#"),
	          n = e[0],
	          r = e[1],
	          o = void 0 === r ? "" : r,
	          i = n.split("?"),
	          s = i[0],
	          a = i[1],
	          u = void 0 === a ? "" : a,
	          c = T(o),
	          l = Object.create(null);
	      return u.split("&").forEach(function (t) {
	        var e = t.split("="),
	            n = e[0],
	            r = e[1],
	            o = void 0 === r ? "" : r,
	            i = T(n),
	            s = T(o);
	        null === i || null === s || "" === i && "" === s || l[i] || (l[i] = s);
	      }), {
	        url: s,
	        query: l,
	        hash: c
	      };
	    }(n).query), o);

	    return Object.keys(f).forEach(function (t) {
	      var n = U(t, e),
	          r = U(f[t], e);
	      null !== n && null !== r && p.push(n + "=" + r);
	    }), l + (p.length ? "?" + p.join("&") : "") + (h ? "#" + h : "");
	  }

	  function j(t, e) {
	    return new Promise(function (n, r) {
	      if (e && document.querySelectorAll("script[data-tag=" + e + "]").length) return n();

	      var o = document.createElement("script"),
	          i = _P({
	        type: "text/javascript",
	        charset: "utf-8"
	      }, t);

	      Object.keys(i).forEach(function (t) {
	        return function (t, e, n) {
	          if (t) return void 0 === n ? t.getAttribute(e) : t.setAttribute(e, n);
	        }(o, t, i[t]);
	      }), e && (o.dataset.tag = e), o.onload = function () {
	        return n();
	      }, o.onreadystatechange = function () {
	        var t = o.readyState;
	        ["complete", "loaded"].includes(t) && (o.onreadystatechange = null, n());
	      }, o.onerror = r, document.body.appendChild(o);
	    });
	  }

	  !function (t) {
	    t[t.equal = 0] = "equal", t[t.low = -1] = "low", t[t.high = 1] = "high";
	  }(E || (E = {}));

	  var _q = function q() {
	    return (_q = Object.assign || function (t) {
	      for (var e, n = 1, r = arguments.length; n < r; n++) {
	        for (var o in e = arguments[n]) {
	          Object.prototype.hasOwnProperty.call(e, o) && (t[o] = e[o]);
	        }
	      }

	      return t;
	    }).apply(this, arguments);
	  };

	  function A(t, e, n, r) {
	    return new (n || (n = Promise))(function (o, i) {
	      function s(t) {
	        try {
	          u(r.next(t));
	        } catch (t) {
	          i(t);
	        }
	      }

	      function a(t) {
	        try {
	          u(r.throw(t));
	        } catch (t) {
	          i(t);
	        }
	      }

	      function u(t) {
	        var e;
	        t.done ? o(t.value) : (e = t.value, e instanceof n ? e : new n(function (t) {
	          t(e);
	        })).then(s, a);
	      }

	      u((r = r.apply(t, e || [])).next());
	    });
	  }

	  function R(t, e) {
	    var n,
	        r,
	        o,
	        i,
	        s = {
	      label: 0,
	      sent: function sent() {
	        if (1 & o[0]) throw o[1];
	        return o[1];
	      },
	      trys: [],
	      ops: []
	    };
	    return i = {
	      next: a(0),
	      throw: a(1),
	      return: a(2)
	    }, "function" == typeof Symbol && (i[Symbol.iterator] = function () {
	      return this;
	    }), i;

	    function a(i) {
	      return function (a) {
	        return function (i) {
	          if (n) throw new TypeError("Generator is already executing.");

	          for (; s;) {
	            try {
	              if (n = 1, r && (o = 2 & i[0] ? r.return : i[0] ? r.throw || ((o = r.return) && o.call(r), 0) : r.next) && !(o = o.call(r, i[1])).done) return o;

	              switch (r = 0, o && (i = [2 & i[0], o.value]), i[0]) {
	                case 0:
	                case 1:
	                  o = i;
	                  break;

	                case 4:
	                  return s.label++, {
	                    value: i[1],
	                    done: !1
	                  };

	                case 5:
	                  s.label++, r = i[1], i = [0];
	                  continue;

	                case 7:
	                  i = s.ops.pop(), s.trys.pop();
	                  continue;

	                default:
	                  if (!((o = (o = s.trys).length > 0 && o[o.length - 1]) || 6 !== i[0] && 2 !== i[0])) {
	                    s = 0;
	                    continue;
	                  }

	                  if (3 === i[0] && (!o || i[1] > o[0] && i[1] < o[3])) {
	                    s.label = i[1];
	                    break;
	                  }

	                  if (6 === i[0] && s.label < o[1]) {
	                    s.label = o[1], o = i;
	                    break;
	                  }

	                  if (o && s.label < o[2]) {
	                    s.label = o[2], s.ops.push(i);
	                    break;
	                  }

	                  o[2] && s.ops.pop(), s.trys.pop();
	                  continue;
	              }

	              i = e.call(t, s);
	            } catch (t) {
	              i = [6, t], r = 0;
	            } finally {
	              n = o = 0;
	            }
	          }

	          if (5 & i[0]) throw i[1];
	          return {
	            value: i[0] ? i[1] : void 0,
	            done: !0
	          };
	        }([i, a]);
	      };
	    }
	  }

	  var B = function () {
	    function t() {
	      this.interceptors = [];
	    }

	    return t.prototype.use = function (t, e) {
	      return this.interceptors.push({
	        resolved: t,
	        rejected: e
	      }), this.interceptors.length - 1;
	    }, t.prototype.traverse = function (t, e) {
	      void 0 === e && (e = !1);
	      var n = Promise.resolve(t);
	      return (e ? Array.prototype.reduceRight : Array.prototype.reduce).call(this.interceptors, function (t, e) {
	        if (e) {
	          var r = e.resolved,
	              o = e.rejected;
	          n = n.then(r, o);
	        }

	        return t;
	      }, ""), n;
	    }, t.prototype.eject = function (t) {
	      this.interceptors[t] && (this.interceptors[t] = null);
	    }, t;
	  }(),
	      J = {
	    defaults: {
	      timeout: 0,
	      method: "GET",
	      mode: "cors",
	      redirect: "follow",
	      credentials: "same-origin"
	    },
	    headers: {
	      common: {
	        Accept: "application/json, text/plain, */*"
	      },
	      POST: {
	        "Content-Type": "application/x-www-form-urlencoded"
	      },
	      PUT: {
	        "Content-Type": "application/x-www-form-urlencoded"
	      },
	      PATCH: {
	        "Content-Type": "application/x-www-form-urlencoded"
	      }
	    },
	    baseURL: "",
	    polyfillUrl: "https://vm.gtimg.cn/comps/script/fetch.min.js",
	    interceptors: {
	      request: new B(),
	      response: new B()
	    }
	  },
	      V = /^([a-z][a-z\d+\-.]*:)?\/\//i,
	      Q = Object.prototype.toString;

	  function L(t) {
	    return A(this, void 0, void 0, function () {
	      var e;
	      return R(this, function (n) {
	        switch (n.label) {
	          case 0:
	            if (window.fetch) return [2];
	            n.label = 1;

	          case 1:
	            return n.trys.push([1, 3,, 4]), [4, j({
	              src: t
	            })];

	          case 2:
	            return n.sent(), [3, 4];

	          case 3:
	            throw e = n.sent(), new Error("加载 polyfill " + t + " 失败: " + e.message);

	          case 4:
	            return [2];
	        }
	      });
	    });
	  }

	  function M(t) {
	    return ["Accept", "Content-Type"].forEach(function (e) {
	      return n = e, void ((r = t.headers) && Object.keys(r).forEach(function (t) {
	        t !== n && t.toUpperCase() === n.toUpperCase() && (r[n] = r[t], delete r[t]);
	      }));
	      var n, r;
	    }), function (t) {
	      if ("[object Object]" !== Q.call(t)) return !1;
	      var e = Object.getPrototypeOf(t);
	      return null === e || e === Object.prototype;
	    }(t.body) && (t.body = JSON.stringify(t.body), t.headers && (t.headers["Content-Type"] = "application/json;charset=utf-8")), t;
	  }

	  function K(t) {
	    return A(this, void 0, void 0, function () {
	      var e, n, r, o, i, s, a, u, c, l, p, h, f, d, v, g, y;
	      return R(this, function (m) {
	        switch (m.label) {
	          case 0:
	            return e = J.baseURL, n = J.defaults, r = J.interceptors, [4, L(J.polyfillUrl)];

	          case 1:
	            return m.sent(), (o = _q(_q({}, n), t)).headers || (o.headers = function (t) {
	              void 0 === t && (t = "GET");
	              var e = J.headers[t] || {};
	              return _q(_q({}, J.headers.common), e);
	            }(o.method)), M(o), [4, r.request.traverse(o, !0)];

	          case 2:
	            if ((i = m.sent()) instanceof Error) throw i;
	            return i.url = function (t, e) {
	              return !t || V.test(e) ? e : t.replace(/\/+$/, "") + "/" + e.replace(/^\/+/, "");
	            }(e, i.url), s = i.url, a = i.timeout, u = i.params, c = i.method, l = ["GET", "DELETE", "OPTIONS", "HEAD"].includes(void 0 === c ? "GET" : c) && !!u, p = l ? N({
	              url: s,
	              query: u
	            }) : s, h = [], a && !i.signal && (v = new Promise(function (t) {
	              f = setTimeout(function () {
	                t(new Error("timeout"));
	              }, a);
	            }), h.push(v), d = new AbortController(), i.signal = d.signal), h.push(fetch(p, i).catch(function (t) {
	              return t;
	            })), [4, Promise.race(h)];

	          case 3:
	            return g = m.sent(), f && clearTimeout(f), [4, r.response.traverse(g)];

	          case 4:
	            if ((y = m.sent()) instanceof Error) throw null == d || d.abort(), y;
	            return [2, y];
	        }
	      });
	    });
	  }

	  var F = function () {
	    function t(t) {
	      J.interceptors.request.use(function (n) {
	        var r = n.url,
	            o = n.method,
	            i = n.body,
	            s = i;

	        if (t.onReportBeforeSend) {
	          var a = t.onReportBeforeSend({
	            url: r,
	            method: o,
	            data: i ? JSON.parse(i) : null
	          });
	          s = (null == a ? void 0 : a.data) ? JSON.stringify(a.data) : null;
	        }

	        return "GET" != o && s ? _e(_e({}, n), {
	          body: s
	        }) : n;
	      });
	    }

	    return t.prototype.get = function (t, o) {
	      return n(this, void 0, void 0, function () {
	        var n, i;
	        return r(this, function (r) {
	          switch (r.label) {
	            case 0:
	              return [4, K(_e({
	                url: t
	              }, o))];

	            case 1:
	              return [4, (n = r.sent()).json()];

	            case 2:
	              return i = r.sent(), [2, Promise.resolve({
	                data: i,
	                status: n.status,
	                statusText: n.statusText,
	                headers: n.headers
	              })];
	          }
	        });
	      });
	    }, t.prototype.post = function (t, o, i) {
	      return n(this, void 0, void 0, function () {
	        var n, s;
	        return r(this, function (r) {
	          switch (r.label) {
	            case 0:
	              return [4, K(_e({
	                url: t,
	                body: o,
	                method: "POST"
	              }, i))];

	            case 1:
	              return [4, (n = r.sent()).json()];

	            case 2:
	              return s = r.sent(), [2, Promise.resolve({
	                data: s,
	                status: n.status,
	                statusText: n.statusText,
	                headers: n.headers
	              })];
	          }
	        });
	      });
	    }, t;
	  }(),
	      G = function () {
	    function t(t) {
	      this.appkey = t;
	    }

	    return t.prototype.getItem = function (t) {
	      try {
	        return window.localStorage.getItem(this.getStoreKey(t));
	      } catch (t) {
	        return "";
	      }
	    }, t.prototype.removeItem = function (t) {
	      try {
	        window.localStorage.removeItem(this.getStoreKey(t));
	      } catch (t) {}
	    }, t.prototype.setItem = function (t, e) {
	      try {
	        window.localStorage.setItem(this.getStoreKey(t), e);
	      } catch (t) {}
	    }, t.prototype.setSessionItem = function (t, e) {
	      try {
	        window.sessionStorage.setItem(this.getStoreKey(t), e);
	      } catch (t) {}
	    }, t.prototype.getSessionItem = function (t) {
	      try {
	        return window.sessionStorage.getItem(this.getStoreKey(t));
	      } catch (t) {
	        return "";
	      }
	    }, t.prototype.getStoreKey = function (t) {
	      return o + this.appkey + "_" + t;
	    }, t.prototype.createDeviceId = function () {
	      try {
	        var t = window.localStorage.getItem(i);
	        return t || (t = function (t) {
	          for (var e = "ABCDEFGHJKMNPQRSTWXYZabcdefhijkmnprstwxyz0123456789", n = "", r = 0; r < t; r++) {
	            n += e.charAt(Math.floor(Math.random() * e.length));
	          }

	          return n;
	        }(32), window.localStorage.setItem(i, t)), t;
	      } catch (t) {
	        return "";
	      }
	    }, t.prototype.clear = function () {
	      try {
	        for (var t = window.localStorage.length, e = 0; e < t; e++) {
	          var n = window.localStorage.key(e);
	          (null == n ? void 0 : n.substr(0, 9)) == o && window.localStorage.removeItem(n);
	        }
	      } catch (t) {}
	    }, t.prototype.getStoreCount = function () {
	      var t = 0;

	      try {
	        t = window.localStorage.length;
	      } catch (t) {}

	      return t;
	    }, t;
	  }(),
	      z = "logid_start",
	      W = "4.5.14-web";

	  return function (n) {
	    function r(t) {
	      var e = n.call(this, t) || this;
	      e.qimei36 = "", e.uselessCycleTaskNum = 0, e.underWeakNet = !1, e.pauseSearching = !1, e.send = function (t, n, r) {
	        e.storage.setItem(s, Date.now().toString()), e.network.post(e.uploadUrl || e.strategy.getUploadUrl(), t.data).then(function (r) {
	          var o;
	          100 == (null === (o = null == r ? void 0 : r.data) || void 0 === o ? void 0 : o.result) ? e.delayTime = 1e3 * r.data.delayTime : e.delayTime = 0, n && n(t.data), t.data.events.forEach(function (t) {
	            e.store.removeEvent(t).then(function () {
	              e.removeSendingId(f(t.mapValue));
	            });
	          }), e.doCustomCycleTask();
	        }).catch(function (n) {
	          var o = t.data.events;
	          e.errorReport.reportError(n.code ? n.code.toString() : "600", n.message), r && r(t.data);
	          var i = JSON.parse(e.storage.getItem(a));
	          o.forEach(function (t) {
	            i && -1 != i.indexOf(f(t)) && e.store.insertEvent(t, function (t, n) {
	              t && e.errorReport.reportError("604", "insertEvent fail!");
	            }), e.removeSendingId(f(t));
	          }), e.monitorUploadFailed();
	        });
	      };
	      var r,
	          o,
	          i = b();
	      return e.isUnderIE8 = i > 0 && i < 8, e.isUnderIE8 || (e.isUnderIE = i > 0, t.needInitQimei && S(t.appkey, function (t) {
	        e.qimei36 = t.q36;
	      }), e.network = new F(t), e.storage = new G(t.appkey), e.initCommonInfo(t), e.store = new _(t.appkey, e.storage), e.errorReport = new g(e.config, e.commonInfo, "web", e.network), e.strategy = new y(null == t.needQueryConfig || t.needQueryConfig, e.config, e.commonInfo, e.storage, e.network), e.logidStartTime = e.storage.getItem(z), e.logidStartTime || (e.logidStartTime = Date.now().toString(), e.storage.setItem(z, e.logidStartTime)), r = e.logidStartTime, o = Date.now() - Number.parseFloat(r), Math.floor(o / 864e5) >= 365 && e.storage.clear(), e.initSession(t), e.onDirectUserAction("rqd_js_init", {}), setTimeout(function () {
	        return e.lifeCycle.emit("init");
	      }, 0), e.initDelayTime = t.delay ? t.delay : 1e3, e.cycleTask(e.initDelayTime)), e;
	    }

	    return function (e, n) {
	      if ("function" != typeof n && null !== n) throw new TypeError("Class extends value " + String(n) + " is not a constructor or null");

	      function r() {
	        this.constructor = e;
	      }

	      _t(e, n), e.prototype = null === n ? Object.create(n) : (r.prototype = n.prototype, new r());
	    }(r, n), r.prototype.initSession = function (t) {
	      var e = 18e5;
	      t.sessionDuration && t.sessionDuration > 3e4 && (e = t.sessionDuration), this.beaconSession = new w(this.storage, e, this);
	    }, r.prototype.initCommonInfo = function (t) {
	      var e = Number(this.storage.getItem(s));

	      try {
	        var n = JSON.parse(this.storage.getItem(a));
	        (Date.now() - e > 3e4 || !n) && this.storage.setItem(a, JSON.stringify([]));
	      } catch (t) {}

	      t.uploadUrl && (this.uploadUrl = t.uploadUrl + "?appkey=" + t.appkey);
	      var r = [window.screen.width, window.screen.height];
	      window.devicePixelRatio && r.push(window.devicePixelRatio), this.commonInfo = {
	        deviceId: this.storage.createDeviceId(),
	        language: navigator && navigator.language || "zh_CN",
	        query: window.location.search,
	        userAgent: navigator.userAgent,
	        pixel: r.join("*"),
	        channelID: t.channelID ? String(t.channelID) : "",
	        openid: t.openid ? String(t.openid) : "",
	        unid: t.unionid ? String(t.unionid) : "",
	        sdkVersion: W
	      }, this.config.appVersion = t.versionCode ? String(t.versionCode) : "", this.config.strictMode = t.strictMode;
	    }, r.prototype.cycleTask = function (t) {
	      var e = this;
	      this.intervalID = window.setInterval(function () {
	        e.pauseSearching || e.store.getEvents().then(function (t) {
	          0 == t.length && (e.pauseSearching = !0);
	          var n = [],
	              r = JSON.parse(e.storage.getItem(a));
	          r || (r = []), t && t.forEach(function (t) {
	            var e = f(t.mapValue);
	            -1 == r.indexOf(e) && (n.push(t), r.push(e));
	          }), 0 != n.length && (e.storage.setItem(a, JSON.stringify(r)), e._normalLogPipeline(e.assembleData(n)));
	        }).catch(function (t) {});
	      }, t);
	    }, r.prototype.onReport = function (t, e, n) {
	      var r = this;
	      if (this.isUnderIE8) this.errorReport.reportError("601", "UnderIE8");else {
	        this.pauseSearching = !1;
	        var o = this.generateData(t, e, n);
	        if (n && 0 == this.delayTime && !this.underWeakNet) this._normalLogPipeline(this.assembleData(o));else {
	          var i = o.shift();
	          i && this.store.insertEvent(i, function (t) {
	            t && r.errorReport.reportError("604", "insertEvent fail!");
	          }).catch(function (t) {
	            r._normalLogPipeline(r.assembleData(o));
	          });
	        }
	      }
	    }, r.prototype.onSendBeacon = function (t, e) {
	      if (this.isUnderIE) this.errorReport.reportError("605", "UnderIE");else {
	        this.pauseSearching = !1;
	        var n = this.assembleData(this.generateData(t, e, !0));
	        "function" == typeof navigator.sendBeacon && navigator.sendBeacon(this.uploadUrl || this.strategy.getUploadUrl(), JSON.stringify(n));
	      }
	    }, r.prototype.generateData = function (t, n, r) {
	      var o = [],
	          i = "4.5.14-web_" + (r ? "direct_log_id" : "normal_log_id"),
	          s = Number(this.storage.getItem(i));
	      return s = s || 1, n = _e(_e({}, n), {
	        A99: r ? "Y" : "N",
	        A100: s.toString(),
	        A72: W,
	        A88: this.logidStartTime
	      }), s++, this.storage.setItem(i, s.toString()), o.push({
	        eventCode: t,
	        eventTime: Date.now().toString(),
	        mapValue: p(n, this.config.strictMode)
	      }), o;
	    }, r.prototype.assembleData = function (t) {
	      var n = this.beaconSession.getSession();
	      return {
	        appVersion: this.config.appVersion ? h(this.config.appVersion) : "",
	        sdkId: "js",
	        sdkVersion: W,
	        mainAppKey: this.config.appkey,
	        platformId: 3,
	        common: p(_e(_e({}, this.additionalParams), {
	          A2: this.commonInfo.deviceId,
	          A8: this.commonInfo.openid,
	          A12: this.commonInfo.language,
	          A17: this.commonInfo.pixel,
	          A23: this.commonInfo.channelID,
	          A50: this.commonInfo.unid,
	          A76: n.sessionId,
	          A101: this.commonInfo.userAgent,
	          A102: window.location.href,
	          A104: document.referrer,
	          A119: this.commonInfo.query,
	          A153: this.qimei36
	        }), !1),
	        events: t
	      };
	    }, r.prototype.monitorUploadFailed = function () {
	      this.uselessCycleTaskNum++, this.uselessCycleTaskNum >= 5 && (window.clearInterval(this.intervalID), this.cycleTask(6e4), this.underWeakNet = !0);
	    }, r.prototype.doCustomCycleTask = function () {
	      this.uselessCycleTaskNum >= 5 && (window.clearInterval(this.intervalID), this.cycleTask(this.initDelayTime)), this.uselessCycleTaskNum = 0, this.underWeakNet = !1;
	    }, r;
	  }(v);
	});

	/***/ }),

	/***/ "./lib/crypto.js":
	/*!***********************!*\
	  !*** ./lib/crypto.js ***!
	  \***********************/
	/*! no static exports found */
	/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(module) {var _typeof = __webpack_require__(/*! @babel/runtime/helpers/typeof */ "./node_modules/@babel/runtime/helpers/typeof.js");

	/*
	 CryptoJS v3.1.2
	 code.google.com/p/crypto-js
	 (c) 2009-2013 by Jeff Mott. All rights reserved.
	 code.google.com/p/crypto-js/wiki/License
	 */
	var CryptoJS = CryptoJS || function (g, l) {
	  var e = {},
	      d = e.lib = {},
	      m = function m() {},
	      k = d.Base = {
	    extend: function extend(a) {
	      m.prototype = this;
	      var c = new m();
	      a && c.mixIn(a);
	      c.hasOwnProperty("init") || (c.init = function () {
	        c.$super.init.apply(this, arguments);
	      });
	      c.init.prototype = c;
	      c.$super = this;
	      return c;
	    },
	    create: function create() {
	      var a = this.extend();
	      a.init.apply(a, arguments);
	      return a;
	    },
	    init: function init() {},
	    mixIn: function mixIn(a) {
	      for (var c in a) {
	        a.hasOwnProperty(c) && (this[c] = a[c]);
	      }

	      a.hasOwnProperty("toString") && (this.toString = a.toString);
	    },
	    clone: function clone() {
	      return this.init.prototype.extend(this);
	    }
	  },
	      p = d.WordArray = k.extend({
	    init: function init(a, c) {
	      a = this.words = a || [];
	      this.sigBytes = c != l ? c : 4 * a.length;
	    },
	    toString: function toString(a) {
	      return (a || n).stringify(this);
	    },
	    concat: function concat(a) {
	      var c = this.words,
	          q = a.words,
	          f = this.sigBytes;
	      a = a.sigBytes;
	      this.clamp();
	      if (f % 4) for (var b = 0; b < a; b++) {
	        c[f + b >>> 2] |= (q[b >>> 2] >>> 24 - 8 * (b % 4) & 255) << 24 - 8 * ((f + b) % 4);
	      } else if (65535 < q.length) for (b = 0; b < a; b += 4) {
	        c[f + b >>> 2] = q[b >>> 2];
	      } else c.push.apply(c, q);
	      this.sigBytes += a;
	      return this;
	    },
	    clamp: function clamp() {
	      var a = this.words,
	          c = this.sigBytes;
	      a[c >>> 2] &= 4294967295 << 32 - 8 * (c % 4);
	      a.length = g.ceil(c / 4);
	    },
	    clone: function clone() {
	      var a = k.clone.call(this);
	      a.words = this.words.slice(0);
	      return a;
	    },
	    random: function random(a) {
	      for (var c = [], b = 0; b < a; b += 4) {
	        c.push(4294967296 * g.random() | 0);
	      }

	      return new p.init(c, a);
	    }
	  }),
	      b = e.enc = {},
	      n = b.Hex = {
	    stringify: function stringify(a) {
	      var c = a.words;
	      a = a.sigBytes;

	      for (var b = [], f = 0; f < a; f++) {
	        var d = c[f >>> 2] >>> 24 - 8 * (f % 4) & 255;
	        b.push((d >>> 4).toString(16));
	        b.push((d & 15).toString(16));
	      }

	      return b.join("");
	    },
	    parse: function parse(a) {
	      for (var c = a.length, b = [], f = 0; f < c; f += 2) {
	        b[f >>> 3] |= parseInt(a.substr(f, 2), 16) << 24 - 4 * (f % 8);
	      }

	      return new p.init(b, c / 2);
	    }
	  },
	      j = b.Latin1 = {
	    stringify: function stringify(a) {
	      var c = a.words;
	      a = a.sigBytes;

	      for (var b = [], f = 0; f < a; f++) {
	        b.push(String.fromCharCode(c[f >>> 2] >>> 24 - 8 * (f % 4) & 255));
	      }

	      return b.join("");
	    },
	    parse: function parse(a) {
	      for (var c = a.length, b = [], f = 0; f < c; f++) {
	        b[f >>> 2] |= (a.charCodeAt(f) & 255) << 24 - 8 * (f % 4);
	      }

	      return new p.init(b, c);
	    }
	  },
	      h = b.Utf8 = {
	    stringify: function stringify(a) {
	      try {
	        return decodeURIComponent(escape(j.stringify(a)));
	      } catch (c) {
	        throw Error("Malformed UTF-8 data");
	      }
	    },
	    parse: function parse(a) {
	      return j.parse(unescape(encodeURIComponent(a)));
	    }
	  },
	      r = d.BufferedBlockAlgorithm = k.extend({
	    reset: function reset() {
	      this._data = new p.init();
	      this._nDataBytes = 0;
	    },
	    _append: function _append(a) {
	      "string" == typeof a && (a = h.parse(a));

	      this._data.concat(a);

	      this._nDataBytes += a.sigBytes;
	    },
	    _process: function _process(a) {
	      var c = this._data,
	          b = c.words,
	          f = c.sigBytes,
	          d = this.blockSize,
	          e = f / (4 * d),
	          e = a ? g.ceil(e) : g.max((e | 0) - this._minBufferSize, 0);
	      a = e * d;
	      f = g.min(4 * a, f);

	      if (a) {
	        for (var k = 0; k < a; k += d) {
	          this._doProcessBlock(b, k);
	        }

	        k = b.splice(0, a);
	        c.sigBytes -= f;
	      }

	      return new p.init(k, f);
	    },
	    clone: function clone() {
	      var a = k.clone.call(this);
	      a._data = this._data.clone();
	      return a;
	    },
	    _minBufferSize: 0
	  });

	  d.Hasher = r.extend({
	    cfg: k.extend(),
	    init: function init(a) {
	      this.cfg = this.cfg.extend(a);
	      this.reset();
	    },
	    reset: function reset() {
	      r.reset.call(this);

	      this._doReset();
	    },
	    update: function update(a) {
	      this._append(a);

	      this._process();

	      return this;
	    },
	    finalize: function finalize(a) {
	      a && this._append(a);
	      return this._doFinalize();
	    },
	    blockSize: 16,
	    _createHelper: function _createHelper(a) {
	      return function (b, d) {
	        return new a.init(d).finalize(b);
	      };
	    },
	    _createHmacHelper: function _createHmacHelper(a) {
	      return function (b, d) {
	        return new s.HMAC.init(a, d).finalize(b);
	      };
	    }
	  });
	  var s = e.algo = {};
	  return e;
	}(Math);

	(function () {
	  var g = CryptoJS,
	      l = g.lib,
	      e = l.WordArray,
	      d = l.Hasher,
	      m = [],
	      l = g.algo.SHA1 = d.extend({
	    _doReset: function _doReset() {
	      this._hash = new e.init([1732584193, 4023233417, 2562383102, 271733878, 3285377520]);
	    },
	    _doProcessBlock: function _doProcessBlock(d, e) {
	      for (var b = this._hash.words, n = b[0], j = b[1], h = b[2], g = b[3], l = b[4], a = 0; 80 > a; a++) {
	        if (16 > a) m[a] = d[e + a] | 0;else {
	          var c = m[a - 3] ^ m[a - 8] ^ m[a - 14] ^ m[a - 16];
	          m[a] = c << 1 | c >>> 31;
	        }
	        c = (n << 5 | n >>> 27) + l + m[a];
	        c = 20 > a ? c + ((j & h | ~j & g) + 1518500249) : 40 > a ? c + ((j ^ h ^ g) + 1859775393) : 60 > a ? c + ((j & h | j & g | h & g) - 1894007588) : c + ((j ^ h ^ g) - 899497514);
	        l = g;
	        g = h;
	        h = j << 30 | j >>> 2;
	        j = n;
	        n = c;
	      }

	      b[0] = b[0] + n | 0;
	      b[1] = b[1] + j | 0;
	      b[2] = b[2] + h | 0;
	      b[3] = b[3] + g | 0;
	      b[4] = b[4] + l | 0;
	    },
	    _doFinalize: function _doFinalize() {
	      var d = this._data,
	          e = d.words,
	          b = 8 * this._nDataBytes,
	          g = 8 * d.sigBytes;
	      e[g >>> 5] |= 128 << 24 - g % 32;
	      e[(g + 64 >>> 9 << 4) + 14] = Math.floor(b / 4294967296);
	      e[(g + 64 >>> 9 << 4) + 15] = b;
	      d.sigBytes = 4 * e.length;

	      this._process();

	      return this._hash;
	    },
	    clone: function clone() {
	      var e = d.clone.call(this);
	      e._hash = this._hash.clone();
	      return e;
	    }
	  });
	  g.SHA1 = d._createHelper(l);
	  g.HmacSHA1 = d._createHmacHelper(l);
	})();

	(function () {
	  var g = CryptoJS,
	      l = g.enc.Utf8;
	  g.algo.HMAC = g.lib.Base.extend({
	    init: function init(e, d) {
	      e = this._hasher = new e.init();
	      "string" == typeof d && (d = l.parse(d));
	      var g = e.blockSize,
	          k = 4 * g;
	      d.sigBytes > k && (d = e.finalize(d));
	      d.clamp();

	      for (var p = this._oKey = d.clone(), b = this._iKey = d.clone(), n = p.words, j = b.words, h = 0; h < g; h++) {
	        n[h] ^= 1549556828, j[h] ^= 909522486;
	      }

	      p.sigBytes = b.sigBytes = k;
	      this.reset();
	    },
	    reset: function reset() {
	      var e = this._hasher;
	      e.reset();
	      e.update(this._iKey);
	    },
	    update: function update(e) {
	      this._hasher.update(e);

	      return this;
	    },
	    finalize: function finalize(e) {
	      var d = this._hasher;
	      e = d.finalize(e);
	      d.reset();
	      return d.finalize(this._oKey.clone().concat(e));
	    }
	  });
	})();

	(function () {
	  // Shortcuts
	  var C = CryptoJS;
	  var C_lib = C.lib;
	  var WordArray = C_lib.WordArray;
	  var C_enc = C.enc;
	  /**
	   * Base64 encoding strategy.
	   */

	  C_enc.Base64 = {
	    /**
	     * Converts a word array to a Base64 string.
	     *
	     * @param {WordArray} wordArray The word array.
	     *
	     * @return {string} The Base64 string.
	     *
	     * @static
	     *
	     * @example
	     *
	     *     var base64String = CryptoJS.enc.Base64.stringify(wordArray);
	     */
	    stringify: function stringify(wordArray) {
	      // Shortcuts
	      var words = wordArray.words;
	      var sigBytes = wordArray.sigBytes;
	      var map = this._map; // Clamp excess bits

	      wordArray.clamp(); // Convert

	      var base64Chars = [];

	      for (var i = 0; i < sigBytes; i += 3) {
	        var byte1 = words[i >>> 2] >>> 24 - i % 4 * 8 & 0xff;
	        var byte2 = words[i + 1 >>> 2] >>> 24 - (i + 1) % 4 * 8 & 0xff;
	        var byte3 = words[i + 2 >>> 2] >>> 24 - (i + 2) % 4 * 8 & 0xff;
	        var triplet = byte1 << 16 | byte2 << 8 | byte3;

	        for (var j = 0; j < 4 && i + j * 0.75 < sigBytes; j++) {
	          base64Chars.push(map.charAt(triplet >>> 6 * (3 - j) & 0x3f));
	        }
	      } // Add padding


	      var paddingChar = map.charAt(64);

	      if (paddingChar) {
	        while (base64Chars.length % 4) {
	          base64Chars.push(paddingChar);
	        }
	      }

	      return base64Chars.join('');
	    },

	    /**
	     * Converts a Base64 string to a word array.
	     *
	     * @param {string} base64Str The Base64 string.
	     *
	     * @return {WordArray} The word array.
	     *
	     * @static
	     *
	     * @example
	     *
	     *     var wordArray = CryptoJS.enc.Base64.parse(base64String);
	     */
	    parse: function parse(base64Str) {
	      // Shortcuts
	      var base64StrLength = base64Str.length;
	      var map = this._map; // Ignore padding

	      var paddingChar = map.charAt(64);

	      if (paddingChar) {
	        var paddingIndex = base64Str.indexOf(paddingChar);

	        if (paddingIndex != -1) {
	          base64StrLength = paddingIndex;
	        }
	      } // Convert


	      var words = [];
	      var nBytes = 0;

	      for (var i = 0; i < base64StrLength; i++) {
	        if (i % 4) {
	          var bits1 = map.indexOf(base64Str.charAt(i - 1)) << i % 4 * 2;
	          var bits2 = map.indexOf(base64Str.charAt(i)) >>> 6 - i % 4 * 2;
	          words[nBytes >>> 2] |= (bits1 | bits2) << 24 - nBytes % 4 * 8;
	          nBytes++;
	        }
	      }

	      return WordArray.create(words, nBytes);
	    },
	    _map: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/='
	  };
	})();

	if (( _typeof(module)) === 'object') {
	  module.exports = CryptoJS;
	} else {
	  window.CryptoJS = CryptoJS;
	}
	/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../node_modules/webpack/buildin/module.js */ "./node_modules/webpack/buildin/module.js")(module)));

	/***/ }),

	/***/ "./lib/json2xml.js":
	/*!*************************!*\
	  !*** ./lib/json2xml.js ***!
	  \*************************/
	/*! no static exports found */
	/***/ (function(module, exports, __webpack_require__) {

	var _typeof = __webpack_require__(/*! @babel/runtime/helpers/typeof */ "./node_modules/@babel/runtime/helpers/typeof.js");

	//copyright Ryan Day 2010 <http://ryanday.org>, Joscha Feth 2013 <http://www.feth.com> [MIT Licensed]
	var element_start_char = "a-zA-Z_\xC0-\xD6\xD8-\xF6\xF8-\xFF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FFF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD";
	var element_non_start_char = "-.0-9\xB7\u0300-\u036F\u203F\u2040";
	var element_replace = new RegExp("^([^" + element_start_char + "])|^((x|X)(m|M)(l|L))|([^" + element_start_char + element_non_start_char + "])", "g");
	var not_safe_in_xml = /[^\x09\x0A\x0D\x20-\xFF\x85\xA0-\uD7FF\uE000-\uFDCF\uFDE0-\uFFFD]/gm;

	var objKeys = function objKeys(obj) {
	  var l = [];

	  if (obj instanceof Object) {
	    for (var k in obj) {
	      if (obj.hasOwnProperty(k)) {
	        l.push(k);
	      }
	    }
	  }

	  return l;
	};

	var process_to_xml = function process_to_xml(node_data, options) {
	  var makeNode = function makeNode(name, content, attributes, level, hasSubNodes) {
	    var indent_value = options.indent !== undefined ? options.indent : "\t";
	    var indent = options.prettyPrint ? '\n' + new Array(level).join(indent_value) : '';

	    if (options.removeIllegalNameCharacters) {
	      name = name.replace(element_replace, '_');
	    }

	    var node = [indent, '<', name, attributes || ''];

	    if (content && content.length > 0) {
	      node.push('>');
	      node.push(content);
	      hasSubNodes && node.push(indent);
	      node.push('</');
	      node.push(name);
	      node.push('>');
	    } else {
	      node.push('/>');
	    }

	    return node.join('');
	  };

	  return function fn(node_data, node_descriptor, level) {
	    var type = _typeof(node_data);

	    if (Array.isArray ? Array.isArray(node_data) : node_data instanceof Array) {
	      type = 'array';
	    } else if (node_data instanceof Date) {
	      type = 'date';
	    }

	    switch (type) {
	      //if value is an array create child nodes from values
	      case 'array':
	        var ret = [];
	        node_data.map(function (v) {
	          ret.push(fn(v, 1, level + 1)); //entries that are values of an array are the only ones that can be special node descriptors
	        });
	        options.prettyPrint && ret.push('\n');
	        return ret.join('');

	      case 'date':
	        // cast dates to ISO 8601 date (soap likes it)
	        return node_data.toJSON ? node_data.toJSON() : node_data + '';

	      case 'object':
	        var nodes = [];

	        for (var name in node_data) {
	          if (node_data.hasOwnProperty(name)) {
	            if (node_data[name] instanceof Array) {
	              for (var j = 0; j < node_data[name].length; j++) {
	                if (node_data[name].hasOwnProperty(j)) {
	                  nodes.push(makeNode(name, fn(node_data[name][j], 0, level + 1), null, level + 1, objKeys(node_data[name][j]).length));
	                }
	              }
	            } else {
	              nodes.push(makeNode(name, fn(node_data[name], 0, level + 1), null, level + 1));
	            }
	          }
	        }

	        options.prettyPrint && nodes.length > 0 && nodes.push('\n');
	        return nodes.join('');

	      case 'function':
	        return node_data();

	      default:
	        return options.escape ? esc(node_data) : '' + node_data;
	    }
	  }(node_data, 0, 0);
	};

	var xml_header = function xml_header(standalone) {
	  var ret = ['<?xml version="1.0" encoding="UTF-8"'];

	  if (standalone) {
	    ret.push(' standalone="yes"');
	  }

	  ret.push('?>');
	  return ret.join('');
	};

	function esc(str) {
	  return ('' + str).replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/'/g, '&apos;').replace(/"/g, '&quot;').replace(not_safe_in_xml, '');
	}

	module.exports = function (obj, options) {
	  if (!options) {
	    options = {
	      xmlHeader: {
	        standalone: true
	      },
	      prettyPrint: true,
	      indent: "  ",
	      escape: true
	    };
	  }

	  if (typeof obj == 'string') {
	    try {
	      obj = JSON.parse(obj.toString());
	    } catch (e) {
	      return false;
	    }
	  }

	  var xmlheader = '';
	  var docType = '';

	  if (options) {
	    if (_typeof(options) == 'object') {
	      // our config is an object
	      if (options.xmlHeader) {
	        // the user wants an xml header
	        xmlheader = xml_header(!!options.xmlHeader.standalone);
	      }

	      if (typeof options.docType != 'undefined') {
	        docType = '<!DOCTYPE ' + options.docType + '>';
	      }
	    } else {
	      // our config is a boolean value, so just add xml header
	      xmlheader = xml_header();
	    }
	  }

	  options = options || {};
	  var ret = [xmlheader, options.prettyPrint && docType ? '\n' : '', docType, process_to_xml(obj, options)];
	  return ret.join('').replace(/\n{2,}/g, '\n').replace(/\s+$/g, '');
	};

	/***/ }),

	/***/ "./lib/md5.js":
	/*!********************!*\
	  !*** ./lib/md5.js ***!
	  \********************/
	/*! no static exports found */
	/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process, global, module) {var __WEBPACK_AMD_DEFINE_RESULT__;var _typeof = __webpack_require__(/*! @babel/runtime/helpers/typeof */ "./node_modules/@babel/runtime/helpers/typeof.js");

	/* https://github.com/emn178/js-md5 */
	(function () {

	  var ERROR = 'input is invalid type';
	  var WINDOW = (typeof window === "undefined" ? "undefined" : _typeof(window)) === 'object';
	  var root = WINDOW ? window : {};

	  if (root.JS_MD5_NO_WINDOW) {
	    WINDOW = false;
	  }

	  var WEB_WORKER = !WINDOW && (typeof self === "undefined" ? "undefined" : _typeof(self)) === 'object';
	  var NODE_JS = !root.JS_MD5_NO_NODE_JS && (typeof process === "undefined" ? "undefined" : _typeof(process)) === 'object' && process.versions && process.versions.node;

	  if (NODE_JS) {
	    root = global;
	  } else if (WEB_WORKER) {
	    root = self;
	  }

	  var COMMON_JS = !root.JS_MD5_NO_COMMON_JS && ( _typeof(module)) === 'object' && module.exports;
	  var AMD =  __webpack_require__(/*! !webpack amd options */ "./node_modules/webpack/buildin/amd-options.js");
	  var ARRAY_BUFFER = !root.JS_MD5_NO_ARRAY_BUFFER && typeof ArrayBuffer !== 'undefined';
	  var HEX_CHARS = '0123456789abcdef'.split('');
	  var EXTRA = [128, 32768, 8388608, -2147483648];
	  var SHIFT = [0, 8, 16, 24];
	  var OUTPUT_TYPES = ['hex', 'array', 'digest', 'buffer', 'arrayBuffer', 'base64'];
	  var BASE64_ENCODE_CHAR = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'.split('');
	  var blocks = [],
	      buffer8;

	  if (ARRAY_BUFFER) {
	    var buffer = new ArrayBuffer(68);
	    buffer8 = new Uint8Array(buffer);
	    blocks = new Uint32Array(buffer);
	  }

	  if (root.JS_MD5_NO_NODE_JS || !Array.isArray) {
	    Array.isArray = function (obj) {
	      return Object.prototype.toString.call(obj) === '[object Array]';
	    };
	  }

	  if (ARRAY_BUFFER && (root.JS_MD5_NO_ARRAY_BUFFER_IS_VIEW || !ArrayBuffer.isView)) {
	    ArrayBuffer.isView = function (obj) {
	      return _typeof(obj) === 'object' && obj.buffer && obj.buffer.constructor === ArrayBuffer;
	    };
	  }
	  /**
	   * @method hex
	   * @memberof md5
	   * @description Output hash as hex string
	   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash
	   * @returns {String} Hex string
	   * @example
	   * md5.hex('The quick brown fox jumps over the lazy dog');
	   * // equal to
	   * md5('The quick brown fox jumps over the lazy dog');
	   */

	  /**
	   * @method digest
	   * @memberof md5
	   * @description Output hash as bytes array
	   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash
	   * @returns {Array} Bytes array
	   * @example
	   * md5.digest('The quick brown fox jumps over the lazy dog');
	   */

	  /**
	   * @method array
	   * @memberof md5
	   * @description Output hash as bytes array
	   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash
	   * @returns {Array} Bytes array
	   * @example
	   * md5.array('The quick brown fox jumps over the lazy dog');
	   */

	  /**
	   * @method arrayBuffer
	   * @memberof md5
	   * @description Output hash as ArrayBuffer
	   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash
	   * @returns {ArrayBuffer} ArrayBuffer
	   * @example
	   * md5.arrayBuffer('The quick brown fox jumps over the lazy dog');
	   */

	  /**
	   * @method buffer
	   * @deprecated This maybe confuse with Buffer in node.js. Please use arrayBuffer instead.
	   * @memberof md5
	   * @description Output hash as ArrayBuffer
	   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash
	   * @returns {ArrayBuffer} ArrayBuffer
	   * @example
	   * md5.buffer('The quick brown fox jumps over the lazy dog');
	   */

	  /**
	   * @method base64
	   * @memberof md5
	   * @description Output hash as base64 string
	   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash
	   * @returns {String} base64 string
	   * @example
	   * md5.base64('The quick brown fox jumps over the lazy dog');
	   */


	  var createOutputMethod = function createOutputMethod(outputType) {
	    return function (message, isBinStr) {
	      return new Md5(true).update(message, isBinStr)[outputType]();
	    };
	  };
	  /**
	   * @method create
	   * @memberof md5
	   * @description Create Md5 object
	   * @returns {Md5} Md5 object.
	   * @example
	   * var hash = md5.create();
	   */

	  /**
	   * @method update
	   * @memberof md5
	   * @description Create and update Md5 object
	   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash
	   * @returns {Md5} Md5 object.
	   * @example
	   * var hash = md5.update('The quick brown fox jumps over the lazy dog');
	   * // equal to
	   * var hash = md5.create();
	   * hash.update('The quick brown fox jumps over the lazy dog');
	   */


	  var createMethod = function createMethod() {
	    var method = createOutputMethod('hex');

	    if (NODE_JS) {
	      method = nodeWrap(method);
	    }

	    method.getCtx = method.create = function () {
	      return new Md5();
	    };

	    method.update = function (message) {
	      return method.create().update(message);
	    };

	    for (var i = 0; i < OUTPUT_TYPES.length; ++i) {
	      var type = OUTPUT_TYPES[i];
	      method[type] = createOutputMethod(type);
	    }

	    return method;
	  };

	  var nodeWrap = function nodeWrap(method) {
	    var crypto = eval("require('crypto')");
	    var Buffer = eval("require('buffer').Buffer");

	    var nodeMethod = function nodeMethod(message) {
	      if (typeof message === 'string') {
	        return crypto.createHash('md5').update(message, 'utf8').digest('hex');
	      } else {
	        if (message === null || message === undefined) {
	          throw ERROR;
	        } else if (message.constructor === ArrayBuffer) {
	          message = new Uint8Array(message);
	        }
	      }

	      if (Array.isArray(message) || ArrayBuffer.isView(message) || message.constructor === Buffer) {
	        return crypto.createHash('md5').update(new Buffer(message)).digest('hex');
	      } else {
	        return method(message);
	      }
	    };

	    return nodeMethod;
	  };
	  /**
	   * Md5 class
	   * @class Md5
	   * @description This is internal class.
	   * @see {@link md5.create}
	   */


	  function Md5(sharedMemory) {
	    if (sharedMemory) {
	      blocks[0] = blocks[16] = blocks[1] = blocks[2] = blocks[3] = blocks[4] = blocks[5] = blocks[6] = blocks[7] = blocks[8] = blocks[9] = blocks[10] = blocks[11] = blocks[12] = blocks[13] = blocks[14] = blocks[15] = 0;
	      this.blocks = blocks;
	      this.buffer8 = buffer8;
	    } else {
	      if (ARRAY_BUFFER) {
	        var buffer = new ArrayBuffer(68);
	        this.buffer8 = new Uint8Array(buffer);
	        this.blocks = new Uint32Array(buffer);
	      } else {
	        this.blocks = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
	      }
	    }

	    this.h0 = this.h1 = this.h2 = this.h3 = this.start = this.bytes = this.hBytes = 0;
	    this.finalized = this.hashed = false;
	    this.first = true;
	  }
	  /**
	   * @method update
	   * @memberof Md5
	   * @instance
	   * @description Update hash
	   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash
	   * @returns {Md5} Md5 object.
	   * @see {@link md5.update}
	   */


	  Md5.prototype.update = function (message, isBinStr) {
	    if (this.finalized) {
	      return;
	    }

	    var code,
	        index = 0,
	        i,
	        length = message.length,
	        blocks = this.blocks;
	    var buffer8 = this.buffer8;

	    while (index < length) {
	      if (this.hashed) {
	        this.hashed = false;
	        blocks[0] = blocks[16];
	        blocks[16] = blocks[1] = blocks[2] = blocks[3] = blocks[4] = blocks[5] = blocks[6] = blocks[7] = blocks[8] = blocks[9] = blocks[10] = blocks[11] = blocks[12] = blocks[13] = blocks[14] = blocks[15] = 0;
	      }

	      if (ARRAY_BUFFER) {
	        for (i = this.start; index < length && i < 64; ++index) {
	          code = message.charCodeAt(index);

	          if (isBinStr || code < 0x80) {
	            buffer8[i++] = code;
	          } else if (code < 0x800) {
	            buffer8[i++] = 0xc0 | code >> 6;
	            buffer8[i++] = 0x80 | code & 0x3f;
	          } else if (code < 0xd800 || code >= 0xe000) {
	            buffer8[i++] = 0xe0 | code >> 12;
	            buffer8[i++] = 0x80 | code >> 6 & 0x3f;
	            buffer8[i++] = 0x80 | code & 0x3f;
	          } else {
	            code = 0x10000 + ((code & 0x3ff) << 10 | message.charCodeAt(++index) & 0x3ff);
	            buffer8[i++] = 0xf0 | code >> 18;
	            buffer8[i++] = 0x80 | code >> 12 & 0x3f;
	            buffer8[i++] = 0x80 | code >> 6 & 0x3f;
	            buffer8[i++] = 0x80 | code & 0x3f;
	          }
	        }
	      } else {
	        for (i = this.start; index < length && i < 64; ++index) {
	          code = message.charCodeAt(index);

	          if (isBinStr || code < 0x80) {
	            blocks[i >> 2] |= code << SHIFT[i++ & 3];
	          } else if (code < 0x800) {
	            blocks[i >> 2] |= (0xc0 | code >> 6) << SHIFT[i++ & 3];
	            blocks[i >> 2] |= (0x80 | code & 0x3f) << SHIFT[i++ & 3];
	          } else if (code < 0xd800 || code >= 0xe000) {
	            blocks[i >> 2] |= (0xe0 | code >> 12) << SHIFT[i++ & 3];
	            blocks[i >> 2] |= (0x80 | code >> 6 & 0x3f) << SHIFT[i++ & 3];
	            blocks[i >> 2] |= (0x80 | code & 0x3f) << SHIFT[i++ & 3];
	          } else {
	            code = 0x10000 + ((code & 0x3ff) << 10 | message.charCodeAt(++index) & 0x3ff);
	            blocks[i >> 2] |= (0xf0 | code >> 18) << SHIFT[i++ & 3];
	            blocks[i >> 2] |= (0x80 | code >> 12 & 0x3f) << SHIFT[i++ & 3];
	            blocks[i >> 2] |= (0x80 | code >> 6 & 0x3f) << SHIFT[i++ & 3];
	            blocks[i >> 2] |= (0x80 | code & 0x3f) << SHIFT[i++ & 3];
	          }
	        }
	      }

	      this.lastByteIndex = i;
	      this.bytes += i - this.start;

	      if (i >= 64) {
	        this.start = i - 64;
	        this.hash();
	        this.hashed = true;
	      } else {
	        this.start = i;
	      }
	    }

	    if (this.bytes > 4294967295) {
	      this.hBytes += this.bytes / 4294967296 << 0;
	      this.bytes = this.bytes % 4294967296;
	    }

	    return this;
	  };

	  Md5.prototype.finalize = function () {
	    if (this.finalized) {
	      return;
	    }

	    this.finalized = true;
	    var blocks = this.blocks,
	        i = this.lastByteIndex;
	    blocks[i >> 2] |= EXTRA[i & 3];

	    if (i >= 56) {
	      if (!this.hashed) {
	        this.hash();
	      }

	      blocks[0] = blocks[16];
	      blocks[16] = blocks[1] = blocks[2] = blocks[3] = blocks[4] = blocks[5] = blocks[6] = blocks[7] = blocks[8] = blocks[9] = blocks[10] = blocks[11] = blocks[12] = blocks[13] = blocks[14] = blocks[15] = 0;
	    }

	    blocks[14] = this.bytes << 3;
	    blocks[15] = this.hBytes << 3 | this.bytes >>> 29;
	    this.hash();
	  };

	  Md5.prototype.hash = function () {
	    var a,
	        b,
	        c,
	        d,
	        bc,
	        da,
	        blocks = this.blocks;

	    if (this.first) {
	      a = blocks[0] - 680876937;
	      a = (a << 7 | a >>> 25) - 271733879 << 0;
	      d = (-1732584194 ^ a & 2004318071) + blocks[1] - 117830708;
	      d = (d << 12 | d >>> 20) + a << 0;
	      c = (-271733879 ^ d & (a ^ -271733879)) + blocks[2] - 1126478375;
	      c = (c << 17 | c >>> 15) + d << 0;
	      b = (a ^ c & (d ^ a)) + blocks[3] - 1316259209;
	      b = (b << 22 | b >>> 10) + c << 0;
	    } else {
	      a = this.h0;
	      b = this.h1;
	      c = this.h2;
	      d = this.h3;
	      a += (d ^ b & (c ^ d)) + blocks[0] - 680876936;
	      a = (a << 7 | a >>> 25) + b << 0;
	      d += (c ^ a & (b ^ c)) + blocks[1] - 389564586;
	      d = (d << 12 | d >>> 20) + a << 0;
	      c += (b ^ d & (a ^ b)) + blocks[2] + 606105819;
	      c = (c << 17 | c >>> 15) + d << 0;
	      b += (a ^ c & (d ^ a)) + blocks[3] - 1044525330;
	      b = (b << 22 | b >>> 10) + c << 0;
	    }

	    a += (d ^ b & (c ^ d)) + blocks[4] - 176418897;
	    a = (a << 7 | a >>> 25) + b << 0;
	    d += (c ^ a & (b ^ c)) + blocks[5] + 1200080426;
	    d = (d << 12 | d >>> 20) + a << 0;
	    c += (b ^ d & (a ^ b)) + blocks[6] - 1473231341;
	    c = (c << 17 | c >>> 15) + d << 0;
	    b += (a ^ c & (d ^ a)) + blocks[7] - 45705983;
	    b = (b << 22 | b >>> 10) + c << 0;
	    a += (d ^ b & (c ^ d)) + blocks[8] + 1770035416;
	    a = (a << 7 | a >>> 25) + b << 0;
	    d += (c ^ a & (b ^ c)) + blocks[9] - 1958414417;
	    d = (d << 12 | d >>> 20) + a << 0;
	    c += (b ^ d & (a ^ b)) + blocks[10] - 42063;
	    c = (c << 17 | c >>> 15) + d << 0;
	    b += (a ^ c & (d ^ a)) + blocks[11] - 1990404162;
	    b = (b << 22 | b >>> 10) + c << 0;
	    a += (d ^ b & (c ^ d)) + blocks[12] + 1804603682;
	    a = (a << 7 | a >>> 25) + b << 0;
	    d += (c ^ a & (b ^ c)) + blocks[13] - 40341101;
	    d = (d << 12 | d >>> 20) + a << 0;
	    c += (b ^ d & (a ^ b)) + blocks[14] - 1502002290;
	    c = (c << 17 | c >>> 15) + d << 0;
	    b += (a ^ c & (d ^ a)) + blocks[15] + 1236535329;
	    b = (b << 22 | b >>> 10) + c << 0;
	    a += (c ^ d & (b ^ c)) + blocks[1] - 165796510;
	    a = (a << 5 | a >>> 27) + b << 0;
	    d += (b ^ c & (a ^ b)) + blocks[6] - 1069501632;
	    d = (d << 9 | d >>> 23) + a << 0;
	    c += (a ^ b & (d ^ a)) + blocks[11] + 643717713;
	    c = (c << 14 | c >>> 18) + d << 0;
	    b += (d ^ a & (c ^ d)) + blocks[0] - 373897302;
	    b = (b << 20 | b >>> 12) + c << 0;
	    a += (c ^ d & (b ^ c)) + blocks[5] - 701558691;
	    a = (a << 5 | a >>> 27) + b << 0;
	    d += (b ^ c & (a ^ b)) + blocks[10] + 38016083;
	    d = (d << 9 | d >>> 23) + a << 0;
	    c += (a ^ b & (d ^ a)) + blocks[15] - 660478335;
	    c = (c << 14 | c >>> 18) + d << 0;
	    b += (d ^ a & (c ^ d)) + blocks[4] - 405537848;
	    b = (b << 20 | b >>> 12) + c << 0;
	    a += (c ^ d & (b ^ c)) + blocks[9] + 568446438;
	    a = (a << 5 | a >>> 27) + b << 0;
	    d += (b ^ c & (a ^ b)) + blocks[14] - 1019803690;
	    d = (d << 9 | d >>> 23) + a << 0;
	    c += (a ^ b & (d ^ a)) + blocks[3] - 187363961;
	    c = (c << 14 | c >>> 18) + d << 0;
	    b += (d ^ a & (c ^ d)) + blocks[8] + 1163531501;
	    b = (b << 20 | b >>> 12) + c << 0;
	    a += (c ^ d & (b ^ c)) + blocks[13] - 1444681467;
	    a = (a << 5 | a >>> 27) + b << 0;
	    d += (b ^ c & (a ^ b)) + blocks[2] - 51403784;
	    d = (d << 9 | d >>> 23) + a << 0;
	    c += (a ^ b & (d ^ a)) + blocks[7] + 1735328473;
	    c = (c << 14 | c >>> 18) + d << 0;
	    b += (d ^ a & (c ^ d)) + blocks[12] - 1926607734;
	    b = (b << 20 | b >>> 12) + c << 0;
	    bc = b ^ c;
	    a += (bc ^ d) + blocks[5] - 378558;
	    a = (a << 4 | a >>> 28) + b << 0;
	    d += (bc ^ a) + blocks[8] - 2022574463;
	    d = (d << 11 | d >>> 21) + a << 0;
	    da = d ^ a;
	    c += (da ^ b) + blocks[11] + 1839030562;
	    c = (c << 16 | c >>> 16) + d << 0;
	    b += (da ^ c) + blocks[14] - 35309556;
	    b = (b << 23 | b >>> 9) + c << 0;
	    bc = b ^ c;
	    a += (bc ^ d) + blocks[1] - 1530992060;
	    a = (a << 4 | a >>> 28) + b << 0;
	    d += (bc ^ a) + blocks[4] + 1272893353;
	    d = (d << 11 | d >>> 21) + a << 0;
	    da = d ^ a;
	    c += (da ^ b) + blocks[7] - 155497632;
	    c = (c << 16 | c >>> 16) + d << 0;
	    b += (da ^ c) + blocks[10] - 1094730640;
	    b = (b << 23 | b >>> 9) + c << 0;
	    bc = b ^ c;
	    a += (bc ^ d) + blocks[13] + 681279174;
	    a = (a << 4 | a >>> 28) + b << 0;
	    d += (bc ^ a) + blocks[0] - 358537222;
	    d = (d << 11 | d >>> 21) + a << 0;
	    da = d ^ a;
	    c += (da ^ b) + blocks[3] - 722521979;
	    c = (c << 16 | c >>> 16) + d << 0;
	    b += (da ^ c) + blocks[6] + 76029189;
	    b = (b << 23 | b >>> 9) + c << 0;
	    bc = b ^ c;
	    a += (bc ^ d) + blocks[9] - 640364487;
	    a = (a << 4 | a >>> 28) + b << 0;
	    d += (bc ^ a) + blocks[12] - 421815835;
	    d = (d << 11 | d >>> 21) + a << 0;
	    da = d ^ a;
	    c += (da ^ b) + blocks[15] + 530742520;
	    c = (c << 16 | c >>> 16) + d << 0;
	    b += (da ^ c) + blocks[2] - 995338651;
	    b = (b << 23 | b >>> 9) + c << 0;
	    a += (c ^ (b | ~d)) + blocks[0] - 198630844;
	    a = (a << 6 | a >>> 26) + b << 0;
	    d += (b ^ (a | ~c)) + blocks[7] + 1126891415;
	    d = (d << 10 | d >>> 22) + a << 0;
	    c += (a ^ (d | ~b)) + blocks[14] - 1416354905;
	    c = (c << 15 | c >>> 17) + d << 0;
	    b += (d ^ (c | ~a)) + blocks[5] - 57434055;
	    b = (b << 21 | b >>> 11) + c << 0;
	    a += (c ^ (b | ~d)) + blocks[12] + 1700485571;
	    a = (a << 6 | a >>> 26) + b << 0;
	    d += (b ^ (a | ~c)) + blocks[3] - 1894986606;
	    d = (d << 10 | d >>> 22) + a << 0;
	    c += (a ^ (d | ~b)) + blocks[10] - 1051523;
	    c = (c << 15 | c >>> 17) + d << 0;
	    b += (d ^ (c | ~a)) + blocks[1] - 2054922799;
	    b = (b << 21 | b >>> 11) + c << 0;
	    a += (c ^ (b | ~d)) + blocks[8] + 1873313359;
	    a = (a << 6 | a >>> 26) + b << 0;
	    d += (b ^ (a | ~c)) + blocks[15] - 30611744;
	    d = (d << 10 | d >>> 22) + a << 0;
	    c += (a ^ (d | ~b)) + blocks[6] - 1560198380;
	    c = (c << 15 | c >>> 17) + d << 0;
	    b += (d ^ (c | ~a)) + blocks[13] + 1309151649;
	    b = (b << 21 | b >>> 11) + c << 0;
	    a += (c ^ (b | ~d)) + blocks[4] - 145523070;
	    a = (a << 6 | a >>> 26) + b << 0;
	    d += (b ^ (a | ~c)) + blocks[11] - 1120210379;
	    d = (d << 10 | d >>> 22) + a << 0;
	    c += (a ^ (d | ~b)) + blocks[2] + 718787259;
	    c = (c << 15 | c >>> 17) + d << 0;
	    b += (d ^ (c | ~a)) + blocks[9] - 343485551;
	    b = (b << 21 | b >>> 11) + c << 0;

	    if (this.first) {
	      this.h0 = a + 1732584193 << 0;
	      this.h1 = b - 271733879 << 0;
	      this.h2 = c - 1732584194 << 0;
	      this.h3 = d + 271733878 << 0;
	      this.first = false;
	    } else {
	      this.h0 = this.h0 + a << 0;
	      this.h1 = this.h1 + b << 0;
	      this.h2 = this.h2 + c << 0;
	      this.h3 = this.h3 + d << 0;
	    }
	  };
	  /**
	   * @method hex
	   * @memberof Md5
	   * @instance
	   * @description Output hash as hex string
	   * @returns {String} Hex string
	   * @see {@link md5.hex}
	   * @example
	   * hash.hex();
	   */


	  Md5.prototype.hex = function () {
	    this.finalize();
	    var h0 = this.h0,
	        h1 = this.h1,
	        h2 = this.h2,
	        h3 = this.h3;
	    return HEX_CHARS[h0 >> 4 & 0x0F] + HEX_CHARS[h0 & 0x0F] + HEX_CHARS[h0 >> 12 & 0x0F] + HEX_CHARS[h0 >> 8 & 0x0F] + HEX_CHARS[h0 >> 20 & 0x0F] + HEX_CHARS[h0 >> 16 & 0x0F] + HEX_CHARS[h0 >> 28 & 0x0F] + HEX_CHARS[h0 >> 24 & 0x0F] + HEX_CHARS[h1 >> 4 & 0x0F] + HEX_CHARS[h1 & 0x0F] + HEX_CHARS[h1 >> 12 & 0x0F] + HEX_CHARS[h1 >> 8 & 0x0F] + HEX_CHARS[h1 >> 20 & 0x0F] + HEX_CHARS[h1 >> 16 & 0x0F] + HEX_CHARS[h1 >> 28 & 0x0F] + HEX_CHARS[h1 >> 24 & 0x0F] + HEX_CHARS[h2 >> 4 & 0x0F] + HEX_CHARS[h2 & 0x0F] + HEX_CHARS[h2 >> 12 & 0x0F] + HEX_CHARS[h2 >> 8 & 0x0F] + HEX_CHARS[h2 >> 20 & 0x0F] + HEX_CHARS[h2 >> 16 & 0x0F] + HEX_CHARS[h2 >> 28 & 0x0F] + HEX_CHARS[h2 >> 24 & 0x0F] + HEX_CHARS[h3 >> 4 & 0x0F] + HEX_CHARS[h3 & 0x0F] + HEX_CHARS[h3 >> 12 & 0x0F] + HEX_CHARS[h3 >> 8 & 0x0F] + HEX_CHARS[h3 >> 20 & 0x0F] + HEX_CHARS[h3 >> 16 & 0x0F] + HEX_CHARS[h3 >> 28 & 0x0F] + HEX_CHARS[h3 >> 24 & 0x0F];
	  };
	  /**
	   * @method toString
	   * @memberof Md5
	   * @instance
	   * @description Output hash as hex string
	   * @returns {String} Hex string
	   * @see {@link md5.hex}
	   * @example
	   * hash.toString();
	   */


	  Md5.prototype.toString = Md5.prototype.hex;
	  /**
	   * @method digest
	   * @memberof Md5
	   * @instance
	   * @description Output hash as bytes array
	   * @returns {Array} Bytes array
	   * @see {@link md5.digest}
	   * @example
	   * hash.digest();
	   */

	  Md5.prototype.digest = function (format) {
	    if (format === 'hex') return this.hex();
	    this.finalize();
	    var h0 = this.h0,
	        h1 = this.h1,
	        h2 = this.h2,
	        h3 = this.h3;
	    var res = [h0 & 0xFF, h0 >> 8 & 0xFF, h0 >> 16 & 0xFF, h0 >> 24 & 0xFF, h1 & 0xFF, h1 >> 8 & 0xFF, h1 >> 16 & 0xFF, h1 >> 24 & 0xFF, h2 & 0xFF, h2 >> 8 & 0xFF, h2 >> 16 & 0xFF, h2 >> 24 & 0xFF, h3 & 0xFF, h3 >> 8 & 0xFF, h3 >> 16 & 0xFF, h3 >> 24 & 0xFF];
	    return res;
	  };
	  /**
	   * @method array
	   * @memberof Md5
	   * @instance
	   * @description Output hash as bytes array
	   * @returns {Array} Bytes array
	   * @see {@link md5.array}
	   * @example
	   * hash.array();
	   */


	  Md5.prototype.array = Md5.prototype.digest;
	  /**
	   * @method arrayBuffer
	   * @memberof Md5
	   * @instance
	   * @description Output hash as ArrayBuffer
	   * @returns {ArrayBuffer} ArrayBuffer
	   * @see {@link md5.arrayBuffer}
	   * @example
	   * hash.arrayBuffer();
	   */

	  Md5.prototype.arrayBuffer = function () {
	    this.finalize();
	    var buffer = new ArrayBuffer(16);
	    var blocks = new Uint32Array(buffer);
	    blocks[0] = this.h0;
	    blocks[1] = this.h1;
	    blocks[2] = this.h2;
	    blocks[3] = this.h3;
	    return buffer;
	  };
	  /**
	   * @method buffer
	   * @deprecated This maybe confuse with Buffer in node.js. Please use arrayBuffer instead.
	   * @memberof Md5
	   * @instance
	   * @description Output hash as ArrayBuffer
	   * @returns {ArrayBuffer} ArrayBuffer
	   * @see {@link md5.buffer}
	   * @example
	   * hash.buffer();
	   */


	  Md5.prototype.buffer = Md5.prototype.arrayBuffer;
	  /**
	   * @method base64
	   * @memberof Md5
	   * @instance
	   * @description Output hash as base64 string
	   * @returns {String} base64 string
	   * @see {@link md5.base64}
	   * @example
	   * hash.base64();
	   */

	  Md5.prototype.base64 = function () {
	    var v1,
	        v2,
	        v3,
	        base64Str = '',
	        bytes = this.array();

	    for (var i = 0; i < 15;) {
	      v1 = bytes[i++];
	      v2 = bytes[i++];
	      v3 = bytes[i++];
	      base64Str += BASE64_ENCODE_CHAR[v1 >>> 2] + BASE64_ENCODE_CHAR[(v1 << 4 | v2 >>> 4) & 63] + BASE64_ENCODE_CHAR[(v2 << 2 | v3 >>> 6) & 63] + BASE64_ENCODE_CHAR[v3 & 63];
	    }

	    v1 = bytes[i];
	    base64Str += BASE64_ENCODE_CHAR[v1 >>> 2] + BASE64_ENCODE_CHAR[v1 << 4 & 63] + '==';
	    return base64Str;
	  };

	  var exports = createMethod();

	  if (COMMON_JS) {
	    module.exports = exports;
	  } else {
	    /**
	     * @method md5
	     * @description Md5 hash function, export to global in browsers.
	     * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash
	     * @returns {String} md5 hashes
	     * @example
	     * md5(''); // d41d8cd98f00b204e9800998ecf8427e
	     * md5('The quick brown fox jumps over the lazy dog'); // 9e107d9d372bb6826bd81d3542a419d6
	     * md5('The quick brown fox jumps over the lazy dog.'); // e4d909c290d0fb1ca068ffaddf22cbd0
	     *
	     * // It also supports UTF-8 encoding
	     * md5('中文'); // a7bac2239fcdcb3a067903d8077c4a07
	     *
	     * // It also supports byte `Array`, `Uint8Array`, `ArrayBuffer`
	     * md5([]); // d41d8cd98f00b204e9800998ecf8427e
	     * md5(new Uint8Array([])); // d41d8cd98f00b204e9800998ecf8427e
	     */
	    root.md5 = exports;

	    if (AMD) {
	      !(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {
	        return exports;
	      }).call(exports, __webpack_require__, exports, module),
					__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	    }
	  }
	})();
	/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../node_modules/process/browser.js */ "./node_modules/process/browser.js"), __webpack_require__(/*! ./../node_modules/webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js"), __webpack_require__(/*! ./../node_modules/webpack/buildin/module.js */ "./node_modules/webpack/buildin/module.js")(module)));

	/***/ }),

	/***/ "./lib/request.js":
	/*!************************!*\
	  !*** ./lib/request.js ***!
	  \************************/
	/*! no static exports found */
	/***/ (function(module, exports, __webpack_require__) {

	var _typeof = __webpack_require__(/*! @babel/runtime/helpers/typeof */ "./node_modules/@babel/runtime/helpers/typeof.js");

	var stringifyPrimitive = function stringifyPrimitive(v) {
	  switch (_typeof(v)) {
	    case 'string':
	      return v;

	    case 'boolean':
	      return v ? 'true' : 'false';

	    case 'number':
	      return isFinite(v) ? v : '';

	    default:
	      return '';
	  }
	};

	var queryStringify = function queryStringify(obj, sep, eq, name) {
	  sep = sep || '&';
	  eq = eq || '=';

	  if (obj === null) {
	    obj = undefined;
	  }

	  if (_typeof(obj) === 'object') {
	    return Object.keys(obj).map(function (k) {
	      var ks = encodeURIComponent(stringifyPrimitive(k)) + eq;

	      if (Array.isArray(obj[k])) {
	        return obj[k].map(function (v) {
	          return ks + encodeURIComponent(stringifyPrimitive(v));
	        }).join(sep);
	      } else {
	        return ks + encodeURIComponent(stringifyPrimitive(obj[k]));
	      }
	    }).filter(Boolean).join(sep);
	  }

	  if (!name) return '';
	  return encodeURIComponent(stringifyPrimitive(name)) + eq + encodeURIComponent(stringifyPrimitive(obj));
	};

	var xhrRes = function xhrRes(err, xhr, body) {
	  var headers = {};
	  xhr.getAllResponseHeaders().trim().split('\n').forEach(function (item) {
	    if (item) {
	      var index = item.indexOf(':');
	      var key = item.substr(0, index).trim().toLowerCase();
	      var val = item.substr(index + 1).trim();
	      headers[key] = val;
	    }
	  });
	  return {
	    error: err,
	    statusCode: xhr.status,
	    statusMessage: xhr.statusText,
	    headers: headers,
	    body: body
	  };
	};

	var xhrBody = function xhrBody(xhr, dataType) {
	  return !dataType && dataType === 'text' ? xhr.responseText : xhr.response;
	};

	var request = function request(opt, callback) {
	  // method
	  var method = (opt.method || 'GET').toUpperCase(); // url、qs

	  var url = opt.url;

	  if (opt.qs) {
	    var qsStr = queryStringify(opt.qs);

	    if (qsStr) {
	      url += (url.indexOf('?') === -1 ? '?' : '&') + qsStr;
	    }
	  } // 创建 ajax 实例


	  var xhr = new XMLHttpRequest();
	  xhr.open(method, url, true);
	  xhr.responseType = opt.dataType || 'text'; // 处理 xhrFields 属性

	  if (opt.xhrFields) {
	    for (var xhrField in opt.xhrFields) {
	      xhr[xhrField] = opt.xhrFields[xhrField];
	    }
	  } // 处理 headers


	  var headers = opt.headers;

	  if (headers) {
	    for (var key in headers) {
	      if (headers.hasOwnProperty(key) && key.toLowerCase() !== 'content-length' && key.toLowerCase() !== 'user-agent' && key.toLowerCase() !== 'origin' && key.toLowerCase() !== 'host') {
	        xhr.setRequestHeader(key, headers[key]);
	      }
	    }
	  } // onprogress


	  if (opt.onProgress && xhr.upload) xhr.upload.onprogress = opt.onProgress;
	  if (opt.onDownloadProgress) xhr.onprogress = opt.onDownloadProgress; // timeout

	  if (opt.timeout) xhr.timeout = opt.timeout;

	  xhr.ontimeout = function (event) {
	    var error = new Error('timeout');
	    callback(xhrRes(error, xhr));
	  }; // success 2xx/3xx/4xx


	  xhr.onload = function () {
	    callback(xhrRes(null, xhr, xhrBody(xhr, opt.dataType)));
	  }; // error 5xx/0 (网络错误、跨域报错、Https connect-src 限制的报错时 statusCode 为 0)


	  xhr.onerror = function (err) {
	    var body = xhrBody(xhr, opt.dataType);

	    if (body) {
	      // 5xx
	      callback(xhrRes(null, xhr, body));
	    } else {
	      // 0
	      var error = xhr.statusText;
	      if (!error && xhr.status === 0) error = new Error('CORS blocked or network error');
	      callback(xhrRes(error, xhr, body));
	    }
	  }; // send


	  xhr.send(opt.body || ''); // 返回 ajax 实例，用于外部调用 xhr.abort

	  return xhr;
	};

	module.exports = request;

	/***/ }),

	/***/ "./lib/xml2json.js":
	/*!*************************!*\
	  !*** ./lib/xml2json.js ***!
	  \*************************/
	/*! no static exports found */
	/***/ (function(module, exports, __webpack_require__) {

	/* Copyright 2015 William Summers, MetaTribal LLC
	 * adapted from https://developer.mozilla.org/en-US/docs/JXON
	 *
	 * Licensed under the MIT License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     https://opensource.org/licenses/MIT
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */

	/**
	 * @author William Summers
	 * https://github.com/metatribal/xmlToJSON
	 */
	var DOMParser = __webpack_require__(/*! @xmldom/xmldom */ "./node_modules/@xmldom/xmldom/lib/index.js").DOMParser;

	var xmlToJSON = function () {
	  this.version = "1.3.5";
	  var options = {
	    // set up the default options
	    mergeCDATA: true,
	    // extract cdata and merge with text
	    normalize: true,
	    // collapse multiple spaces to single space
	    stripElemPrefix: true // for elements of same name in diff namespaces, you can enable namespaces and access the nskey property

	  };
	  var prefixMatch = new RegExp(/(?!xmlns)^.*:/);

	  this.grokType = function (sValue) {
	    if (/^\s*$/.test(sValue)) {
	      return null;
	    }

	    if (/^(?:true|false)$/i.test(sValue)) {
	      return sValue.toLowerCase() === "true";
	    }

	    if (isFinite(sValue)) {
	      return parseFloat(sValue);
	    }

	    return sValue;
	  };

	  this.parseString = function (xmlString, opt) {
	    if (xmlString) {
	      var xml = this.stringToXML(xmlString);

	      if (xml.getElementsByTagName('parsererror').length) {
	        return null;
	      } else {
	        return this.parseXML(xml, opt);
	      }
	    } else {
	      return null;
	    }
	  };

	  this.parseXML = function (oXMLParent, opt) {
	    // initialize options
	    for (var key in opt) {
	      options[key] = opt[key];
	    }

	    var vResult = {},
	        nLength = 0,
	        sCollectedTxt = ""; // iterate over the children

	    var childNum = oXMLParent.childNodes.length;

	    if (childNum) {
	      for (var oNode, sProp, vContent, nItem = 0; nItem < oXMLParent.childNodes.length; nItem++) {
	        oNode = oXMLParent.childNodes.item(nItem);

	        if (oNode.nodeType === 4) {
	          if (options.mergeCDATA) {
	            sCollectedTxt += oNode.nodeValue;
	          }
	        }
	        /* nodeType is "CDATASection" (4) */
	        else if (oNode.nodeType === 3) {
	          sCollectedTxt += oNode.nodeValue;
	        }
	        /* nodeType is "Text" (3) */
	        else if (oNode.nodeType === 1) {
	          /* nodeType is "Element" (1) */
	          if (nLength === 0) {
	            vResult = {};
	          } // using nodeName to support browser (IE) implementation with no 'localName' property


	          if (options.stripElemPrefix) {
	            sProp = oNode.nodeName.replace(prefixMatch, '');
	          } else {
	            sProp = oNode.nodeName;
	          }

	          vContent = xmlToJSON.parseXML(oNode);

	          if (vResult.hasOwnProperty(sProp)) {
	            if (vResult[sProp].constructor !== Array) {
	              vResult[sProp] = [vResult[sProp]];
	            }

	            vResult[sProp].push(vContent);
	          } else {
	            vResult[sProp] = vContent;
	            nLength++;
	          }
	        }
	      }
	    }

	    if (!Object.keys(vResult).length) {
	      // vResult = sCollectedTxt.replace(trimMatch, '') || ''; // by carsonxu 修复 getBucket返回的 Key 是 " /" 这种场景
	      vResult = sCollectedTxt || '';
	    }

	    return vResult;
	  }; // Convert xmlDocument to a string
	  // Returns null on failure


	  this.xmlToString = function (xmlDoc) {
	    try {
	      var xmlString = xmlDoc.xml ? xmlDoc.xml : new XMLSerializer().serializeToString(xmlDoc);
	      return xmlString;
	    } catch (err) {
	      return null;
	    }
	  }; // Convert a string to XML Node Structure
	  // Returns null on failure


	  this.stringToXML = function (xmlString) {
	    try {
	      var xmlDoc = null;

	      if (window.DOMParser) {
	        var parser = new DOMParser();
	        xmlDoc = parser.parseFromString(xmlString, "text/xml");
	        return xmlDoc;
	      } else {
	        xmlDoc = new ActiveXObject("Microsoft.XMLDOM");
	        xmlDoc.async = false;
	        xmlDoc.loadXML(xmlString);
	        return xmlDoc;
	      }
	    } catch (e) {
	      return null;
	    }
	  };

	  return this;
	}.call({});

	var xml2json = function xml2json(xmlString) {
	  return xmlToJSON.parseString(xmlString);
	};

	module.exports = xml2json;

	/***/ }),

	/***/ "./node_modules/@babel/runtime/helpers/classCallCheck.js":
	/*!***************************************************************!*\
	  !*** ./node_modules/@babel/runtime/helpers/classCallCheck.js ***!
	  \***************************************************************/
	/*! no static exports found */
	/***/ (function(module, exports) {

	function _classCallCheck(instance, Constructor) {
	  if (!(instance instanceof Constructor)) {
	    throw new TypeError("Cannot call a class as a function");
	  }
	}

	module.exports = _classCallCheck, module.exports.__esModule = true, module.exports["default"] = module.exports;

	/***/ }),

	/***/ "./node_modules/@babel/runtime/helpers/createClass.js":
	/*!************************************************************!*\
	  !*** ./node_modules/@babel/runtime/helpers/createClass.js ***!
	  \************************************************************/
	/*! no static exports found */
	/***/ (function(module, exports) {

	function _defineProperties(target, props) {
	  for (var i = 0; i < props.length; i++) {
	    var descriptor = props[i];
	    descriptor.enumerable = descriptor.enumerable || false;
	    descriptor.configurable = true;
	    if ("value" in descriptor) descriptor.writable = true;
	    Object.defineProperty(target, descriptor.key, descriptor);
	  }
	}

	function _createClass(Constructor, protoProps, staticProps) {
	  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
	  if (staticProps) _defineProperties(Constructor, staticProps);
	  Object.defineProperty(Constructor, "prototype", {
	    writable: false
	  });
	  return Constructor;
	}

	module.exports = _createClass, module.exports.__esModule = true, module.exports["default"] = module.exports;

	/***/ }),

	/***/ "./node_modules/@babel/runtime/helpers/typeof.js":
	/*!*******************************************************!*\
	  !*** ./node_modules/@babel/runtime/helpers/typeof.js ***!
	  \*******************************************************/
	/*! no static exports found */
	/***/ (function(module, exports) {

	function _typeof(obj) {
	  "@babel/helpers - typeof";

	  return (module.exports = _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {
	    return typeof obj;
	  } : function (obj) {
	    return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
	  }, module.exports.__esModule = true, module.exports["default"] = module.exports), _typeof(obj);
	}

	module.exports = _typeof, module.exports.__esModule = true, module.exports["default"] = module.exports;

	/***/ }),

	/***/ "./node_modules/@xmldom/xmldom/lib/conventions.js":
	/*!********************************************************!*\
	  !*** ./node_modules/@xmldom/xmldom/lib/conventions.js ***!
	  \********************************************************/
	/*! no static exports found */
	/***/ (function(module, exports, __webpack_require__) {


	/**
	 * Ponyfill for `Array.prototype.find` which is only available in ES6 runtimes.
	 *
	 * Works with anything that has a `length` property and index access properties, including NodeList.
	 *
	 * @template {unknown} T
	 * @param {Array<T> | ({length:number, [number]: T})} list
	 * @param {function (item: T, index: number, list:Array<T> | ({length:number, [number]: T})):boolean} predicate
	 * @param {Partial<Pick<ArrayConstructor['prototype'], 'find'>>?} ac `Array.prototype` by default,
	 * 				allows injecting a custom implementation in tests
	 * @returns {T | undefined}
	 *
	 * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find
	 * @see https://tc39.es/ecma262/multipage/indexed-collections.html#sec-array.prototype.find
	 */
	function find(list, predicate, ac) {
		if (ac === undefined) {
			ac = Array.prototype;
		}
		if (list && typeof ac.find === 'function') {
			return ac.find.call(list, predicate);
		}
		for (var i = 0; i < list.length; i++) {
			if (Object.prototype.hasOwnProperty.call(list, i)) {
				var item = list[i];
				if (predicate.call(undefined, item, i, list)) {
					return item;
				}
			}
		}
	}

	/**
	 * "Shallow freezes" an object to render it immutable.
	 * Uses `Object.freeze` if available,
	 * otherwise the immutability is only in the type.
	 *
	 * Is used to create "enum like" objects.
	 *
	 * @template T
	 * @param {T} object the object to freeze
	 * @param {Pick<ObjectConstructor, 'freeze'> = Object} oc `Object` by default,
	 * 				allows to inject custom object constructor for tests
	 * @returns {Readonly<T>}
	 *
	 * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze
	 */
	function freeze(object, oc) {
		if (oc === undefined) {
			oc = Object;
		}
		return oc && typeof oc.freeze === 'function' ? oc.freeze(object) : object
	}

	/**
	 * Since we can not rely on `Object.assign` we provide a simplified version
	 * that is sufficient for our needs.
	 *
	 * @param {Object} target
	 * @param {Object | null | undefined} source
	 *
	 * @returns {Object} target
	 * @throws TypeError if target is not an object
	 *
	 * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign
	 * @see https://tc39.es/ecma262/multipage/fundamental-objects.html#sec-object.assign
	 */
	function assign(target, source) {
		if (target === null || typeof target !== 'object') {
			throw new TypeError('target is not an object')
		}
		for (var key in source) {
			if (Object.prototype.hasOwnProperty.call(source, key)) {
				target[key] = source[key];
			}
		}
		return target
	}

	/**
	 * All mime types that are allowed as input to `DOMParser.parseFromString`
	 *
	 * @see https://developer.mozilla.org/en-US/docs/Web/API/DOMParser/parseFromString#Argument02 MDN
	 * @see https://html.spec.whatwg.org/multipage/dynamic-markup-insertion.html#domparsersupportedtype WHATWG HTML Spec
	 * @see DOMParser.prototype.parseFromString
	 */
	var MIME_TYPE = freeze({
		/**
		 * `text/html`, the only mime type that triggers treating an XML document as HTML.
		 *
		 * @see DOMParser.SupportedType.isHTML
		 * @see https://www.iana.org/assignments/media-types/text/html IANA MimeType registration
		 * @see https://en.wikipedia.org/wiki/HTML Wikipedia
		 * @see https://developer.mozilla.org/en-US/docs/Web/API/DOMParser/parseFromString MDN
		 * @see https://html.spec.whatwg.org/multipage/dynamic-markup-insertion.html#dom-domparser-parsefromstring WHATWG HTML Spec
		 */
		HTML: 'text/html',

		/**
		 * Helper method to check a mime type if it indicates an HTML document
		 *
		 * @param {string} [value]
		 * @returns {boolean}
		 *
		 * @see https://www.iana.org/assignments/media-types/text/html IANA MimeType registration
		 * @see https://en.wikipedia.org/wiki/HTML Wikipedia
		 * @see https://developer.mozilla.org/en-US/docs/Web/API/DOMParser/parseFromString MDN
		 * @see https://html.spec.whatwg.org/multipage/dynamic-markup-insertion.html#dom-domparser-parsefromstring 	 */
		isHTML: function (value) {
			return value === MIME_TYPE.HTML
		},

		/**
		 * `application/xml`, the standard mime type for XML documents.
		 *
		 * @see https://www.iana.org/assignments/media-types/application/xml IANA MimeType registration
		 * @see https://tools.ietf.org/html/rfc7303#section-9.1 RFC 7303
		 * @see https://en.wikipedia.org/wiki/XML_and_MIME Wikipedia
		 */
		XML_APPLICATION: 'application/xml',

		/**
		 * `text/html`, an alias for `application/xml`.
		 *
		 * @see https://tools.ietf.org/html/rfc7303#section-9.2 RFC 7303
		 * @see https://www.iana.org/assignments/media-types/text/xml IANA MimeType registration
		 * @see https://en.wikipedia.org/wiki/XML_and_MIME Wikipedia
		 */
		XML_TEXT: 'text/xml',

		/**
		 * `application/xhtml+xml`, indicates an XML document that has the default HTML namespace,
		 * but is parsed as an XML document.
		 *
		 * @see https://www.iana.org/assignments/media-types/application/xhtml+xml IANA MimeType registration
		 * @see https://dom.spec.whatwg.org/#dom-domimplementation-createdocument WHATWG DOM Spec
		 * @see https://en.wikipedia.org/wiki/XHTML Wikipedia
		 */
		XML_XHTML_APPLICATION: 'application/xhtml+xml',

		/**
		 * `image/svg+xml`,
		 *
		 * @see https://www.iana.org/assignments/media-types/image/svg+xml IANA MimeType registration
		 * @see https://www.w3.org/TR/SVG11/ W3C SVG 1.1
		 * @see https://en.wikipedia.org/wiki/Scalable_Vector_Graphics Wikipedia
		 */
		XML_SVG_IMAGE: 'image/svg+xml',
	});

	/**
	 * Namespaces that are used in this code base.
	 *
	 * @see http://www.w3.org/TR/REC-xml-names
	 */
	var NAMESPACE = freeze({
		/**
		 * The XHTML namespace.
		 *
		 * @see http://www.w3.org/1999/xhtml
		 */
		HTML: 'http://www.w3.org/1999/xhtml',

		/**
		 * Checks if `uri` equals `NAMESPACE.HTML`.
		 *
		 * @param {string} [uri]
		 *
		 * @see NAMESPACE.HTML
		 */
		isHTML: function (uri) {
			return uri === NAMESPACE.HTML
		},

		/**
		 * The SVG namespace.
		 *
		 * @see http://www.w3.org/2000/svg
		 */
		SVG: 'http://www.w3.org/2000/svg',

		/**
		 * The `xml:` namespace.
		 *
		 * @see http://www.w3.org/XML/1998/namespace
		 */
		XML: 'http://www.w3.org/XML/1998/namespace',

		/**
		 * The `xmlns:` namespace
		 *
		 * @see https://www.w3.org/2000/xmlns/
		 */
		XMLNS: 'http://www.w3.org/2000/xmlns/',
	});

	exports.assign = assign;
	exports.find = find;
	exports.freeze = freeze;
	exports.MIME_TYPE = MIME_TYPE;
	exports.NAMESPACE = NAMESPACE;


	/***/ }),

	/***/ "./node_modules/@xmldom/xmldom/lib/dom-parser.js":
	/*!*******************************************************!*\
	  !*** ./node_modules/@xmldom/xmldom/lib/dom-parser.js ***!
	  \*******************************************************/
	/*! no static exports found */
	/***/ (function(module, exports, __webpack_require__) {

	var conventions = __webpack_require__(/*! ./conventions */ "./node_modules/@xmldom/xmldom/lib/conventions.js");
	var dom = __webpack_require__(/*! ./dom */ "./node_modules/@xmldom/xmldom/lib/dom.js");
	var entities = __webpack_require__(/*! ./entities */ "./node_modules/@xmldom/xmldom/lib/entities.js");
	var sax = __webpack_require__(/*! ./sax */ "./node_modules/@xmldom/xmldom/lib/sax.js");

	var DOMImplementation = dom.DOMImplementation;

	var NAMESPACE = conventions.NAMESPACE;

	var ParseError = sax.ParseError;
	var XMLReader = sax.XMLReader;

	/**
	 * Normalizes line ending according to https://www.w3.org/TR/xml11/#sec-line-ends:
	 *
	 * > XML parsed entities are often stored in computer files which,
	 * > for editing convenience, are organized into lines.
	 * > These lines are typically separated by some combination
	 * > of the characters CARRIAGE RETURN (#xD) and LINE FEED (#xA).
	 * >
	 * > To simplify the tasks of applications, the XML processor must behave
	 * > as if it normalized all line breaks in external parsed entities (including the document entity)
	 * > on input, before parsing, by translating all of the following to a single #xA character:
	 * >
	 * > 1. the two-character sequence #xD #xA
	 * > 2. the two-character sequence #xD #x85
	 * > 3. the single character #x85
	 * > 4. the single character #x2028
	 * > 5. any #xD character that is not immediately followed by #xA or #x85.
	 *
	 * @param {string} input
	 * @returns {string}
	 */
	function normalizeLineEndings(input) {
		return input
			.replace(/\r[\n\u0085]/g, '\n')
			.replace(/[\r\u0085\u2028]/g, '\n')
	}

	/**
	 * @typedef Locator
	 * @property {number} [columnNumber]
	 * @property {number} [lineNumber]
	 */

	/**
	 * @typedef DOMParserOptions
	 * @property {DOMHandler} [domBuilder]
	 * @property {Function} [errorHandler]
	 * @property {(string) => string} [normalizeLineEndings] used to replace line endings before parsing
	 * 						defaults to `normalizeLineEndings`
	 * @property {Locator} [locator]
	 * @property {Record<string, string>} [xmlns]
	 *
	 * @see normalizeLineEndings
	 */

	/**
	 * The DOMParser interface provides the ability to parse XML or HTML source code
	 * from a string into a DOM `Document`.
	 *
	 * _xmldom is different from the spec in that it allows an `options` parameter,
	 * to override the default behavior._
	 *
	 * @param {DOMParserOptions} [options]
	 * @constructor
	 *
	 * @see https://developer.mozilla.org/en-US/docs/Web/API/DOMParser
	 * @see https://html.spec.whatwg.org/multipage/dynamic-markup-insertion.html#dom-parsing-and-serialization
	 */
	function DOMParser(options){
		this.options = options ||{locator:{}};
	}

	DOMParser.prototype.parseFromString = function(source,mimeType){
		var options = this.options;
		var sax =  new XMLReader();
		var domBuilder = options.domBuilder || new DOMHandler();//contentHandler and LexicalHandler
		var errorHandler = options.errorHandler;
		var locator = options.locator;
		var defaultNSMap = options.xmlns||{};
		var isHTML = /\/x?html?$/.test(mimeType);//mimeType.toLowerCase().indexOf('html') > -1;
	  	var entityMap = isHTML ? entities.HTML_ENTITIES : entities.XML_ENTITIES;
		if(locator){
			domBuilder.setDocumentLocator(locator);
		}

		sax.errorHandler = buildErrorHandler(errorHandler,domBuilder,locator);
		sax.domBuilder = options.domBuilder || domBuilder;
		if(isHTML){
			defaultNSMap[''] = NAMESPACE.HTML;
		}
		defaultNSMap.xml = defaultNSMap.xml || NAMESPACE.XML;
		var normalize = options.normalizeLineEndings || normalizeLineEndings;
		if (source && typeof source === 'string') {
			sax.parse(
				normalize(source),
				defaultNSMap,
				entityMap
			);
		} else {
			sax.errorHandler.error('invalid doc source');
		}
		return domBuilder.doc;
	};
	function buildErrorHandler(errorImpl,domBuilder,locator){
		if(!errorImpl){
			if(domBuilder instanceof DOMHandler){
				return domBuilder;
			}
			errorImpl = domBuilder ;
		}
		var errorHandler = {};
		var isCallback = errorImpl instanceof Function;
		locator = locator||{};
		function build(key){
			var fn = errorImpl[key];
			if(!fn && isCallback){
				fn = errorImpl.length == 2?function(msg){errorImpl(key,msg);}:errorImpl;
			}
			errorHandler[key] = fn && function(msg){
				fn('[xmldom '+key+']\t'+msg+_locator(locator));
			}||function(){};
		}
		build('warning');
		build('error');
		build('fatalError');
		return errorHandler;
	}

	//console.log('#\n\n\n\n\n\n\n####')
	/**
	 * +ContentHandler+ErrorHandler
	 * +LexicalHandler+EntityResolver2
	 * -DeclHandler-DTDHandler
	 *
	 * DefaultHandler:EntityResolver, DTDHandler, ContentHandler, ErrorHandler
	 * DefaultHandler2:DefaultHandler,LexicalHandler, DeclHandler, EntityResolver2
	 * @link http://www.saxproject.org/apidoc/org/xml/sax/helpers/DefaultHandler.html
	 */
	function DOMHandler() {
	    this.cdata = false;
	}
	function position(locator,node){
		node.lineNumber = locator.lineNumber;
		node.columnNumber = locator.columnNumber;
	}
	/**
	 * @see org.xml.sax.ContentHandler#startDocument
	 * @link http://www.saxproject.org/apidoc/org/xml/sax/ContentHandler.html
	 */
	DOMHandler.prototype = {
		startDocument : function() {
	    	this.doc = new DOMImplementation().createDocument(null, null, null);
	    	if (this.locator) {
	        	this.doc.documentURI = this.locator.systemId;
	    	}
		},
		startElement:function(namespaceURI, localName, qName, attrs) {
			var doc = this.doc;
		    var el = doc.createElementNS(namespaceURI, qName||localName);
		    var len = attrs.length;
		    appendElement(this, el);
		    this.currentElement = el;

			this.locator && position(this.locator,el);
		    for (var i = 0 ; i < len; i++) {
		        var namespaceURI = attrs.getURI(i);
		        var value = attrs.getValue(i);
		        var qName = attrs.getQName(i);
				var attr = doc.createAttributeNS(namespaceURI, qName);
				this.locator &&position(attrs.getLocator(i),attr);
				attr.value = attr.nodeValue = value;
				el.setAttributeNode(attr);
		    }
		},
		endElement:function(namespaceURI, localName, qName) {
			var current = this.currentElement;
			current.tagName;
			this.currentElement = current.parentNode;
		},
		startPrefixMapping:function(prefix, uri) {
		},
		endPrefixMapping:function(prefix) {
		},
		processingInstruction:function(target, data) {
		    var ins = this.doc.createProcessingInstruction(target, data);
		    this.locator && position(this.locator,ins);
		    appendElement(this, ins);
		},
		ignorableWhitespace:function(ch, start, length) {
		},
		characters:function(chars, start, length) {
			chars = _toString.apply(this,arguments);
			//console.log(chars)
			if(chars){
				if (this.cdata) {
					var charNode = this.doc.createCDATASection(chars);
				} else {
					var charNode = this.doc.createTextNode(chars);
				}
				if(this.currentElement){
					this.currentElement.appendChild(charNode);
				}else if(/^\s*$/.test(chars)){
					this.doc.appendChild(charNode);
					//process xml
				}
				this.locator && position(this.locator,charNode);
			}
		},
		skippedEntity:function(name) {
		},
		endDocument:function() {
			this.doc.normalize();
		},
		setDocumentLocator:function (locator) {
		    if(this.locator = locator){// && !('lineNumber' in locator)){
		    	locator.lineNumber = 0;
		    }
		},
		//LexicalHandler
		comment:function(chars, start, length) {
			chars = _toString.apply(this,arguments);
		    var comm = this.doc.createComment(chars);
		    this.locator && position(this.locator,comm);
		    appendElement(this, comm);
		},

		startCDATA:function() {
		    //used in characters() methods
		    this.cdata = true;
		},
		endCDATA:function() {
		    this.cdata = false;
		},

		startDTD:function(name, publicId, systemId) {
			var impl = this.doc.implementation;
		    if (impl && impl.createDocumentType) {
		        var dt = impl.createDocumentType(name, publicId, systemId);
		        this.locator && position(this.locator,dt);
		        appendElement(this, dt);
						this.doc.doctype = dt;
		    }
		},
		/**
		 * @see org.xml.sax.ErrorHandler
		 * @link http://www.saxproject.org/apidoc/org/xml/sax/ErrorHandler.html
		 */
		warning:function(error) {
			console.warn('[xmldom warning]\t'+error,_locator(this.locator));
		},
		error:function(error) {
			console.error('[xmldom error]\t'+error,_locator(this.locator));
		},
		fatalError:function(error) {
			throw new ParseError(error, this.locator);
		}
	};
	function _locator(l){
		if(l){
			return '\n@'+(l.systemId ||'')+'#[line:'+l.lineNumber+',col:'+l.columnNumber+']'
		}
	}
	function _toString(chars,start,length){
		if(typeof chars == 'string'){
			return chars.substr(start,length)
		}else {//java sax connect width xmldom on rhino(what about: "? && !(chars instanceof String)")
			if(chars.length >= start+length || start){
				return new java.lang.String(chars,start,length)+'';
			}
			return chars;
		}
	}

	/*
	 * @link http://www.saxproject.org/apidoc/org/xml/sax/ext/LexicalHandler.html
	 * used method of org.xml.sax.ext.LexicalHandler:
	 *  #comment(chars, start, length)
	 *  #startCDATA()
	 *  #endCDATA()
	 *  #startDTD(name, publicId, systemId)
	 *
	 *
	 * IGNORED method of org.xml.sax.ext.LexicalHandler:
	 *  #endDTD()
	 *  #startEntity(name)
	 *  #endEntity(name)
	 *
	 *
	 * @link http://www.saxproject.org/apidoc/org/xml/sax/ext/DeclHandler.html
	 * IGNORED method of org.xml.sax.ext.DeclHandler
	 * 	#attributeDecl(eName, aName, type, mode, value)
	 *  #elementDecl(name, model)
	 *  #externalEntityDecl(name, publicId, systemId)
	 *  #internalEntityDecl(name, value)
	 * @link http://www.saxproject.org/apidoc/org/xml/sax/ext/EntityResolver2.html
	 * IGNORED method of org.xml.sax.EntityResolver2
	 *  #resolveEntity(String name,String publicId,String baseURI,String systemId)
	 *  #resolveEntity(publicId, systemId)
	 *  #getExternalSubset(name, baseURI)
	 * @link http://www.saxproject.org/apidoc/org/xml/sax/DTDHandler.html
	 * IGNORED method of org.xml.sax.DTDHandler
	 *  #notationDecl(name, publicId, systemId) {};
	 *  #unparsedEntityDecl(name, publicId, systemId, notationName) {};
	 */
	"endDTD,startEntity,endEntity,attributeDecl,elementDecl,externalEntityDecl,internalEntityDecl,resolveEntity,getExternalSubset,notationDecl,unparsedEntityDecl".replace(/\w+/g,function(key){
		DOMHandler.prototype[key] = function(){return null};
	});

	/* Private static helpers treated below as private instance methods, so don't need to add these to the public API; we might use a Relator to also get rid of non-standard public properties */
	function appendElement (hander,node) {
	    if (!hander.currentElement) {
	        hander.doc.appendChild(node);
	    } else {
	        hander.currentElement.appendChild(node);
	    }
	}//appendChild and setAttributeNS are preformance key

	exports.__DOMHandler = DOMHandler;
	exports.normalizeLineEndings = normalizeLineEndings;
	exports.DOMParser = DOMParser;


	/***/ }),

	/***/ "./node_modules/@xmldom/xmldom/lib/dom.js":
	/*!************************************************!*\
	  !*** ./node_modules/@xmldom/xmldom/lib/dom.js ***!
	  \************************************************/
	/*! no static exports found */
	/***/ (function(module, exports, __webpack_require__) {

	var conventions = __webpack_require__(/*! ./conventions */ "./node_modules/@xmldom/xmldom/lib/conventions.js");

	var find = conventions.find;
	var NAMESPACE = conventions.NAMESPACE;

	/**
	 * A prerequisite for `[].filter`, to drop elements that are empty
	 * @param {string} input
	 * @returns {boolean}
	 */
	function notEmptyString (input) {
		return input !== ''
	}
	/**
	 * @see https://infra.spec.whatwg.org/#split-on-ascii-whitespace
	 * @see https://infra.spec.whatwg.org/#ascii-whitespace
	 *
	 * @param {string} input
	 * @returns {string[]} (can be empty)
	 */
	function splitOnASCIIWhitespace(input) {
		// U+0009 TAB, U+000A LF, U+000C FF, U+000D CR, U+0020 SPACE
		return input ? input.split(/[\t\n\f\r ]+/).filter(notEmptyString) : []
	}

	/**
	 * Adds element as a key to current if it is not already present.
	 *
	 * @param {Record<string, boolean | undefined>} current
	 * @param {string} element
	 * @returns {Record<string, boolean | undefined>}
	 */
	function orderedSetReducer (current, element) {
		if (!current.hasOwnProperty(element)) {
			current[element] = true;
		}
		return current;
	}

	/**
	 * @see https://infra.spec.whatwg.org/#ordered-set
	 * @param {string} input
	 * @returns {string[]}
	 */
	function toOrderedSet(input) {
		if (!input) return [];
		var list = splitOnASCIIWhitespace(input);
		return Object.keys(list.reduce(orderedSetReducer, {}))
	}

	/**
	 * Uses `list.indexOf` to implement something like `Array.prototype.includes`,
	 * which we can not rely on being available.
	 *
	 * @param {any[]} list
	 * @returns {function(any): boolean}
	 */
	function arrayIncludes (list) {
		return function(element) {
			return list && list.indexOf(element) !== -1;
		}
	}

	function copy(src,dest){
		for(var p in src){
			if (Object.prototype.hasOwnProperty.call(src, p)) {
				dest[p] = src[p];
			}
		}
	}

	/**
	^\w+\.prototype\.([_\w]+)\s*=\s*((?:.*\{\s*?[\r\n][\s\S]*?^})|\S.*?(?=[;\r\n]));?
	^\w+\.prototype\.([_\w]+)\s*=\s*(\S.*?(?=[;\r\n]));?
	 */
	function _extends(Class,Super){
		var pt = Class.prototype;
		if(!(pt instanceof Super)){
			function t(){}			t.prototype = Super.prototype;
			t = new t();
			copy(pt,t);
			Class.prototype = pt = t;
		}
		if(pt.constructor != Class){
			if(typeof Class != 'function'){
				console.error("unknown Class:"+Class);
			}
			pt.constructor = Class;
		}
	}

	// Node Types
	var NodeType = {};
	var ELEMENT_NODE                = NodeType.ELEMENT_NODE                = 1;
	var ATTRIBUTE_NODE              = NodeType.ATTRIBUTE_NODE              = 2;
	var TEXT_NODE                   = NodeType.TEXT_NODE                   = 3;
	var CDATA_SECTION_NODE          = NodeType.CDATA_SECTION_NODE          = 4;
	var ENTITY_REFERENCE_NODE       = NodeType.ENTITY_REFERENCE_NODE       = 5;
	var ENTITY_NODE                 = NodeType.ENTITY_NODE                 = 6;
	var PROCESSING_INSTRUCTION_NODE = NodeType.PROCESSING_INSTRUCTION_NODE = 7;
	var COMMENT_NODE                = NodeType.COMMENT_NODE                = 8;
	var DOCUMENT_NODE               = NodeType.DOCUMENT_NODE               = 9;
	var DOCUMENT_TYPE_NODE          = NodeType.DOCUMENT_TYPE_NODE          = 10;
	var DOCUMENT_FRAGMENT_NODE      = NodeType.DOCUMENT_FRAGMENT_NODE      = 11;
	var NOTATION_NODE               = NodeType.NOTATION_NODE               = 12;

	// ExceptionCode
	var ExceptionCode = {};
	var ExceptionMessage = {};
	ExceptionCode.INDEX_SIZE_ERR              = ((ExceptionMessage[1]="Index size error"),1);
	ExceptionCode.DOMSTRING_SIZE_ERR          = ((ExceptionMessage[2]="DOMString size error"),2);
	var HIERARCHY_REQUEST_ERR       = ExceptionCode.HIERARCHY_REQUEST_ERR       = ((ExceptionMessage[3]="Hierarchy request error"),3);
	ExceptionCode.WRONG_DOCUMENT_ERR          = ((ExceptionMessage[4]="Wrong document"),4);
	ExceptionCode.INVALID_CHARACTER_ERR       = ((ExceptionMessage[5]="Invalid character"),5);
	ExceptionCode.NO_DATA_ALLOWED_ERR         = ((ExceptionMessage[6]="No data allowed"),6);
	ExceptionCode.NO_MODIFICATION_ALLOWED_ERR = ((ExceptionMessage[7]="No modification allowed"),7);
	var NOT_FOUND_ERR               = ExceptionCode.NOT_FOUND_ERR               = ((ExceptionMessage[8]="Not found"),8);
	ExceptionCode.NOT_SUPPORTED_ERR           = ((ExceptionMessage[9]="Not supported"),9);
	var INUSE_ATTRIBUTE_ERR         = ExceptionCode.INUSE_ATTRIBUTE_ERR         = ((ExceptionMessage[10]="Attribute in use"),10);
	//level2
	ExceptionCode.INVALID_STATE_ERR        	= ((ExceptionMessage[11]="Invalid state"),11);
	ExceptionCode.SYNTAX_ERR               	= ((ExceptionMessage[12]="Syntax error"),12);
	ExceptionCode.INVALID_MODIFICATION_ERR 	= ((ExceptionMessage[13]="Invalid modification"),13);
	ExceptionCode.NAMESPACE_ERR           	= ((ExceptionMessage[14]="Invalid namespace"),14);
	ExceptionCode.INVALID_ACCESS_ERR      	= ((ExceptionMessage[15]="Invalid access"),15);

	/**
	 * DOM Level 2
	 * Object DOMException
	 * @see http://www.w3.org/TR/2000/REC-DOM-Level-2-Core-20001113/ecma-script-binding.html
	 * @see http://www.w3.org/TR/REC-DOM-Level-1/ecma-script-language-binding.html
	 */
	function DOMException(code, message) {
		if(message instanceof Error){
			var error = message;
		}else {
			error = this;
			Error.call(this, ExceptionMessage[code]);
			this.message = ExceptionMessage[code];
			if(Error.captureStackTrace) Error.captureStackTrace(this, DOMException);
		}
		error.code = code;
		if(message) this.message = this.message + ": " + message;
		return error;
	}	DOMException.prototype = Error.prototype;
	copy(ExceptionCode,DOMException);

	/**
	 * @see http://www.w3.org/TR/2000/REC-DOM-Level-2-Core-20001113/core.html#ID-536297177
	 * The NodeList interface provides the abstraction of an ordered collection of nodes, without defining or constraining how this collection is implemented. NodeList objects in the DOM are live.
	 * The items in the NodeList are accessible via an integral index, starting from 0.
	 */
	function NodeList() {
	}	NodeList.prototype = {
		/**
		 * The number of nodes in the list. The range of valid child node indices is 0 to length-1 inclusive.
		 * @standard level1
		 */
		length:0,
		/**
		 * Returns the indexth item in the collection. If index is greater than or equal to the number of nodes in the list, this returns null.
		 * @standard level1
		 * @param index  unsigned long
		 *   Index into the collection.
		 * @return Node
		 * 	The node at the indexth position in the NodeList, or null if that is not a valid index.
		 */
		item: function(index) {
			return this[index] || null;
		},
		toString:function(isHTML,nodeFilter){
			for(var buf = [], i = 0;i<this.length;i++){
				serializeToString(this[i],buf,isHTML,nodeFilter);
			}
			return buf.join('');
		},
		/**
		 * @private
		 * @param {function (Node):boolean} predicate
		 * @returns {Node[]}
		 */
		filter: function (predicate) {
			return Array.prototype.filter.call(this, predicate);
		},
		/**
		 * @private
		 * @param {Node} item
		 * @returns {number}
		 */
		indexOf: function (item) {
			return Array.prototype.indexOf.call(this, item);
		},
	};

	function LiveNodeList(node,refresh){
		this._node = node;
		this._refresh = refresh;
		_updateLiveList(this);
	}
	function _updateLiveList(list){
		var inc = list._node._inc || list._node.ownerDocument._inc;
		if(list._inc != inc){
			var ls = list._refresh(list._node);
			//console.log(ls.length)
			__set__(list,'length',ls.length);
			copy(ls,list);
			list._inc = inc;
		}
	}
	LiveNodeList.prototype.item = function(i){
		_updateLiveList(this);
		return this[i];
	};

	_extends(LiveNodeList,NodeList);

	/**
	 * Objects implementing the NamedNodeMap interface are used
	 * to represent collections of nodes that can be accessed by name.
	 * Note that NamedNodeMap does not inherit from NodeList;
	 * NamedNodeMaps are not maintained in any particular order.
	 * Objects contained in an object implementing NamedNodeMap may also be accessed by an ordinal index,
	 * but this is simply to allow convenient enumeration of the contents of a NamedNodeMap,
	 * and does not imply that the DOM specifies an order to these Nodes.
	 * NamedNodeMap objects in the DOM are live.
	 * used for attributes or DocumentType entities
	 */
	function NamedNodeMap() {
	}
	function _findNodeIndex(list,node){
		var i = list.length;
		while(i--){
			if(list[i] === node){return i}
		}
	}

	function _addNamedNode(el,list,newAttr,oldAttr){
		if(oldAttr){
			list[_findNodeIndex(list,oldAttr)] = newAttr;
		}else {
			list[list.length++] = newAttr;
		}
		if(el){
			newAttr.ownerElement = el;
			var doc = el.ownerDocument;
			if(doc){
				oldAttr && _onRemoveAttribute(doc,el,oldAttr);
				_onAddAttribute(doc,el,newAttr);
			}
		}
	}
	function _removeNamedNode(el,list,attr){
		//console.log('remove attr:'+attr)
		var i = _findNodeIndex(list,attr);
		if(i>=0){
			var lastIndex = list.length-1;
			while(i<lastIndex){
				list[i] = list[++i];
			}
			list.length = lastIndex;
			if(el){
				var doc = el.ownerDocument;
				if(doc){
					_onRemoveAttribute(doc,el,attr);
					attr.ownerElement = null;
				}
			}
		}else {
			throw new DOMException(NOT_FOUND_ERR,new Error(el.tagName+'@'+attr))
		}
	}
	NamedNodeMap.prototype = {
		length:0,
		item:NodeList.prototype.item,
		getNamedItem: function(key) {
	//		if(key.indexOf(':')>0 || key == 'xmlns'){
	//			return null;
	//		}
			//console.log()
			var i = this.length;
			while(i--){
				var attr = this[i];
				//console.log(attr.nodeName,key)
				if(attr.nodeName == key){
					return attr;
				}
			}
		},
		setNamedItem: function(attr) {
			var el = attr.ownerElement;
			if(el && el!=this._ownerElement){
				throw new DOMException(INUSE_ATTRIBUTE_ERR);
			}
			var oldAttr = this.getNamedItem(attr.nodeName);
			_addNamedNode(this._ownerElement,this,attr,oldAttr);
			return oldAttr;
		},
		/* returns Node */
		setNamedItemNS: function(attr) {// raises: WRONG_DOCUMENT_ERR,NO_MODIFICATION_ALLOWED_ERR,INUSE_ATTRIBUTE_ERR
			var el = attr.ownerElement, oldAttr;
			if(el && el!=this._ownerElement){
				throw new DOMException(INUSE_ATTRIBUTE_ERR);
			}
			oldAttr = this.getNamedItemNS(attr.namespaceURI,attr.localName);
			_addNamedNode(this._ownerElement,this,attr,oldAttr);
			return oldAttr;
		},

		/* returns Node */
		removeNamedItem: function(key) {
			var attr = this.getNamedItem(key);
			_removeNamedNode(this._ownerElement,this,attr);
			return attr;


		},// raises: NOT_FOUND_ERR,NO_MODIFICATION_ALLOWED_ERR

		//for level2
		removeNamedItemNS:function(namespaceURI,localName){
			var attr = this.getNamedItemNS(namespaceURI,localName);
			_removeNamedNode(this._ownerElement,this,attr);
			return attr;
		},
		getNamedItemNS: function(namespaceURI, localName) {
			var i = this.length;
			while(i--){
				var node = this[i];
				if(node.localName == localName && node.namespaceURI == namespaceURI){
					return node;
				}
			}
			return null;
		}
	};

	/**
	 * The DOMImplementation interface represents an object providing methods
	 * which are not dependent on any particular document.
	 * Such an object is returned by the `Document.implementation` property.
	 *
	 * __The individual methods describe the differences compared to the specs.__
	 *
	 * @constructor
	 *
	 * @see https://developer.mozilla.org/en-US/docs/Web/API/DOMImplementation MDN
	 * @see https://www.w3.org/TR/REC-DOM-Level-1/level-one-core.html#ID-102161490 DOM Level 1 Core (Initial)
	 * @see https://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-102161490 DOM Level 2 Core
	 * @see https://www.w3.org/TR/DOM-Level-3-Core/core.html#ID-102161490 DOM Level 3 Core
	 * @see https://dom.spec.whatwg.org/#domimplementation DOM Living Standard
	 */
	function DOMImplementation() {
	}

	DOMImplementation.prototype = {
		/**
		 * The DOMImplementation.hasFeature() method returns a Boolean flag indicating if a given feature is supported.
		 * The different implementations fairly diverged in what kind of features were reported.
		 * The latest version of the spec settled to force this method to always return true, where the functionality was accurate and in use.
		 *
		 * @deprecated It is deprecated and modern browsers return true in all cases.
		 *
		 * @param {string} feature
		 * @param {string} [version]
		 * @returns {boolean} always true
		 *
		 * @see https://developer.mozilla.org/en-US/docs/Web/API/DOMImplementation/hasFeature MDN
		 * @see https://www.w3.org/TR/REC-DOM-Level-1/level-one-core.html#ID-5CED94D7 DOM Level 1 Core
		 * @see https://dom.spec.whatwg.org/#dom-domimplementation-hasfeature DOM Living Standard
		 */
		hasFeature: function(feature, version) {
				return true;
		},
		/**
		 * Creates an XML Document object of the specified type with its document element.
		 *
		 * __It behaves slightly different from the description in the living standard__:
		 * - There is no interface/class `XMLDocument`, it returns a `Document` instance.
		 * - `contentType`, `encoding`, `mode`, `origin`, `url` fields are currently not declared.
		 * - this implementation is not validating names or qualified names
		 *   (when parsing XML strings, the SAX parser takes care of that)
		 *
		 * @param {string|null} namespaceURI
		 * @param {string} qualifiedName
		 * @param {DocumentType=null} doctype
		 * @returns {Document}
		 *
		 * @see https://developer.mozilla.org/en-US/docs/Web/API/DOMImplementation/createDocument MDN
		 * @see https://www.w3.org/TR/DOM-Level-2-Core/core.html#Level-2-Core-DOM-createDocument DOM Level 2 Core (initial)
		 * @see https://dom.spec.whatwg.org/#dom-domimplementation-createdocument  DOM Level 2 Core
		 *
		 * @see https://dom.spec.whatwg.org/#validate-and-extract DOM: Validate and extract
		 * @see https://www.w3.org/TR/xml/#NT-NameStartChar XML Spec: Names
		 * @see https://www.w3.org/TR/xml-names/#ns-qualnames XML Namespaces: Qualified names
		 */
		createDocument: function(namespaceURI,  qualifiedName, doctype){
			var doc = new Document();
			doc.implementation = this;
			doc.childNodes = new NodeList();
			doc.doctype = doctype || null;
			if (doctype){
				doc.appendChild(doctype);
			}
			if (qualifiedName){
				var root = doc.createElementNS(namespaceURI, qualifiedName);
				doc.appendChild(root);
			}
			return doc;
		},
		/**
		 * Returns a doctype, with the given `qualifiedName`, `publicId`, and `systemId`.
		 *
		 * __This behavior is slightly different from the in the specs__:
		 * - this implementation is not validating names or qualified names
		 *   (when parsing XML strings, the SAX parser takes care of that)
		 *
		 * @param {string} qualifiedName
		 * @param {string} [publicId]
		 * @param {string} [systemId]
		 * @returns {DocumentType} which can either be used with `DOMImplementation.createDocument` upon document creation
		 * 				  or can be put into the document via methods like `Node.insertBefore()` or `Node.replaceChild()`
		 *
		 * @see https://developer.mozilla.org/en-US/docs/Web/API/DOMImplementation/createDocumentType MDN
		 * @see https://www.w3.org/TR/DOM-Level-2-Core/core.html#Level-2-Core-DOM-createDocType DOM Level 2 Core
		 * @see https://dom.spec.whatwg.org/#dom-domimplementation-createdocumenttype DOM Living Standard
		 *
		 * @see https://dom.spec.whatwg.org/#validate-and-extract DOM: Validate and extract
		 * @see https://www.w3.org/TR/xml/#NT-NameStartChar XML Spec: Names
		 * @see https://www.w3.org/TR/xml-names/#ns-qualnames XML Namespaces: Qualified names
		 */
		createDocumentType: function(qualifiedName, publicId, systemId){
			var node = new DocumentType();
			node.name = qualifiedName;
			node.nodeName = qualifiedName;
			node.publicId = publicId || '';
			node.systemId = systemId || '';

			return node;
		}
	};


	/**
	 * @see http://www.w3.org/TR/2000/REC-DOM-Level-2-Core-20001113/core.html#ID-1950641247
	 */

	function Node() {
	}
	Node.prototype = {
		firstChild : null,
		lastChild : null,
		previousSibling : null,
		nextSibling : null,
		attributes : null,
		parentNode : null,
		childNodes : null,
		ownerDocument : null,
		nodeValue : null,
		namespaceURI : null,
		prefix : null,
		localName : null,
		// Modified in DOM Level 2:
		insertBefore:function(newChild, refChild){//raises
			return _insertBefore(this,newChild,refChild);
		},
		replaceChild:function(newChild, oldChild){//raises
			_insertBefore(this, newChild,oldChild, assertPreReplacementValidityInDocument);
			if(oldChild){
				this.removeChild(oldChild);
			}
		},
		removeChild:function(oldChild){
			return _removeChild(this,oldChild);
		},
		appendChild:function(newChild){
			return this.insertBefore(newChild,null);
		},
		hasChildNodes:function(){
			return this.firstChild != null;
		},
		cloneNode:function(deep){
			return cloneNode(this.ownerDocument||this,this,deep);
		},
		// Modified in DOM Level 2:
		normalize:function(){
			var child = this.firstChild;
			while(child){
				var next = child.nextSibling;
				if(next && next.nodeType == TEXT_NODE && child.nodeType == TEXT_NODE){
					this.removeChild(next);
					child.appendData(next.data);
				}else {
					child.normalize();
					child = next;
				}
			}
		},
	  	// Introduced in DOM Level 2:
		isSupported:function(feature, version){
			return this.ownerDocument.implementation.hasFeature(feature,version);
		},
	    // Introduced in DOM Level 2:
	    hasAttributes:function(){
	    	return this.attributes.length>0;
	    },
		/**
		 * Look up the prefix associated to the given namespace URI, starting from this node.
		 * **The default namespace declarations are ignored by this method.**
		 * See Namespace Prefix Lookup for details on the algorithm used by this method.
		 *
		 * _Note: The implementation seems to be incomplete when compared to the algorithm described in the specs._
		 *
		 * @param {string | null} namespaceURI
		 * @returns {string | null}
		 * @see https://www.w3.org/TR/DOM-Level-3-Core/core.html#Node3-lookupNamespacePrefix
		 * @see https://www.w3.org/TR/DOM-Level-3-Core/namespaces-algorithms.html#lookupNamespacePrefixAlgo
		 * @see https://dom.spec.whatwg.org/#dom-node-lookupprefix
		 * @see https://github.com/xmldom/xmldom/issues/322
		 */
	    lookupPrefix:function(namespaceURI){
	    	var el = this;
	    	while(el){
	    		var map = el._nsMap;
	    		//console.dir(map)
	    		if(map){
	    			for(var n in map){
							if (Object.prototype.hasOwnProperty.call(map, n) && map[n] === namespaceURI) {
								return n;
							}
	    			}
	    		}
	    		el = el.nodeType == ATTRIBUTE_NODE?el.ownerDocument : el.parentNode;
	    	}
	    	return null;
	    },
	    // Introduced in DOM Level 3:
	    lookupNamespaceURI:function(prefix){
	    	var el = this;
	    	while(el){
	    		var map = el._nsMap;
	    		//console.dir(map)
	    		if(map){
	    			if(Object.prototype.hasOwnProperty.call(map, prefix)){
	    				return map[prefix] ;
	    			}
	    		}
	    		el = el.nodeType == ATTRIBUTE_NODE?el.ownerDocument : el.parentNode;
	    	}
	    	return null;
	    },
	    // Introduced in DOM Level 3:
	    isDefaultNamespace:function(namespaceURI){
	    	var prefix = this.lookupPrefix(namespaceURI);
	    	return prefix == null;
	    }
	};


	function _xmlEncoder(c){
		return c == '<' && '&lt;' ||
	         c == '>' && '&gt;' ||
	         c == '&' && '&amp;' ||
	         c == '"' && '&quot;' ||
	         '&#'+c.charCodeAt()+';'
	}


	copy(NodeType,Node);
	copy(NodeType,Node.prototype);

	/**
	 * @param callback return true for continue,false for break
	 * @return boolean true: break visit;
	 */
	function _visitNode(node,callback){
		if(callback(node)){
			return true;
		}
		if(node = node.firstChild){
			do{
				if(_visitNode(node,callback)){return true}
	        }while(node=node.nextSibling)
	    }
	}



	function Document(){
		this.ownerDocument = this;
	}

	function _onAddAttribute(doc,el,newAttr){
		doc && doc._inc++;
		var ns = newAttr.namespaceURI ;
		if(ns === NAMESPACE.XMLNS){
			//update namespace
			el._nsMap[newAttr.prefix?newAttr.localName:''] = newAttr.value;
		}
	}

	function _onRemoveAttribute(doc,el,newAttr,remove){
		doc && doc._inc++;
		var ns = newAttr.namespaceURI ;
		if(ns === NAMESPACE.XMLNS){
			//update namespace
			delete el._nsMap[newAttr.prefix?newAttr.localName:''];
		}
	}

	/**
	 * Updates `el.childNodes`, updating the indexed items and it's `length`.
	 * Passing `newChild` means it will be appended.
	 * Otherwise it's assumed that an item has been removed,
	 * and `el.firstNode` and it's `.nextSibling` are used
	 * to walk the current list of child nodes.
	 *
	 * @param {Document} doc
	 * @param {Node} el
	 * @param {Node} [newChild]
	 * @private
	 */
	function _onUpdateChild (doc, el, newChild) {
		if(doc && doc._inc){
			doc._inc++;
			//update childNodes
			var cs = el.childNodes;
			if (newChild) {
				cs[cs.length++] = newChild;
			} else {
				var child = el.firstChild;
				var i = 0;
				while (child) {
					cs[i++] = child;
					child = child.nextSibling;
				}
				cs.length = i;
				delete cs[cs.length];
			}
		}
	}

	/**
	 * Removes the connections between `parentNode` and `child`
	 * and any existing `child.previousSibling` or `child.nextSibling`.
	 *
	 * @see https://github.com/xmldom/xmldom/issues/135
	 * @see https://github.com/xmldom/xmldom/issues/145
	 *
	 * @param {Node} parentNode
	 * @param {Node} child
	 * @returns {Node} the child that was removed.
	 * @private
	 */
	function _removeChild (parentNode, child) {
		var previous = child.previousSibling;
		var next = child.nextSibling;
		if (previous) {
			previous.nextSibling = next;
		} else {
			parentNode.firstChild = next;
		}
		if (next) {
			next.previousSibling = previous;
		} else {
			parentNode.lastChild = previous;
		}
		child.parentNode = null;
		child.previousSibling = null;
		child.nextSibling = null;
		_onUpdateChild(parentNode.ownerDocument, parentNode);
		return child;
	}

	/**
	 * Returns `true` if `node` can be a parent for insertion.
	 * @param {Node} node
	 * @returns {boolean}
	 */
	function hasValidParentNodeType(node) {
		return (
			node &&
			(node.nodeType === Node.DOCUMENT_NODE || node.nodeType === Node.DOCUMENT_FRAGMENT_NODE || node.nodeType === Node.ELEMENT_NODE)
		);
	}

	/**
	 * Returns `true` if `node` can be inserted according to it's `nodeType`.
	 * @param {Node} node
	 * @returns {boolean}
	 */
	function hasInsertableNodeType(node) {
		return (
			node &&
			(isElementNode(node) ||
				isTextNode(node) ||
				isDocTypeNode(node) ||
				node.nodeType === Node.DOCUMENT_FRAGMENT_NODE ||
				node.nodeType === Node.COMMENT_NODE ||
				node.nodeType === Node.PROCESSING_INSTRUCTION_NODE)
		);
	}

	/**
	 * Returns true if `node` is a DOCTYPE node
	 * @param {Node} node
	 * @returns {boolean}
	 */
	function isDocTypeNode(node) {
		return node && node.nodeType === Node.DOCUMENT_TYPE_NODE;
	}

	/**
	 * Returns true if the node is an element
	 * @param {Node} node
	 * @returns {boolean}
	 */
	function isElementNode(node) {
		return node && node.nodeType === Node.ELEMENT_NODE;
	}
	/**
	 * Returns true if `node` is a text node
	 * @param {Node} node
	 * @returns {boolean}
	 */
	function isTextNode(node) {
		return node && node.nodeType === Node.TEXT_NODE;
	}

	/**
	 * Check if en element node can be inserted before `child`, or at the end if child is falsy,
	 * according to the presence and position of a doctype node on the same level.
	 *
	 * @param {Document} doc The document node
	 * @param {Node} child the node that would become the nextSibling if the element would be inserted
	 * @returns {boolean} `true` if an element can be inserted before child
	 * @private
	 * https://dom.spec.whatwg.org/#concept-node-ensure-pre-insertion-validity
	 */
	function isElementInsertionPossible(doc, child) {
		var parentChildNodes = doc.childNodes || [];
		if (find(parentChildNodes, isElementNode) || isDocTypeNode(child)) {
			return false;
		}
		var docTypeNode = find(parentChildNodes, isDocTypeNode);
		return !(child && docTypeNode && parentChildNodes.indexOf(docTypeNode) > parentChildNodes.indexOf(child));
	}

	/**
	 * Check if en element node can be inserted before `child`, or at the end if child is falsy,
	 * according to the presence and position of a doctype node on the same level.
	 *
	 * @param {Node} doc The document node
	 * @param {Node} child the node that would become the nextSibling if the element would be inserted
	 * @returns {boolean} `true` if an element can be inserted before child
	 * @private
	 * https://dom.spec.whatwg.org/#concept-node-ensure-pre-insertion-validity
	 */
	function isElementReplacementPossible(doc, child) {
		var parentChildNodes = doc.childNodes || [];

		function hasElementChildThatIsNotChild(node) {
			return isElementNode(node) && node !== child;
		}

		if (find(parentChildNodes, hasElementChildThatIsNotChild)) {
			return false;
		}
		var docTypeNode = find(parentChildNodes, isDocTypeNode);
		return !(child && docTypeNode && parentChildNodes.indexOf(docTypeNode) > parentChildNodes.indexOf(child));
	}

	/**
	 * @private
	 * Steps 1-5 of the checks before inserting and before replacing a child are the same.
	 *
	 * @param {Node} parent the parent node to insert `node` into
	 * @param {Node} node the node to insert
	 * @param {Node=} child the node that should become the `nextSibling` of `node`
	 * @returns {Node}
	 * @throws DOMException for several node combinations that would create a DOM that is not well-formed.
	 * @throws DOMException if `child` is provided but is not a child of `parent`.
	 * @see https://dom.spec.whatwg.org/#concept-node-ensure-pre-insertion-validity
	 * @see https://dom.spec.whatwg.org/#concept-node-replace
	 */
	function assertPreInsertionValidity1to5(parent, node, child) {
		// 1. If `parent` is not a Document, DocumentFragment, or Element node, then throw a "HierarchyRequestError" DOMException.
		if (!hasValidParentNodeType(parent)) {
			throw new DOMException(HIERARCHY_REQUEST_ERR, 'Unexpected parent node type ' + parent.nodeType);
		}
		// 2. If `node` is a host-including inclusive ancestor of `parent`, then throw a "HierarchyRequestError" DOMException.
		// not implemented!
		// 3. If `child` is non-null and its parent is not `parent`, then throw a "NotFoundError" DOMException.
		if (child && child.parentNode !== parent) {
			throw new DOMException(NOT_FOUND_ERR, 'child not in parent');
		}
		if (
			// 4. If `node` is not a DocumentFragment, DocumentType, Element, or CharacterData node, then throw a "HierarchyRequestError" DOMException.
			!hasInsertableNodeType(node) ||
			// 5. If either `node` is a Text node and `parent` is a document,
			// the sax parser currently adds top level text nodes, this will be fixed in 0.9.0
			// || (node.nodeType === Node.TEXT_NODE && parent.nodeType === Node.DOCUMENT_NODE)
			// or `node` is a doctype and `parent` is not a document, then throw a "HierarchyRequestError" DOMException.
			(isDocTypeNode(node) && parent.nodeType !== Node.DOCUMENT_NODE)
		) {
			throw new DOMException(
				HIERARCHY_REQUEST_ERR,
				'Unexpected node type ' + node.nodeType + ' for parent node type ' + parent.nodeType
			);
		}
	}

	/**
	 * @private
	 * Step 6 of the checks before inserting and before replacing a child are different.
	 *
	 * @param {Document} parent the parent node to insert `node` into
	 * @param {Node} node the node to insert
	 * @param {Node | undefined} child the node that should become the `nextSibling` of `node`
	 * @returns {Node}
	 * @throws DOMException for several node combinations that would create a DOM that is not well-formed.
	 * @throws DOMException if `child` is provided but is not a child of `parent`.
	 * @see https://dom.spec.whatwg.org/#concept-node-ensure-pre-insertion-validity
	 * @see https://dom.spec.whatwg.org/#concept-node-replace
	 */
	function assertPreInsertionValidityInDocument(parent, node, child) {
		var parentChildNodes = parent.childNodes || [];
		var nodeChildNodes = node.childNodes || [];

		// DocumentFragment
		if (node.nodeType === Node.DOCUMENT_FRAGMENT_NODE) {
			var nodeChildElements = nodeChildNodes.filter(isElementNode);
			// If node has more than one element child or has a Text node child.
			if (nodeChildElements.length > 1 || find(nodeChildNodes, isTextNode)) {
				throw new DOMException(HIERARCHY_REQUEST_ERR, 'More than one element or text in fragment');
			}
			// Otherwise, if `node` has one element child and either `parent` has an element child,
			// `child` is a doctype, or `child` is non-null and a doctype is following `child`.
			if (nodeChildElements.length === 1 && !isElementInsertionPossible(parent, child)) {
				throw new DOMException(HIERARCHY_REQUEST_ERR, 'Element in fragment can not be inserted before doctype');
			}
		}
		// Element
		if (isElementNode(node)) {
			// `parent` has an element child, `child` is a doctype,
			// or `child` is non-null and a doctype is following `child`.
			if (!isElementInsertionPossible(parent, child)) {
				throw new DOMException(HIERARCHY_REQUEST_ERR, 'Only one element can be added and only after doctype');
			}
		}
		// DocumentType
		if (isDocTypeNode(node)) {
			// `parent` has a doctype child,
			if (find(parentChildNodes, isDocTypeNode)) {
				throw new DOMException(HIERARCHY_REQUEST_ERR, 'Only one doctype is allowed');
			}
			var parentElementChild = find(parentChildNodes, isElementNode);
			// `child` is non-null and an element is preceding `child`,
			if (child && parentChildNodes.indexOf(parentElementChild) < parentChildNodes.indexOf(child)) {
				throw new DOMException(HIERARCHY_REQUEST_ERR, 'Doctype can only be inserted before an element');
			}
			// or `child` is null and `parent` has an element child.
			if (!child && parentElementChild) {
				throw new DOMException(HIERARCHY_REQUEST_ERR, 'Doctype can not be appended since element is present');
			}
		}
	}

	/**
	 * @private
	 * Step 6 of the checks before inserting and before replacing a child are different.
	 *
	 * @param {Document} parent the parent node to insert `node` into
	 * @param {Node} node the node to insert
	 * @param {Node | undefined} child the node that should become the `nextSibling` of `node`
	 * @returns {Node}
	 * @throws DOMException for several node combinations that would create a DOM that is not well-formed.
	 * @throws DOMException if `child` is provided but is not a child of `parent`.
	 * @see https://dom.spec.whatwg.org/#concept-node-ensure-pre-insertion-validity
	 * @see https://dom.spec.whatwg.org/#concept-node-replace
	 */
	function assertPreReplacementValidityInDocument(parent, node, child) {
		var parentChildNodes = parent.childNodes || [];
		var nodeChildNodes = node.childNodes || [];

		// DocumentFragment
		if (node.nodeType === Node.DOCUMENT_FRAGMENT_NODE) {
			var nodeChildElements = nodeChildNodes.filter(isElementNode);
			// If `node` has more than one element child or has a Text node child.
			if (nodeChildElements.length > 1 || find(nodeChildNodes, isTextNode)) {
				throw new DOMException(HIERARCHY_REQUEST_ERR, 'More than one element or text in fragment');
			}
			// Otherwise, if `node` has one element child and either `parent` has an element child that is not `child` or a doctype is following `child`.
			if (nodeChildElements.length === 1 && !isElementReplacementPossible(parent, child)) {
				throw new DOMException(HIERARCHY_REQUEST_ERR, 'Element in fragment can not be inserted before doctype');
			}
		}
		// Element
		if (isElementNode(node)) {
			// `parent` has an element child that is not `child` or a doctype is following `child`.
			if (!isElementReplacementPossible(parent, child)) {
				throw new DOMException(HIERARCHY_REQUEST_ERR, 'Only one element can be added and only after doctype');
			}
		}
		// DocumentType
		if (isDocTypeNode(node)) {
			function hasDoctypeChildThatIsNotChild(node) {
				return isDocTypeNode(node) && node !== child;
			}

			// `parent` has a doctype child that is not `child`,
			if (find(parentChildNodes, hasDoctypeChildThatIsNotChild)) {
				throw new DOMException(HIERARCHY_REQUEST_ERR, 'Only one doctype is allowed');
			}
			var parentElementChild = find(parentChildNodes, isElementNode);
			// or an element is preceding `child`.
			if (child && parentChildNodes.indexOf(parentElementChild) < parentChildNodes.indexOf(child)) {
				throw new DOMException(HIERARCHY_REQUEST_ERR, 'Doctype can only be inserted before an element');
			}
		}
	}

	/**
	 * @private
	 * @param {Node} parent the parent node to insert `node` into
	 * @param {Node} node the node to insert
	 * @param {Node=} child the node that should become the `nextSibling` of `node`
	 * @returns {Node}
	 * @throws DOMException for several node combinations that would create a DOM that is not well-formed.
	 * @throws DOMException if `child` is provided but is not a child of `parent`.
	 * @see https://dom.spec.whatwg.org/#concept-node-ensure-pre-insertion-validity
	 */
	function _insertBefore(parent, node, child, _inDocumentAssertion) {
		// To ensure pre-insertion validity of a node into a parent before a child, run these steps:
		assertPreInsertionValidity1to5(parent, node, child);

		// If parent is a document, and any of the statements below, switched on the interface node implements,
		// are true, then throw a "HierarchyRequestError" DOMException.
		if (parent.nodeType === Node.DOCUMENT_NODE) {
			(_inDocumentAssertion || assertPreInsertionValidityInDocument)(parent, node, child);
		}

		var cp = node.parentNode;
		if(cp){
			cp.removeChild(node);//remove and update
		}
		if(node.nodeType === DOCUMENT_FRAGMENT_NODE){
			var newFirst = node.firstChild;
			if (newFirst == null) {
				return node;
			}
			var newLast = node.lastChild;
		}else {
			newFirst = newLast = node;
		}
		var pre = child ? child.previousSibling : parent.lastChild;

		newFirst.previousSibling = pre;
		newLast.nextSibling = child;


		if(pre){
			pre.nextSibling = newFirst;
		}else {
			parent.firstChild = newFirst;
		}
		if(child == null){
			parent.lastChild = newLast;
		}else {
			child.previousSibling = newLast;
		}
		do{
			newFirst.parentNode = parent;
		}while(newFirst !== newLast && (newFirst= newFirst.nextSibling))
		_onUpdateChild(parent.ownerDocument||parent, parent);
		//console.log(parent.lastChild.nextSibling == null)
		if (node.nodeType == DOCUMENT_FRAGMENT_NODE) {
			node.firstChild = node.lastChild = null;
		}
		return node;
	}

	/**
	 * Appends `newChild` to `parentNode`.
	 * If `newChild` is already connected to a `parentNode` it is first removed from it.
	 *
	 * @see https://github.com/xmldom/xmldom/issues/135
	 * @see https://github.com/xmldom/xmldom/issues/145
	 * @param {Node} parentNode
	 * @param {Node} newChild
	 * @returns {Node}
	 * @private
	 */
	function _appendSingleChild (parentNode, newChild) {
		if (newChild.parentNode) {
			newChild.parentNode.removeChild(newChild);
		}
		newChild.parentNode = parentNode;
		newChild.previousSibling = parentNode.lastChild;
		newChild.nextSibling = null;
		if (newChild.previousSibling) {
			newChild.previousSibling.nextSibling = newChild;
		} else {
			parentNode.firstChild = newChild;
		}
		parentNode.lastChild = newChild;
		_onUpdateChild(parentNode.ownerDocument, parentNode, newChild);
		return newChild;
	}

	Document.prototype = {
		//implementation : null,
		nodeName :  '#document',
		nodeType :  DOCUMENT_NODE,
		/**
		 * The DocumentType node of the document.
		 *
		 * @readonly
		 * @type DocumentType
		 */
		doctype :  null,
		documentElement :  null,
		_inc : 1,

		insertBefore :  function(newChild, refChild){//raises
			if(newChild.nodeType == DOCUMENT_FRAGMENT_NODE){
				var child = newChild.firstChild;
				while(child){
					var next = child.nextSibling;
					this.insertBefore(child,refChild);
					child = next;
				}
				return newChild;
			}
			_insertBefore(this, newChild, refChild);
			newChild.ownerDocument = this;
			if (this.documentElement === null && newChild.nodeType === ELEMENT_NODE) {
				this.documentElement = newChild;
			}

			return newChild;
		},
		removeChild :  function(oldChild){
			if(this.documentElement == oldChild){
				this.documentElement = null;
			}
			return _removeChild(this,oldChild);
		},
		replaceChild: function (newChild, oldChild) {
			//raises
			_insertBefore(this, newChild, oldChild, assertPreReplacementValidityInDocument);
			newChild.ownerDocument = this;
			if (oldChild) {
				this.removeChild(oldChild);
			}
			if (isElementNode(newChild)) {
				this.documentElement = newChild;
			}
		},
		// Introduced in DOM Level 2:
		importNode : function(importedNode,deep){
			return importNode(this,importedNode,deep);
		},
		// Introduced in DOM Level 2:
		getElementById :	function(id){
			var rtv = null;
			_visitNode(this.documentElement,function(node){
				if(node.nodeType == ELEMENT_NODE){
					if(node.getAttribute('id') == id){
						rtv = node;
						return true;
					}
				}
			});
			return rtv;
		},

		/**
		 * The `getElementsByClassName` method of `Document` interface returns an array-like object
		 * of all child elements which have **all** of the given class name(s).
		 *
		 * Returns an empty list if `classeNames` is an empty string or only contains HTML white space characters.
		 *
		 *
		 * Warning: This is a live LiveNodeList.
		 * Changes in the DOM will reflect in the array as the changes occur.
		 * If an element selected by this array no longer qualifies for the selector,
		 * it will automatically be removed. Be aware of this for iteration purposes.
		 *
		 * @param {string} classNames is a string representing the class name(s) to match; multiple class names are separated by (ASCII-)whitespace
		 *
		 * @see https://developer.mozilla.org/en-US/docs/Web/API/Document/getElementsByClassName
		 * @see https://dom.spec.whatwg.org/#concept-getelementsbyclassname
		 */
		getElementsByClassName: function(classNames) {
			var classNamesSet = toOrderedSet(classNames);
			return new LiveNodeList(this, function(base) {
				var ls = [];
				if (classNamesSet.length > 0) {
					_visitNode(base.documentElement, function(node) {
						if(node !== base && node.nodeType === ELEMENT_NODE) {
							var nodeClassNames = node.getAttribute('class');
							// can be null if the attribute does not exist
							if (nodeClassNames) {
								// before splitting and iterating just compare them for the most common case
								var matches = classNames === nodeClassNames;
								if (!matches) {
									var nodeClassNamesSet = toOrderedSet(nodeClassNames);
									matches = classNamesSet.every(arrayIncludes(nodeClassNamesSet));
								}
								if(matches) {
									ls.push(node);
								}
							}
						}
					});
				}
				return ls;
			});
		},

		//document factory method:
		createElement :	function(tagName){
			var node = new Element();
			node.ownerDocument = this;
			node.nodeName = tagName;
			node.tagName = tagName;
			node.localName = tagName;
			node.childNodes = new NodeList();
			var attrs	= node.attributes = new NamedNodeMap();
			attrs._ownerElement = node;
			return node;
		},
		createDocumentFragment :	function(){
			var node = new DocumentFragment();
			node.ownerDocument = this;
			node.childNodes = new NodeList();
			return node;
		},
		createTextNode :	function(data){
			var node = new Text();
			node.ownerDocument = this;
			node.appendData(data);
			return node;
		},
		createComment :	function(data){
			var node = new Comment();
			node.ownerDocument = this;
			node.appendData(data);
			return node;
		},
		createCDATASection :	function(data){
			var node = new CDATASection();
			node.ownerDocument = this;
			node.appendData(data);
			return node;
		},
		createProcessingInstruction :	function(target,data){
			var node = new ProcessingInstruction();
			node.ownerDocument = this;
			node.tagName = node.target = target;
			node.nodeValue= node.data = data;
			return node;
		},
		createAttribute :	function(name){
			var node = new Attr();
			node.ownerDocument	= this;
			node.name = name;
			node.nodeName	= name;
			node.localName = name;
			node.specified = true;
			return node;
		},
		createEntityReference :	function(name){
			var node = new EntityReference();
			node.ownerDocument	= this;
			node.nodeName	= name;
			return node;
		},
		// Introduced in DOM Level 2:
		createElementNS :	function(namespaceURI,qualifiedName){
			var node = new Element();
			var pl = qualifiedName.split(':');
			var attrs	= node.attributes = new NamedNodeMap();
			node.childNodes = new NodeList();
			node.ownerDocument = this;
			node.nodeName = qualifiedName;
			node.tagName = qualifiedName;
			node.namespaceURI = namespaceURI;
			if(pl.length == 2){
				node.prefix = pl[0];
				node.localName = pl[1];
			}else {
				//el.prefix = null;
				node.localName = qualifiedName;
			}
			attrs._ownerElement = node;
			return node;
		},
		// Introduced in DOM Level 2:
		createAttributeNS :	function(namespaceURI,qualifiedName){
			var node = new Attr();
			var pl = qualifiedName.split(':');
			node.ownerDocument = this;
			node.nodeName = qualifiedName;
			node.name = qualifiedName;
			node.namespaceURI = namespaceURI;
			node.specified = true;
			if(pl.length == 2){
				node.prefix = pl[0];
				node.localName = pl[1];
			}else {
				//el.prefix = null;
				node.localName = qualifiedName;
			}
			return node;
		}
	};
	_extends(Document,Node);


	function Element() {
		this._nsMap = {};
	}	Element.prototype = {
		nodeType : ELEMENT_NODE,
		hasAttribute : function(name){
			return this.getAttributeNode(name)!=null;
		},
		getAttribute : function(name){
			var attr = this.getAttributeNode(name);
			return attr && attr.value || '';
		},
		getAttributeNode : function(name){
			return this.attributes.getNamedItem(name);
		},
		setAttribute : function(name, value){
			var attr = this.ownerDocument.createAttribute(name);
			attr.value = attr.nodeValue = "" + value;
			this.setAttributeNode(attr);
		},
		removeAttribute : function(name){
			var attr = this.getAttributeNode(name);
			attr && this.removeAttributeNode(attr);
		},

		//four real opeartion method
		appendChild:function(newChild){
			if(newChild.nodeType === DOCUMENT_FRAGMENT_NODE){
				return this.insertBefore(newChild,null);
			}else {
				return _appendSingleChild(this,newChild);
			}
		},
		setAttributeNode : function(newAttr){
			return this.attributes.setNamedItem(newAttr);
		},
		setAttributeNodeNS : function(newAttr){
			return this.attributes.setNamedItemNS(newAttr);
		},
		removeAttributeNode : function(oldAttr){
			//console.log(this == oldAttr.ownerElement)
			return this.attributes.removeNamedItem(oldAttr.nodeName);
		},
		//get real attribute name,and remove it by removeAttributeNode
		removeAttributeNS : function(namespaceURI, localName){
			var old = this.getAttributeNodeNS(namespaceURI, localName);
			old && this.removeAttributeNode(old);
		},

		hasAttributeNS : function(namespaceURI, localName){
			return this.getAttributeNodeNS(namespaceURI, localName)!=null;
		},
		getAttributeNS : function(namespaceURI, localName){
			var attr = this.getAttributeNodeNS(namespaceURI, localName);
			return attr && attr.value || '';
		},
		setAttributeNS : function(namespaceURI, qualifiedName, value){
			var attr = this.ownerDocument.createAttributeNS(namespaceURI, qualifiedName);
			attr.value = attr.nodeValue = "" + value;
			this.setAttributeNode(attr);
		},
		getAttributeNodeNS : function(namespaceURI, localName){
			return this.attributes.getNamedItemNS(namespaceURI, localName);
		},

		getElementsByTagName : function(tagName){
			return new LiveNodeList(this,function(base){
				var ls = [];
				_visitNode(base,function(node){
					if(node !== base && node.nodeType == ELEMENT_NODE && (tagName === '*' || node.tagName == tagName)){
						ls.push(node);
					}
				});
				return ls;
			});
		},
		getElementsByTagNameNS : function(namespaceURI, localName){
			return new LiveNodeList(this,function(base){
				var ls = [];
				_visitNode(base,function(node){
					if(node !== base && node.nodeType === ELEMENT_NODE && (namespaceURI === '*' || node.namespaceURI === namespaceURI) && (localName === '*' || node.localName == localName)){
						ls.push(node);
					}
				});
				return ls;

			});
		}
	};
	Document.prototype.getElementsByTagName = Element.prototype.getElementsByTagName;
	Document.prototype.getElementsByTagNameNS = Element.prototype.getElementsByTagNameNS;


	_extends(Element,Node);
	function Attr() {
	}	Attr.prototype.nodeType = ATTRIBUTE_NODE;
	_extends(Attr,Node);


	function CharacterData() {
	}	CharacterData.prototype = {
		data : '',
		substringData : function(offset, count) {
			return this.data.substring(offset, offset+count);
		},
		appendData: function(text) {
			text = this.data+text;
			this.nodeValue = this.data = text;
			this.length = text.length;
		},
		insertData: function(offset,text) {
			this.replaceData(offset,0,text);

		},
		appendChild:function(newChild){
			throw new Error(ExceptionMessage[HIERARCHY_REQUEST_ERR])
		},
		deleteData: function(offset, count) {
			this.replaceData(offset,count,"");
		},
		replaceData: function(offset, count, text) {
			var start = this.data.substring(0,offset);
			var end = this.data.substring(offset+count);
			text = start + text + end;
			this.nodeValue = this.data = text;
			this.length = text.length;
		}
	};
	_extends(CharacterData,Node);
	function Text() {
	}	Text.prototype = {
		nodeName : "#text",
		nodeType : TEXT_NODE,
		splitText : function(offset) {
			var text = this.data;
			var newText = text.substring(offset);
			text = text.substring(0, offset);
			this.data = this.nodeValue = text;
			this.length = text.length;
			var newNode = this.ownerDocument.createTextNode(newText);
			if(this.parentNode){
				this.parentNode.insertBefore(newNode, this.nextSibling);
			}
			return newNode;
		}
	};
	_extends(Text,CharacterData);
	function Comment() {
	}	Comment.prototype = {
		nodeName : "#comment",
		nodeType : COMMENT_NODE
	};
	_extends(Comment,CharacterData);

	function CDATASection() {
	}	CDATASection.prototype = {
		nodeName : "#cdata-section",
		nodeType : CDATA_SECTION_NODE
	};
	_extends(CDATASection,CharacterData);


	function DocumentType() {
	}	DocumentType.prototype.nodeType = DOCUMENT_TYPE_NODE;
	_extends(DocumentType,Node);

	function Notation() {
	}	Notation.prototype.nodeType = NOTATION_NODE;
	_extends(Notation,Node);

	function Entity() {
	}	Entity.prototype.nodeType = ENTITY_NODE;
	_extends(Entity,Node);

	function EntityReference() {
	}	EntityReference.prototype.nodeType = ENTITY_REFERENCE_NODE;
	_extends(EntityReference,Node);

	function DocumentFragment() {
	}	DocumentFragment.prototype.nodeName =	"#document-fragment";
	DocumentFragment.prototype.nodeType =	DOCUMENT_FRAGMENT_NODE;
	_extends(DocumentFragment,Node);


	function ProcessingInstruction() {
	}
	ProcessingInstruction.prototype.nodeType = PROCESSING_INSTRUCTION_NODE;
	_extends(ProcessingInstruction,Node);
	function XMLSerializer(){}
	XMLSerializer.prototype.serializeToString = function(node,isHtml,nodeFilter){
		return nodeSerializeToString.call(node,isHtml,nodeFilter);
	};
	Node.prototype.toString = nodeSerializeToString;
	function nodeSerializeToString(isHtml,nodeFilter){
		var buf = [];
		var refNode = this.nodeType == 9 && this.documentElement || this;
		var prefix = refNode.prefix;
		var uri = refNode.namespaceURI;

		if(uri && prefix == null){
			//console.log(prefix)
			var prefix = refNode.lookupPrefix(uri);
			if(prefix == null){
				//isHTML = true;
				var visibleNamespaces=[
				{namespace:uri,prefix:null}
				//{namespace:uri,prefix:''}
				];
			}
		}
		serializeToString(this,buf,isHtml,nodeFilter,visibleNamespaces);
		//console.log('###',this.nodeType,uri,prefix,buf.join(''))
		return buf.join('');
	}

	function needNamespaceDefine(node, isHTML, visibleNamespaces) {
		var prefix = node.prefix || '';
		var uri = node.namespaceURI;
		// According to [Namespaces in XML 1.0](https://www.w3.org/TR/REC-xml-names/#ns-using) ,
		// and more specifically https://www.w3.org/TR/REC-xml-names/#nsc-NoPrefixUndecl :
		// > In a namespace declaration for a prefix [...], the attribute value MUST NOT be empty.
		// in a similar manner [Namespaces in XML 1.1](https://www.w3.org/TR/xml-names11/#ns-using)
		// and more specifically https://www.w3.org/TR/xml-names11/#nsc-NSDeclared :
		// > [...] Furthermore, the attribute value [...] must not be an empty string.
		// so serializing empty namespace value like xmlns:ds="" would produce an invalid XML document.
		if (!uri) {
			return false;
		}
		if (prefix === "xml" && uri === NAMESPACE.XML || uri === NAMESPACE.XMLNS) {
			return false;
		}

		var i = visibleNamespaces.length;
		while (i--) {
			var ns = visibleNamespaces[i];
			// get namespace prefix
			if (ns.prefix === prefix) {
				return ns.namespace !== uri;
			}
		}
		return true;
	}
	/**
	 * Well-formed constraint: No < in Attribute Values
	 * > The replacement text of any entity referred to directly or indirectly
	 * > in an attribute value must not contain a <.
	 * @see https://www.w3.org/TR/xml11/#CleanAttrVals
	 * @see https://www.w3.org/TR/xml11/#NT-AttValue
	 *
	 * Literal whitespace other than space that appear in attribute values
	 * are serialized as their entity references, so they will be preserved.
	 * (In contrast to whitespace literals in the input which are normalized to spaces)
	 * @see https://www.w3.org/TR/xml11/#AVNormalize
	 * @see https://w3c.github.io/DOM-Parsing/#serializing-an-element-s-attributes
	 */
	function addSerializedAttribute(buf, qualifiedName, value) {
		buf.push(' ', qualifiedName, '="', value.replace(/[<>&"\t\n\r]/g, _xmlEncoder), '"');
	}

	function serializeToString(node,buf,isHTML,nodeFilter,visibleNamespaces){
		if (!visibleNamespaces) {
			visibleNamespaces = [];
		}

		if(nodeFilter){
			node = nodeFilter(node);
			if(node){
				if(typeof node == 'string'){
					buf.push(node);
					return;
				}
			}else {
				return;
			}
			//buf.sort.apply(attrs, attributeSorter);
		}

		switch(node.nodeType){
		case ELEMENT_NODE:
			var attrs = node.attributes;
			var len = attrs.length;
			var child = node.firstChild;
			var nodeName = node.tagName;

			isHTML = NAMESPACE.isHTML(node.namespaceURI) || isHTML;

			var prefixedNodeName = nodeName;
			if (!isHTML && !node.prefix && node.namespaceURI) {
				var defaultNS;
				// lookup current default ns from `xmlns` attribute
				for (var ai = 0; ai < attrs.length; ai++) {
					if (attrs.item(ai).name === 'xmlns') {
						defaultNS = attrs.item(ai).value;
						break
					}
				}
				if (!defaultNS) {
					// lookup current default ns in visibleNamespaces
					for (var nsi = visibleNamespaces.length - 1; nsi >= 0; nsi--) {
						var namespace = visibleNamespaces[nsi];
						if (namespace.prefix === '' && namespace.namespace === node.namespaceURI) {
							defaultNS = namespace.namespace;
							break
						}
					}
				}
				if (defaultNS !== node.namespaceURI) {
					for (var nsi = visibleNamespaces.length - 1; nsi >= 0; nsi--) {
						var namespace = visibleNamespaces[nsi];
						if (namespace.namespace === node.namespaceURI) {
							if (namespace.prefix) {
								prefixedNodeName = namespace.prefix + ':' + nodeName;
							}
							break
						}
					}
				}
			}

			buf.push('<', prefixedNodeName);

			for(var i=0;i<len;i++){
				// add namespaces for attributes
				var attr = attrs.item(i);
				if (attr.prefix == 'xmlns') {
					visibleNamespaces.push({ prefix: attr.localName, namespace: attr.value });
				}else if(attr.nodeName == 'xmlns'){
					visibleNamespaces.push({ prefix: '', namespace: attr.value });
				}
			}

			for(var i=0;i<len;i++){
				var attr = attrs.item(i);
				if (needNamespaceDefine(attr,isHTML, visibleNamespaces)) {
					var prefix = attr.prefix||'';
					var uri = attr.namespaceURI;
					addSerializedAttribute(buf, prefix ? 'xmlns:' + prefix : "xmlns", uri);
					visibleNamespaces.push({ prefix: prefix, namespace:uri });
				}
				serializeToString(attr,buf,isHTML,nodeFilter,visibleNamespaces);
			}

			// add namespace for current node
			if (nodeName === prefixedNodeName && needNamespaceDefine(node, isHTML, visibleNamespaces)) {
				var prefix = node.prefix||'';
				var uri = node.namespaceURI;
				addSerializedAttribute(buf, prefix ? 'xmlns:' + prefix : "xmlns", uri);
				visibleNamespaces.push({ prefix: prefix, namespace:uri });
			}

			if(child || isHTML && !/^(?:meta|link|img|br|hr|input)$/i.test(nodeName)){
				buf.push('>');
				//if is cdata child node
				if(isHTML && /^script$/i.test(nodeName)){
					while(child){
						if(child.data){
							buf.push(child.data);
						}else {
							serializeToString(child, buf, isHTML, nodeFilter, visibleNamespaces.slice());
						}
						child = child.nextSibling;
					}
				}else
				{
					while(child){
						serializeToString(child, buf, isHTML, nodeFilter, visibleNamespaces.slice());
						child = child.nextSibling;
					}
				}
				buf.push('</',prefixedNodeName,'>');
			}else {
				buf.push('/>');
			}
			// remove added visible namespaces
			//visibleNamespaces.length = startVisibleNamespaces;
			return;
		case DOCUMENT_NODE:
		case DOCUMENT_FRAGMENT_NODE:
			var child = node.firstChild;
			while(child){
				serializeToString(child, buf, isHTML, nodeFilter, visibleNamespaces.slice());
				child = child.nextSibling;
			}
			return;
		case ATTRIBUTE_NODE:
			return addSerializedAttribute(buf, node.name, node.value);
		case TEXT_NODE:
			/**
			 * The ampersand character (&) and the left angle bracket (<) must not appear in their literal form,
			 * except when used as markup delimiters, or within a comment, a processing instruction, or a CDATA section.
			 * If they are needed elsewhere, they must be escaped using either numeric character references or the strings
			 * `&amp;` and `&lt;` respectively.
			 * The right angle bracket (>) may be represented using the string " &gt; ", and must, for compatibility,
			 * be escaped using either `&gt;` or a character reference when it appears in the string `]]>` in content,
			 * when that string is not marking the end of a CDATA section.
			 *
			 * In the content of elements, character data is any string of characters
			 * which does not contain the start-delimiter of any markup
			 * and does not include the CDATA-section-close delimiter, `]]>`.
			 *
			 * @see https://www.w3.org/TR/xml/#NT-CharData
			 * @see https://w3c.github.io/DOM-Parsing/#xml-serializing-a-text-node
			 */
			return buf.push(node.data
				.replace(/[<&>]/g,_xmlEncoder)
			);
		case CDATA_SECTION_NODE:
			return buf.push( '<![CDATA[',node.data,']]>');
		case COMMENT_NODE:
			return buf.push( "<!--",node.data,"-->");
		case DOCUMENT_TYPE_NODE:
			var pubid = node.publicId;
			var sysid = node.systemId;
			buf.push('<!DOCTYPE ',node.name);
			if(pubid){
				buf.push(' PUBLIC ', pubid);
				if (sysid && sysid!='.') {
					buf.push(' ', sysid);
				}
				buf.push('>');
			}else if(sysid && sysid!='.'){
				buf.push(' SYSTEM ', sysid, '>');
			}else {
				var sub = node.internalSubset;
				if(sub){
					buf.push(" [",sub,"]");
				}
				buf.push(">");
			}
			return;
		case PROCESSING_INSTRUCTION_NODE:
			return buf.push( "<?",node.target," ",node.data,"?>");
		case ENTITY_REFERENCE_NODE:
			return buf.push( '&',node.nodeName,';');
		//case ENTITY_NODE:
		//case NOTATION_NODE:
		default:
			buf.push('??',node.nodeName);
		}
	}
	function importNode(doc,node,deep){
		var node2;
		switch (node.nodeType) {
		case ELEMENT_NODE:
			node2 = node.cloneNode(false);
			node2.ownerDocument = doc;
			//var attrs = node2.attributes;
			//var len = attrs.length;
			//for(var i=0;i<len;i++){
				//node2.setAttributeNodeNS(importNode(doc,attrs.item(i),deep));
			//}
		case DOCUMENT_FRAGMENT_NODE:
			break;
		case ATTRIBUTE_NODE:
			deep = true;
			break;
		//case ENTITY_REFERENCE_NODE:
		//case PROCESSING_INSTRUCTION_NODE:
		////case TEXT_NODE:
		//case CDATA_SECTION_NODE:
		//case COMMENT_NODE:
		//	deep = false;
		//	break;
		//case DOCUMENT_NODE:
		//case DOCUMENT_TYPE_NODE:
		//cannot be imported.
		//case ENTITY_NODE:
		//case NOTATION_NODE：
		//can not hit in level3
		//default:throw e;
		}
		if(!node2){
			node2 = node.cloneNode(false);//false
		}
		node2.ownerDocument = doc;
		node2.parentNode = null;
		if(deep){
			var child = node.firstChild;
			while(child){
				node2.appendChild(importNode(doc,child,deep));
				child = child.nextSibling;
			}
		}
		return node2;
	}
	//
	//var _relationMap = {firstChild:1,lastChild:1,previousSibling:1,nextSibling:1,
	//					attributes:1,childNodes:1,parentNode:1,documentElement:1,doctype,};
	function cloneNode(doc,node,deep){
		var node2 = new node.constructor();
		for (var n in node) {
			if (Object.prototype.hasOwnProperty.call(node, n)) {
				var v = node[n];
				if (typeof v != "object") {
					if (v != node2[n]) {
						node2[n] = v;
					}
				}
			}
		}
		if(node.childNodes){
			node2.childNodes = new NodeList();
		}
		node2.ownerDocument = doc;
		switch (node2.nodeType) {
		case ELEMENT_NODE:
			var attrs	= node.attributes;
			var attrs2	= node2.attributes = new NamedNodeMap();
			var len = attrs.length;
			attrs2._ownerElement = node2;
			for(var i=0;i<len;i++){
				node2.setAttributeNode(cloneNode(doc,attrs.item(i),true));
			}
			break;		case ATTRIBUTE_NODE:
			deep = true;
		}
		if(deep){
			var child = node.firstChild;
			while(child){
				node2.appendChild(cloneNode(doc,child,deep));
				child = child.nextSibling;
			}
		}
		return node2;
	}

	function __set__(object,key,value){
		object[key] = value;
	}
	//do dynamic
	try{
		if(Object.defineProperty){
			Object.defineProperty(LiveNodeList.prototype,'length',{
				get:function(){
					_updateLiveList(this);
					return this.$$length;
				}
			});

			Object.defineProperty(Node.prototype,'textContent',{
				get:function(){
					return getTextContent(this);
				},

				set:function(data){
					switch(this.nodeType){
					case ELEMENT_NODE:
					case DOCUMENT_FRAGMENT_NODE:
						while(this.firstChild){
							this.removeChild(this.firstChild);
						}
						if(data || String(data)){
							this.appendChild(this.ownerDocument.createTextNode(data));
						}
						break;

					default:
						this.data = data;
						this.value = data;
						this.nodeValue = data;
					}
				}
			});

			function getTextContent(node){
				switch(node.nodeType){
				case ELEMENT_NODE:
				case DOCUMENT_FRAGMENT_NODE:
					var buf = [];
					node = node.firstChild;
					while(node){
						if(node.nodeType!==7 && node.nodeType !==8){
							buf.push(getTextContent(node));
						}
						node = node.nextSibling;
					}
					return buf.join('');
				default:
					return node.nodeValue;
				}
			}

			__set__ = function(object,key,value){
				//console.log(value)
				object['$$'+key] = value;
			};
		}
	}catch(e){//ie8
	}

	//if(typeof require == 'function'){
		exports.DocumentType = DocumentType;
		exports.DOMException = DOMException;
		exports.DOMImplementation = DOMImplementation;
		exports.Element = Element;
		exports.Node = Node;
		exports.NodeList = NodeList;
		exports.XMLSerializer = XMLSerializer;
	//}


	/***/ }),

	/***/ "./node_modules/@xmldom/xmldom/lib/entities.js":
	/*!*****************************************************!*\
	  !*** ./node_modules/@xmldom/xmldom/lib/entities.js ***!
	  \*****************************************************/
	/*! no static exports found */
	/***/ (function(module, exports, __webpack_require__) {

	var freeze = __webpack_require__(/*! ./conventions */ "./node_modules/@xmldom/xmldom/lib/conventions.js").freeze;

	/**
	 * The entities that are predefined in every XML document.
	 *
	 * @see https://www.w3.org/TR/2006/REC-xml11-20060816/#sec-predefined-ent W3C XML 1.1
	 * @see https://www.w3.org/TR/2008/REC-xml-20081126/#sec-predefined-ent W3C XML 1.0
	 * @see https://en.wikipedia.org/wiki/List_of_XML_and_HTML_character_entity_references#Predefined_entities_in_XML Wikipedia
	 */
	exports.XML_ENTITIES = freeze({amp:'&', apos:"'", gt:'>', lt:'<', quot:'"'});

	/**
	 * A map of currently 241 entities that are detected in an HTML document.
	 * They contain all entries from `XML_ENTITIES`.
	 *
	 * @see XML_ENTITIES
	 * @see DOMParser.parseFromString
	 * @see DOMImplementation.prototype.createHTMLDocument
	 * @see https://html.spec.whatwg.org/#named-character-references WHATWG HTML(5) Spec
	 * @see https://www.w3.org/TR/xml-entity-names/ W3C XML Entity Names
	 * @see https://www.w3.org/TR/html4/sgml/entities.html W3C HTML4/SGML
	 * @see https://en.wikipedia.org/wiki/List_of_XML_and_HTML_character_entity_references#Character_entity_references_in_HTML Wikipedia (HTML)
	 * @see https://en.wikipedia.org/wiki/List_of_XML_and_HTML_character_entity_references#Entities_representing_special_characters_in_XHTML Wikpedia (XHTML)
	 */
	exports.HTML_ENTITIES = freeze({
	       lt: '<',
	       gt: '>',
	       amp: '&',
	       quot: '"',
	       apos: "'",
	       Agrave: "À",
	       Aacute: "Á",
	       Acirc: "Â",
	       Atilde: "Ã",
	       Auml: "Ä",
	       Aring: "Å",
	       AElig: "Æ",
	       Ccedil: "Ç",
	       Egrave: "È",
	       Eacute: "É",
	       Ecirc: "Ê",
	       Euml: "Ë",
	       Igrave: "Ì",
	       Iacute: "Í",
	       Icirc: "Î",
	       Iuml: "Ï",
	       ETH: "Ð",
	       Ntilde: "Ñ",
	       Ograve: "Ò",
	       Oacute: "Ó",
	       Ocirc: "Ô",
	       Otilde: "Õ",
	       Ouml: "Ö",
	       Oslash: "Ø",
	       Ugrave: "Ù",
	       Uacute: "Ú",
	       Ucirc: "Û",
	       Uuml: "Ü",
	       Yacute: "Ý",
	       THORN: "Þ",
	       szlig: "ß",
	       agrave: "à",
	       aacute: "á",
	       acirc: "â",
	       atilde: "ã",
	       auml: "ä",
	       aring: "å",
	       aelig: "æ",
	       ccedil: "ç",
	       egrave: "è",
	       eacute: "é",
	       ecirc: "ê",
	       euml: "ë",
	       igrave: "ì",
	       iacute: "í",
	       icirc: "î",
	       iuml: "ï",
	       eth: "ð",
	       ntilde: "ñ",
	       ograve: "ò",
	       oacute: "ó",
	       ocirc: "ô",
	       otilde: "õ",
	       ouml: "ö",
	       oslash: "ø",
	       ugrave: "ù",
	       uacute: "ú",
	       ucirc: "û",
	       uuml: "ü",
	       yacute: "ý",
	       thorn: "þ",
	       yuml: "ÿ",
	       nbsp: "\u00a0",
	       iexcl: "¡",
	       cent: "¢",
	       pound: "£",
	       curren: "¤",
	       yen: "¥",
	       brvbar: "¦",
	       sect: "§",
	       uml: "¨",
	       copy: "©",
	       ordf: "ª",
	       laquo: "«",
	       not: "¬",
	       shy: "­­",
	       reg: "®",
	       macr: "¯",
	       deg: "°",
	       plusmn: "±",
	       sup2: "²",
	       sup3: "³",
	       acute: "´",
	       micro: "µ",
	       para: "¶",
	       middot: "·",
	       cedil: "¸",
	       sup1: "¹",
	       ordm: "º",
	       raquo: "»",
	       frac14: "¼",
	       frac12: "½",
	       frac34: "¾",
	       iquest: "¿",
	       times: "×",
	       divide: "÷",
	       forall: "∀",
	       part: "∂",
	       exist: "∃",
	       empty: "∅",
	       nabla: "∇",
	       isin: "∈",
	       notin: "∉",
	       ni: "∋",
	       prod: "∏",
	       sum: "∑",
	       minus: "−",
	       lowast: "∗",
	       radic: "√",
	       prop: "∝",
	       infin: "∞",
	       ang: "∠",
	       and: "∧",
	       or: "∨",
	       cap: "∩",
	       cup: "∪",
	       'int': "∫",
	       there4: "∴",
	       sim: "∼",
	       cong: "≅",
	       asymp: "≈",
	       ne: "≠",
	       equiv: "≡",
	       le: "≤",
	       ge: "≥",
	       sub: "⊂",
	       sup: "⊃",
	       nsub: "⊄",
	       sube: "⊆",
	       supe: "⊇",
	       oplus: "⊕",
	       otimes: "⊗",
	       perp: "⊥",
	       sdot: "⋅",
	       Alpha: "Α",
	       Beta: "Β",
	       Gamma: "Γ",
	       Delta: "Δ",
	       Epsilon: "Ε",
	       Zeta: "Ζ",
	       Eta: "Η",
	       Theta: "Θ",
	       Iota: "Ι",
	       Kappa: "Κ",
	       Lambda: "Λ",
	       Mu: "Μ",
	       Nu: "Ν",
	       Xi: "Ξ",
	       Omicron: "Ο",
	       Pi: "Π",
	       Rho: "Ρ",
	       Sigma: "Σ",
	       Tau: "Τ",
	       Upsilon: "Υ",
	       Phi: "Φ",
	       Chi: "Χ",
	       Psi: "Ψ",
	       Omega: "Ω",
	       alpha: "α",
	       beta: "β",
	       gamma: "γ",
	       delta: "δ",
	       epsilon: "ε",
	       zeta: "ζ",
	       eta: "η",
	       theta: "θ",
	       iota: "ι",
	       kappa: "κ",
	       lambda: "λ",
	       mu: "μ",
	       nu: "ν",
	       xi: "ξ",
	       omicron: "ο",
	       pi: "π",
	       rho: "ρ",
	       sigmaf: "ς",
	       sigma: "σ",
	       tau: "τ",
	       upsilon: "υ",
	       phi: "φ",
	       chi: "χ",
	       psi: "ψ",
	       omega: "ω",
	       thetasym: "ϑ",
	       upsih: "ϒ",
	       piv: "ϖ",
	       OElig: "Œ",
	       oelig: "œ",
	       Scaron: "Š",
	       scaron: "š",
	       Yuml: "Ÿ",
	       fnof: "ƒ",
	       circ: "ˆ",
	       tilde: "˜",
	       ensp: " ",
	       emsp: " ",
	       thinsp: " ",
	       zwnj: "‌",
	       zwj: "‍",
	       lrm: "‎",
	       rlm: "‏",
	       ndash: "–",
	       mdash: "—",
	       lsquo: "‘",
	       rsquo: "’",
	       sbquo: "‚",
	       ldquo: "“",
	       rdquo: "”",
	       bdquo: "„",
	       dagger: "†",
	       Dagger: "‡",
	       bull: "•",
	       hellip: "…",
	       permil: "‰",
	       prime: "′",
	       Prime: "″",
	       lsaquo: "‹",
	       rsaquo: "›",
	       oline: "‾",
	       euro: "€",
	       trade: "™",
	       larr: "←",
	       uarr: "↑",
	       rarr: "→",
	       darr: "↓",
	       harr: "↔",
	       crarr: "↵",
	       lceil: "⌈",
	       rceil: "⌉",
	       lfloor: "⌊",
	       rfloor: "⌋",
	       loz: "◊",
	       spades: "♠",
	       clubs: "♣",
	       hearts: "♥",
	       diams: "♦"
	});

	/**
	 * @deprecated use `HTML_ENTITIES` instead
	 * @see HTML_ENTITIES
	 */
	exports.entityMap = exports.HTML_ENTITIES;


	/***/ }),

	/***/ "./node_modules/@xmldom/xmldom/lib/index.js":
	/*!**************************************************!*\
	  !*** ./node_modules/@xmldom/xmldom/lib/index.js ***!
	  \**************************************************/
	/*! no static exports found */
	/***/ (function(module, exports, __webpack_require__) {

	var dom = __webpack_require__(/*! ./dom */ "./node_modules/@xmldom/xmldom/lib/dom.js");
	exports.DOMImplementation = dom.DOMImplementation;
	exports.XMLSerializer = dom.XMLSerializer;
	exports.DOMParser = __webpack_require__(/*! ./dom-parser */ "./node_modules/@xmldom/xmldom/lib/dom-parser.js").DOMParser;


	/***/ }),

	/***/ "./node_modules/@xmldom/xmldom/lib/sax.js":
	/*!************************************************!*\
	  !*** ./node_modules/@xmldom/xmldom/lib/sax.js ***!
	  \************************************************/
	/*! no static exports found */
	/***/ (function(module, exports, __webpack_require__) {

	var NAMESPACE = __webpack_require__(/*! ./conventions */ "./node_modules/@xmldom/xmldom/lib/conventions.js").NAMESPACE;

	//[4]   	NameStartChar	   ::=   	":" | [A-Z] | "_" | [a-z] | [#xC0-#xD6] | [#xD8-#xF6] | [#xF8-#x2FF] | [#x370-#x37D] | [#x37F-#x1FFF] | [#x200C-#x200D] | [#x2070-#x218F] | [#x2C00-#x2FEF] | [#x3001-#xD7FF] | [#xF900-#xFDCF] | [#xFDF0-#xFFFD] | [#x10000-#xEFFFF]
	//[4a]   	NameChar	   ::=   	NameStartChar | "-" | "." | [0-9] | #xB7 | [#x0300-#x036F] | [#x203F-#x2040]
	//[5]   	Name	   ::=   	NameStartChar (NameChar)*
	var nameStartChar = /[A-Z_a-z\xC0-\xD6\xD8-\xF6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]/;//\u10000-\uEFFFF
	var nameChar = new RegExp("[\\-\\.0-9"+nameStartChar.source.slice(1,-1)+"\\u00B7\\u0300-\\u036F\\u203F-\\u2040]");
	var tagNamePattern = new RegExp('^'+nameStartChar.source+nameChar.source+'*(?:\:'+nameStartChar.source+nameChar.source+'*)?$');
	//var tagNamePattern = /^[a-zA-Z_][\w\-\.]*(?:\:[a-zA-Z_][\w\-\.]*)?$/
	//var handlers = 'resolveEntity,getExternalSubset,characters,endDocument,endElement,endPrefixMapping,ignorableWhitespace,processingInstruction,setDocumentLocator,skippedEntity,startDocument,startElement,startPrefixMapping,notationDecl,unparsedEntityDecl,error,fatalError,warning,attributeDecl,elementDecl,externalEntityDecl,internalEntityDecl,comment,endCDATA,endDTD,endEntity,startCDATA,startDTD,startEntity'.split(',')

	//S_TAG,	S_ATTR,	S_EQ,	S_ATTR_NOQUOT_VALUE
	//S_ATTR_SPACE,	S_ATTR_END,	S_TAG_SPACE, S_TAG_CLOSE
	var S_TAG = 0;//tag name offerring
	var S_ATTR = 1;//attr name offerring
	var S_ATTR_SPACE=2;//attr name end and space offer
	var S_EQ = 3;//=space?
	var S_ATTR_NOQUOT_VALUE = 4;//attr value(no quot value only)
	var S_ATTR_END = 5;//attr value end and no space(quot end)
	var S_TAG_SPACE = 6;//(attr value end || tag end ) && (space offer)
	var S_TAG_CLOSE = 7;//closed el<el />

	/**
	 * Creates an error that will not be caught by XMLReader aka the SAX parser.
	 *
	 * @param {string} message
	 * @param {any?} locator Optional, can provide details about the location in the source
	 * @constructor
	 */
	function ParseError(message, locator) {
		this.message = message;
		this.locator = locator;
		if(Error.captureStackTrace) Error.captureStackTrace(this, ParseError);
	}
	ParseError.prototype = new Error();
	ParseError.prototype.name = ParseError.name;

	function XMLReader(){

	}

	XMLReader.prototype = {
		parse:function(source,defaultNSMap,entityMap){
			var domBuilder = this.domBuilder;
			domBuilder.startDocument();
			_copy(defaultNSMap ,defaultNSMap = {});
			parse(source,defaultNSMap,entityMap,
					domBuilder,this.errorHandler);
			domBuilder.endDocument();
		}
	};
	function parse(source,defaultNSMapCopy,entityMap,domBuilder,errorHandler){
		function fixedFromCharCode(code) {
			// String.prototype.fromCharCode does not supports
			// > 2 bytes unicode chars directly
			if (code > 0xffff) {
				code -= 0x10000;
				var surrogate1 = 0xd800 + (code >> 10)
					, surrogate2 = 0xdc00 + (code & 0x3ff);

				return String.fromCharCode(surrogate1, surrogate2);
			} else {
				return String.fromCharCode(code);
			}
		}
		function entityReplacer(a){
			var k = a.slice(1,-1);
			if (Object.hasOwnProperty.call(entityMap, k)) {
				return entityMap[k];
			}else if(k.charAt(0) === '#'){
				return fixedFromCharCode(parseInt(k.substr(1).replace('x','0x')))
			}else {
				errorHandler.error('entity not found:'+a);
				return a;
			}
		}
		function appendText(end){//has some bugs
			if(end>start){
				var xt = source.substring(start,end).replace(/&#?\w+;/g,entityReplacer);
				locator&&position(start);
				domBuilder.characters(xt,0,end-start);
				start = end;
			}
		}
		function position(p,m){
			while(p>=lineEnd && (m = linePattern.exec(source))){
				lineStart = m.index;
				lineEnd = lineStart + m[0].length;
				locator.lineNumber++;
				//console.log('line++:',locator,startPos,endPos)
			}
			locator.columnNumber = p-lineStart+1;
		}
		var lineStart = 0;
		var lineEnd = 0;
		var linePattern = /.*(?:\r\n?|\n)|.*$/g;
		var locator = domBuilder.locator;

		var parseStack = [{currentNSMap:defaultNSMapCopy}];
		var closeMap = {};
		var start = 0;
		while(true){
			try{
				var tagStart = source.indexOf('<',start);
				if(tagStart<0){
					if(!source.substr(start).match(/^\s*$/)){
						var doc = domBuilder.doc;
		    			var text = doc.createTextNode(source.substr(start));
		    			doc.appendChild(text);
		    			domBuilder.currentElement = text;
					}
					return;
				}
				if(tagStart>start){
					appendText(tagStart);
				}
				switch(source.charAt(tagStart+1)){
				case '/':
					var end = source.indexOf('>',tagStart+3);
					var tagName = source.substring(tagStart + 2, end).replace(/[ \t\n\r]+$/g, '');
					var config = parseStack.pop();
					if(end<0){

		        		tagName = source.substring(tagStart+2).replace(/[\s<].*/,'');
		        		errorHandler.error("end tag name: "+tagName+' is not complete:'+config.tagName);
		        		end = tagStart+1+tagName.length;
		        	}else if(tagName.match(/\s</)){
		        		tagName = tagName.replace(/[\s<].*/,'');
		        		errorHandler.error("end tag name: "+tagName+' maybe not complete');
		        		end = tagStart+1+tagName.length;
					}
					var localNSMap = config.localNSMap;
					var endMatch = config.tagName == tagName;
					var endIgnoreCaseMach = endMatch || config.tagName&&config.tagName.toLowerCase() == tagName.toLowerCase();
			        if(endIgnoreCaseMach){
			        	domBuilder.endElement(config.uri,config.localName,tagName);
						if(localNSMap){
							for (var prefix in localNSMap) {
								if (Object.prototype.hasOwnProperty.call(localNSMap, prefix)) {
									domBuilder.endPrefixMapping(prefix);
								}
							}
						}
						if(!endMatch){
			            	errorHandler.fatalError("end tag name: "+tagName+' is not match the current start tagName:'+config.tagName ); // No known test case
						}
			        }else {
			        	parseStack.push(config);
			        }

					end++;
					break;
					// end elment
				case '?':// <?...?>
					locator&&position(tagStart);
					end = parseInstruction(source,tagStart,domBuilder);
					break;
				case '!':// <!doctype,<![CDATA,<!--
					locator&&position(tagStart);
					end = parseDCC(source,tagStart,domBuilder,errorHandler);
					break;
				default:
					locator&&position(tagStart);
					var el = new ElementAttributes();
					var currentNSMap = parseStack[parseStack.length-1].currentNSMap;
					//elStartEnd
					var end = parseElementStartPart(source,tagStart,el,currentNSMap,entityReplacer,errorHandler);
					var len = el.length;


					if(!el.closed && fixSelfClosed(source,end,el.tagName,closeMap)){
						el.closed = true;
						if(!entityMap.nbsp){
							errorHandler.warning('unclosed xml attribute');
						}
					}
					if(locator && len){
						var locator2 = copyLocator(locator,{});
						//try{//attribute position fixed
						for(var i = 0;i<len;i++){
							var a = el[i];
							position(a.offset);
							a.locator = copyLocator(locator,{});
						}
						domBuilder.locator = locator2;
						if(appendElement(el,domBuilder,currentNSMap)){
							parseStack.push(el);
						}
						domBuilder.locator = locator;
					}else {
						if(appendElement(el,domBuilder,currentNSMap)){
							parseStack.push(el);
						}
					}

					if (NAMESPACE.isHTML(el.uri) && !el.closed) {
						end = parseHtmlSpecialContent(source,end,el.tagName,entityReplacer,domBuilder);
					} else {
						end++;
					}
				}
			}catch(e){
				if (e instanceof ParseError) {
					throw e;
				}
				errorHandler.error('element parse error: '+e);
				end = -1;
			}
			if(end>start){
				start = end;
			}else {
				//TODO: 这里有可能sax回退，有位置错误风险
				appendText(Math.max(tagStart,start)+1);
			}
		}
	}
	function copyLocator(f,t){
		t.lineNumber = f.lineNumber;
		t.columnNumber = f.columnNumber;
		return t;
	}

	/**
	 * @see #appendElement(source,elStartEnd,el,selfClosed,entityReplacer,domBuilder,parseStack);
	 * @return end of the elementStartPart(end of elementEndPart for selfClosed el)
	 */
	function parseElementStartPart(source,start,el,currentNSMap,entityReplacer,errorHandler){

		/**
		 * @param {string} qname
		 * @param {string} value
		 * @param {number} startIndex
		 */
		function addAttribute(qname, value, startIndex) {
			if (el.attributeNames.hasOwnProperty(qname)) {
				errorHandler.fatalError('Attribute ' + qname + ' redefined');
			}
			el.addValue(
				qname,
				// @see https://www.w3.org/TR/xml/#AVNormalize
				// since the xmldom sax parser does not "interpret" DTD the following is not implemented:
				// - recursive replacement of (DTD) entity references
				// - trimming and collapsing multiple spaces into a single one for attributes that are not of type CDATA
				value.replace(/[\t\n\r]/g, ' ').replace(/&#?\w+;/g, entityReplacer),
				startIndex
			);
		}
		var attrName;
		var value;
		var p = ++start;
		var s = S_TAG;//status
		while(true){
			var c = source.charAt(p);
			switch(c){
			case '=':
				if(s === S_ATTR){//attrName
					attrName = source.slice(start,p);
					s = S_EQ;
				}else if(s === S_ATTR_SPACE){
					s = S_EQ;
				}else {
					//fatalError: equal must after attrName or space after attrName
					throw new Error('attribute equal must after attrName'); // No known test case
				}
				break;
			case '\'':
			case '"':
				if(s === S_EQ || s === S_ATTR //|| s == S_ATTR_SPACE
					){//equal
					if(s === S_ATTR){
						errorHandler.warning('attribute value must after "="');
						attrName = source.slice(start,p);
					}
					start = p+1;
					p = source.indexOf(c,start);
					if(p>0){
						value = source.slice(start, p);
						addAttribute(attrName, value, start-1);
						s = S_ATTR_END;
					}else {
						//fatalError: no end quot match
						throw new Error('attribute value no end \''+c+'\' match');
					}
				}else if(s == S_ATTR_NOQUOT_VALUE){
					value = source.slice(start, p);
					addAttribute(attrName, value, start);
					errorHandler.warning('attribute "'+attrName+'" missed start quot('+c+')!!');
					start = p+1;
					s = S_ATTR_END;
				}else {
					//fatalError: no equal before
					throw new Error('attribute value must after "="'); // No known test case
				}
				break;
			case '/':
				switch(s){
				case S_TAG:
					el.setTagName(source.slice(start,p));
				case S_ATTR_END:
				case S_TAG_SPACE:
				case S_TAG_CLOSE:
					s =S_TAG_CLOSE;
					el.closed = true;
				case S_ATTR_NOQUOT_VALUE:
				case S_ATTR:
				case S_ATTR_SPACE:
					break;
				//case S_EQ:
				default:
					throw new Error("attribute invalid close char('/')") // No known test case
				}
				break;
			case ''://end document
				errorHandler.error('unexpected end of input');
				if(s == S_TAG){
					el.setTagName(source.slice(start,p));
				}
				return p;
			case '>':
				switch(s){
				case S_TAG:
					el.setTagName(source.slice(start,p));
				case S_ATTR_END:
				case S_TAG_SPACE:
				case S_TAG_CLOSE:
					break;//normal
				case S_ATTR_NOQUOT_VALUE://Compatible state
				case S_ATTR:
					value = source.slice(start,p);
					if(value.slice(-1) === '/'){
						el.closed  = true;
						value = value.slice(0,-1);
					}
				case S_ATTR_SPACE:
					if(s === S_ATTR_SPACE){
						value = attrName;
					}
					if(s == S_ATTR_NOQUOT_VALUE){
						errorHandler.warning('attribute "'+value+'" missed quot(")!');
						addAttribute(attrName, value, start);
					}else {
						if(!NAMESPACE.isHTML(currentNSMap['']) || !value.match(/^(?:disabled|checked|selected)$/i)){
							errorHandler.warning('attribute "'+value+'" missed value!! "'+value+'" instead!!');
						}
						addAttribute(value, value, start);
					}
					break;
				case S_EQ:
					throw new Error('attribute value missed!!');
				}
	//			console.log(tagName,tagNamePattern,tagNamePattern.test(tagName))
				return p;
			/*xml space '\x20' | #x9 | #xD | #xA; */
			case '\u0080':
				c = ' ';
			default:
				if(c<= ' '){//space
					switch(s){
					case S_TAG:
						el.setTagName(source.slice(start,p));//tagName
						s = S_TAG_SPACE;
						break;
					case S_ATTR:
						attrName = source.slice(start,p);
						s = S_ATTR_SPACE;
						break;
					case S_ATTR_NOQUOT_VALUE:
						var value = source.slice(start, p);
						errorHandler.warning('attribute "'+value+'" missed quot(")!!');
						addAttribute(attrName, value, start);
					case S_ATTR_END:
						s = S_TAG_SPACE;
						break;
					//case S_TAG_SPACE:
					//case S_EQ:
					//case S_ATTR_SPACE:
					//	void();break;
					//case S_TAG_CLOSE:
						//ignore warning
					}
				}else {//not space
	//S_TAG,	S_ATTR,	S_EQ,	S_ATTR_NOQUOT_VALUE
	//S_ATTR_SPACE,	S_ATTR_END,	S_TAG_SPACE, S_TAG_CLOSE
					switch(s){
					//case S_TAG:void();break;
					//case S_ATTR:void();break;
					//case S_ATTR_NOQUOT_VALUE:void();break;
					case S_ATTR_SPACE:
						el.tagName;
						if (!NAMESPACE.isHTML(currentNSMap['']) || !attrName.match(/^(?:disabled|checked|selected)$/i)) {
							errorHandler.warning('attribute "'+attrName+'" missed value!! "'+attrName+'" instead2!!');
						}
						addAttribute(attrName, attrName, start);
						start = p;
						s = S_ATTR;
						break;
					case S_ATTR_END:
						errorHandler.warning('attribute space is required"'+attrName+'"!!');
					case S_TAG_SPACE:
						s = S_ATTR;
						start = p;
						break;
					case S_EQ:
						s = S_ATTR_NOQUOT_VALUE;
						start = p;
						break;
					case S_TAG_CLOSE:
						throw new Error("elements closed character '/' and '>' must be connected to");
					}
				}
			}//end outer switch
			//console.log('p++',p)
			p++;
		}
	}
	/**
	 * @return true if has new namespace define
	 */
	function appendElement(el,domBuilder,currentNSMap){
		var tagName = el.tagName;
		var localNSMap = null;
		//var currentNSMap = parseStack[parseStack.length-1].currentNSMap;
		var i = el.length;
		while(i--){
			var a = el[i];
			var qName = a.qName;
			var value = a.value;
			var nsp = qName.indexOf(':');
			if(nsp>0){
				var prefix = a.prefix = qName.slice(0,nsp);
				var localName = qName.slice(nsp+1);
				var nsPrefix = prefix === 'xmlns' && localName;
			}else {
				localName = qName;
				prefix = null;
				nsPrefix = qName === 'xmlns' && '';
			}
			//can not set prefix,because prefix !== ''
			a.localName = localName ;
			//prefix == null for no ns prefix attribute
			if(nsPrefix !== false){//hack!!
				if(localNSMap == null){
					localNSMap = {};
					//console.log(currentNSMap,0)
					_copy(currentNSMap,currentNSMap={});
					//console.log(currentNSMap,1)
				}
				currentNSMap[nsPrefix] = localNSMap[nsPrefix] = value;
				a.uri = NAMESPACE.XMLNS;
				domBuilder.startPrefixMapping(nsPrefix, value);
			}
		}
		var i = el.length;
		while(i--){
			a = el[i];
			var prefix = a.prefix;
			if(prefix){//no prefix attribute has no namespace
				if(prefix === 'xml'){
					a.uri = NAMESPACE.XML;
				}if(prefix !== 'xmlns'){
					a.uri = currentNSMap[prefix || ''];

					//{console.log('###'+a.qName,domBuilder.locator.systemId+'',currentNSMap,a.uri)}
				}
			}
		}
		var nsp = tagName.indexOf(':');
		if(nsp>0){
			prefix = el.prefix = tagName.slice(0,nsp);
			localName = el.localName = tagName.slice(nsp+1);
		}else {
			prefix = null;//important!!
			localName = el.localName = tagName;
		}
		//no prefix element has default namespace
		var ns = el.uri = currentNSMap[prefix || ''];
		domBuilder.startElement(ns,localName,tagName,el);
		//endPrefixMapping and startPrefixMapping have not any help for dom builder
		//localNSMap = null
		if(el.closed){
			domBuilder.endElement(ns,localName,tagName);
			if(localNSMap){
				for (prefix in localNSMap) {
					if (Object.prototype.hasOwnProperty.call(localNSMap, prefix)) {
						domBuilder.endPrefixMapping(prefix);
					}
				}
			}
		}else {
			el.currentNSMap = currentNSMap;
			el.localNSMap = localNSMap;
			//parseStack.push(el);
			return true;
		}
	}
	function parseHtmlSpecialContent(source,elStartEnd,tagName,entityReplacer,domBuilder){
		if(/^(?:script|textarea)$/i.test(tagName)){
			var elEndStart =  source.indexOf('</'+tagName+'>',elStartEnd);
			var text = source.substring(elStartEnd+1,elEndStart);
			if(/[&<]/.test(text)){
				if(/^script$/i.test(tagName)){
					//if(!/\]\]>/.test(text)){
						//lexHandler.startCDATA();
						domBuilder.characters(text,0,text.length);
						//lexHandler.endCDATA();
						return elEndStart;
					//}
				}//}else{//text area
					text = text.replace(/&#?\w+;/g,entityReplacer);
					domBuilder.characters(text,0,text.length);
					return elEndStart;
				//}

			}
		}
		return elStartEnd+1;
	}
	function fixSelfClosed(source,elStartEnd,tagName,closeMap){
		//if(tagName in closeMap){
		var pos = closeMap[tagName];
		if(pos == null){
			//console.log(tagName)
			pos =  source.lastIndexOf('</'+tagName+'>');
			if(pos<elStartEnd){//忘记闭合
				pos = source.lastIndexOf('</'+tagName);
			}
			closeMap[tagName] =pos;
		}
		return pos<elStartEnd;
		//}
	}

	function _copy (source, target) {
		for (var n in source) {
			if (Object.prototype.hasOwnProperty.call(source, n)) {
				target[n] = source[n];
			}
		}
	}

	function parseDCC(source,start,domBuilder,errorHandler){//sure start with '<!'
		var next= source.charAt(start+2);
		switch(next){
		case '-':
			if(source.charAt(start + 3) === '-'){
				var end = source.indexOf('-->',start+4);
				//append comment source.substring(4,end)//<!--
				if(end>start){
					domBuilder.comment(source,start+4,end-start-4);
					return end+3;
				}else {
					errorHandler.error("Unclosed comment");
					return -1;
				}
			}else {
				//error
				return -1;
			}
		default:
			if(source.substr(start+3,6) == 'CDATA['){
				var end = source.indexOf(']]>',start+9);
				domBuilder.startCDATA();
				domBuilder.characters(source,start+9,end-start-9);
				domBuilder.endCDATA();
				return end+3;
			}
			//<!DOCTYPE
			//startDTD(java.lang.String name, java.lang.String publicId, java.lang.String systemId)
			var matchs = split(source,start);
			var len = matchs.length;
			if(len>1 && /!doctype/i.test(matchs[0][0])){
				var name = matchs[1][0];
				var pubid = false;
				var sysid = false;
				if(len>3){
					if(/^public$/i.test(matchs[2][0])){
						pubid = matchs[3][0];
						sysid = len>4 && matchs[4][0];
					}else if(/^system$/i.test(matchs[2][0])){
						sysid = matchs[3][0];
					}
				}
				var lastMatch = matchs[len-1];
				domBuilder.startDTD(name, pubid, sysid);
				domBuilder.endDTD();

				return lastMatch.index+lastMatch[0].length
			}
		}
		return -1;
	}



	function parseInstruction(source,start,domBuilder){
		var end = source.indexOf('?>',start);
		if(end){
			var match = source.substring(start,end).match(/^<\?(\S*)\s*([\s\S]*?)\s*$/);
			if(match){
				match[0].length;
				domBuilder.processingInstruction(match[1], match[2]) ;
				return end+2;
			}else {//error
				return -1;
			}
		}
		return -1;
	}

	function ElementAttributes(){
		this.attributeNames = {};
	}
	ElementAttributes.prototype = {
		setTagName:function(tagName){
			if(!tagNamePattern.test(tagName)){
				throw new Error('invalid tagName:'+tagName)
			}
			this.tagName = tagName;
		},
		addValue:function(qName, value, offset) {
			if(!tagNamePattern.test(qName)){
				throw new Error('invalid attribute:'+qName)
			}
			this.attributeNames[qName] = this.length;
			this[this.length++] = {qName:qName,value:value,offset:offset};
		},
		length:0,
		getLocalName:function(i){return this[i].localName},
		getLocator:function(i){return this[i].locator},
		getQName:function(i){return this[i].qName},
		getURI:function(i){return this[i].uri},
		getValue:function(i){return this[i].value}
	//	,getIndex:function(uri, localName)){
	//		if(localName){
	//
	//		}else{
	//			var qName = uri
	//		}
	//	},
	//	getValue:function(){return this.getValue(this.getIndex.apply(this,arguments))},
	//	getType:function(uri,localName){}
	//	getType:function(i){},
	};



	function split(source,start){
		var match;
		var buf = [];
		var reg = /'[^']+'|"[^"]+"|[^\s<>\/=]+=?|(\/?\s*>|<)/g;
		reg.lastIndex = start;
		reg.exec(source);//skip <
		while(match = reg.exec(source)){
			buf.push(match);
			if(match[1])return buf;
		}
	}

	exports.XMLReader = XMLReader;
	exports.ParseError = ParseError;


	/***/ }),

	/***/ "./node_modules/process/browser.js":
	/*!*****************************************!*\
	  !*** ./node_modules/process/browser.js ***!
	  \*****************************************/
	/*! no static exports found */
	/***/ (function(module, exports) {

	// shim for using process in browser
	var process = module.exports = {};

	// cached from whatever global is present so that test runners that stub it
	// don't break things.  But we need to wrap it in a try catch in case it is
	// wrapped in strict mode code which doesn't define any globals.  It's inside a
	// function because try/catches deoptimize in certain engines.

	var cachedSetTimeout;
	var cachedClearTimeout;

	function defaultSetTimout() {
	    throw new Error('setTimeout has not been defined');
	}
	function defaultClearTimeout () {
	    throw new Error('clearTimeout has not been defined');
	}
	(function () {
	    try {
	        if (typeof setTimeout === 'function') {
	            cachedSetTimeout = setTimeout;
	        } else {
	            cachedSetTimeout = defaultSetTimout;
	        }
	    } catch (e) {
	        cachedSetTimeout = defaultSetTimout;
	    }
	    try {
	        if (typeof clearTimeout === 'function') {
	            cachedClearTimeout = clearTimeout;
	        } else {
	            cachedClearTimeout = defaultClearTimeout;
	        }
	    } catch (e) {
	        cachedClearTimeout = defaultClearTimeout;
	    }
	} ());
	function runTimeout(fun) {
	    if (cachedSetTimeout === setTimeout) {
	        //normal enviroments in sane situations
	        return setTimeout(fun, 0);
	    }
	    // if setTimeout wasn't available but was latter defined
	    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
	        cachedSetTimeout = setTimeout;
	        return setTimeout(fun, 0);
	    }
	    try {
	        // when when somebody has screwed with setTimeout but no I.E. maddness
	        return cachedSetTimeout(fun, 0);
	    } catch(e){
	        try {
	            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
	            return cachedSetTimeout.call(null, fun, 0);
	        } catch(e){
	            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
	            return cachedSetTimeout.call(this, fun, 0);
	        }
	    }


	}
	function runClearTimeout(marker) {
	    if (cachedClearTimeout === clearTimeout) {
	        //normal enviroments in sane situations
	        return clearTimeout(marker);
	    }
	    // if clearTimeout wasn't available but was latter defined
	    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
	        cachedClearTimeout = clearTimeout;
	        return clearTimeout(marker);
	    }
	    try {
	        // when when somebody has screwed with setTimeout but no I.E. maddness
	        return cachedClearTimeout(marker);
	    } catch (e){
	        try {
	            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
	            return cachedClearTimeout.call(null, marker);
	        } catch (e){
	            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
	            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
	            return cachedClearTimeout.call(this, marker);
	        }
	    }



	}
	var queue = [];
	var draining = false;
	var currentQueue;
	var queueIndex = -1;

	function cleanUpNextTick() {
	    if (!draining || !currentQueue) {
	        return;
	    }
	    draining = false;
	    if (currentQueue.length) {
	        queue = currentQueue.concat(queue);
	    } else {
	        queueIndex = -1;
	    }
	    if (queue.length) {
	        drainQueue();
	    }
	}

	function drainQueue() {
	    if (draining) {
	        return;
	    }
	    var timeout = runTimeout(cleanUpNextTick);
	    draining = true;

	    var len = queue.length;
	    while(len) {
	        currentQueue = queue;
	        queue = [];
	        while (++queueIndex < len) {
	            if (currentQueue) {
	                currentQueue[queueIndex].run();
	            }
	        }
	        queueIndex = -1;
	        len = queue.length;
	    }
	    currentQueue = null;
	    draining = false;
	    runClearTimeout(timeout);
	}

	process.nextTick = function (fun) {
	    var args = new Array(arguments.length - 1);
	    if (arguments.length > 1) {
	        for (var i = 1; i < arguments.length; i++) {
	            args[i - 1] = arguments[i];
	        }
	    }
	    queue.push(new Item(fun, args));
	    if (queue.length === 1 && !draining) {
	        runTimeout(drainQueue);
	    }
	};

	// v8 likes predictible objects
	function Item(fun, array) {
	    this.fun = fun;
	    this.array = array;
	}
	Item.prototype.run = function () {
	    this.fun.apply(null, this.array);
	};
	process.title = 'browser';
	process.browser = true;
	process.env = {};
	process.argv = [];
	process.version = ''; // empty string to avoid regexp issues
	process.versions = {};

	function noop() {}

	process.on = noop;
	process.addListener = noop;
	process.once = noop;
	process.off = noop;
	process.removeListener = noop;
	process.removeAllListeners = noop;
	process.emit = noop;
	process.prependListener = noop;
	process.prependOnceListener = noop;

	process.listeners = function (name) { return [] };

	process.binding = function (name) {
	    throw new Error('process.binding is not supported');
	};

	process.cwd = function () { return '/' };
	process.chdir = function (dir) {
	    throw new Error('process.chdir is not supported');
	};
	process.umask = function() { return 0; };


	/***/ }),

	/***/ "./node_modules/webpack/buildin/amd-options.js":
	/*!****************************************!*\
	  !*** (webpack)/buildin/amd-options.js ***!
	  \****************************************/
	/*! no static exports found */
	/***/ (function(module, exports) {

	/* WEBPACK VAR INJECTION */(function(__webpack_amd_options__) {/* globals __webpack_amd_options__ */
	module.exports = __webpack_amd_options__;

	/* WEBPACK VAR INJECTION */}.call(this, {}));

	/***/ }),

	/***/ "./node_modules/webpack/buildin/global.js":
	/*!***********************************!*\
	  !*** (webpack)/buildin/global.js ***!
	  \***********************************/
	/*! no static exports found */
	/***/ (function(module, exports) {

	var g;

	// This works in non-strict mode
	g = (function() {
		return this;
	})();

	try {
		// This works if eval is allowed (see CSP)
		g = g || new Function("return this")();
	} catch (e) {
		// This works if the window reference is available
		if (typeof window === "object") g = window;
	}

	// g can still be undefined, but nothing to do about it...
	// We return undefined, instead of nothing here, so it's
	// easier to handle this case. if(!global) { ...}

	module.exports = g;


	/***/ }),

	/***/ "./node_modules/webpack/buildin/module.js":
	/*!***********************************!*\
	  !*** (webpack)/buildin/module.js ***!
	  \***********************************/
	/*! no static exports found */
	/***/ (function(module, exports) {

	module.exports = function(module) {
		if (!module.webpackPolyfill) {
			module.deprecate = function() {};
			module.paths = [];
			// module.parent = undefined by default
			if (!module.children) module.children = [];
			Object.defineProperty(module, "loaded", {
				enumerable: true,
				get: function() {
					return module.l;
				}
			});
			Object.defineProperty(module, "id", {
				enumerable: true,
				get: function() {
					return module.i;
				}
			});
			module.webpackPolyfill = 1;
		}
		return module;
	};


	/***/ }),

	/***/ "./package.json":
	/*!**********************!*\
	  !*** ./package.json ***!
	  \**********************/
	/*! exports provided: name, version, description, main, types, scripts, repository, keywords, author, license, bugs, homepage, dependencies, devDependencies, default */
	/***/ (function(module) {

	module.exports = JSON.parse("{\"name\":\"cos-js-sdk-v5\",\"version\":\"1.4.20\",\"description\":\"JavaScript SDK for [腾讯云对象存储](https://cloud.tencent.com/product/cos)\",\"main\":\"dist/cos-js-sdk-v5.js\",\"types\":\"index.d.ts\",\"scripts\":{\"prettier\":\"prettier --write src demo/demo.js test/test.js server/sts.js index.d.ts\",\"server\":\"node server/sts.js\",\"dev\":\"cross-env NODE_ENV=development webpack -w --mode=development\",\"build\":\"cross-env NODE_ENV=production webpack --mode=production\",\"cos-auth.min.js\":\"uglifyjs ./demo/common/cos-auth.js -o ./demo/common/cos-auth.min.js -c -m\",\"test\":\"jest --runInBand --coverage\"},\"repository\":{\"type\":\"git\",\"url\":\"git+https://github.com/tencentyun/cos-js-sdk-v5.git\"},\"keywords\":[],\"author\":\"carsonxu\",\"license\":\"ISC\",\"bugs\":{\"url\":\"https://github.com/tencentyun/cos-js-sdk-v5/issues\"},\"homepage\":\"https://github.com/tencentyun/cos-js-sdk-v5#readme\",\"dependencies\":{\"@xmldom/xmldom\":\"^0.8.6\"},\"devDependencies\":{\"@babel/core\":\"7.17.9\",\"@babel/plugin-transform-runtime\":\"7.18.10\",\"@babel/preset-env\":\"7.16.11\",\"babel-loader\":\"8.2.5\",\"body-parser\":\"^1.18.3\",\"cross-env\":\"^5.2.0\",\"express\":\"^4.16.4\",\"jest\":\"^29.3.1\",\"jest-environment-jsdom\":\"^29.3.1\",\"prettier\":\"^3.0.1\",\"qcloud-cos-sts\":\"^3.0.2\",\"request\":\"^2.87.0\",\"terser-webpack-plugin\":\"4.2.3\",\"uglifyjs\":\"^2.4.11\",\"webpack\":\"4.46.0\",\"webpack-cli\":\"4.10.0\"}}");

	/***/ }),

	/***/ "./src/advance.js":
	/*!************************!*\
	  !*** ./src/advance.js ***!
	  \************************/
	/*! no static exports found */
	/***/ (function(module, exports, __webpack_require__) {

	var _typeof = __webpack_require__(/*! @babel/runtime/helpers/typeof */ "./node_modules/@babel/runtime/helpers/typeof.js");

	var session = __webpack_require__(/*! ./session */ "./src/session.js");

	var Async = __webpack_require__(/*! ./async */ "./src/async.js");

	var EventProxy = __webpack_require__(/*! ./event */ "./src/event.js").EventProxy;

	var util = __webpack_require__(/*! ./util */ "./src/util.js");

	var Tracker = __webpack_require__(/*! ./tracker */ "./src/tracker.js"); // 文件分块上传全过程，暴露的分块上传接口


	function sliceUploadFile(params, callback) {
	  var self = this;
	  var ep = new EventProxy();
	  var TaskId = params.TaskId;
	  var Bucket = params.Bucket;
	  var Region = params.Region;
	  var Key = params.Key;
	  var Body = params.Body;
	  var ChunkSize = params.ChunkSize || params.SliceSize || self.options.ChunkSize;
	  var AsyncLimit = params.AsyncLimit;
	  var StorageClass = params.StorageClass;
	  var ServerSideEncryption = params.ServerSideEncryption;
	  var FileSize;
	  var onProgress;
	  var onHashProgress = params.onHashProgress;
	  var tracker = params.tracker;
	  tracker && tracker.setParams({
	    chunkSize: ChunkSize
	  }); // 上传过程中出现错误，返回错误

	  ep.on('error', function (err) {
	    if (!self._isRunningTask(TaskId)) return;
	    err.UploadId = params.UploadData.UploadId || '';
	    return callback(err);
	  }); // 上传分块完成，开始 uploadSliceComplete 操作

	  ep.on('upload_complete', function (UploadCompleteData) {
	    var _UploadCompleteData = util.extend({
	      UploadId: params.UploadData.UploadId || ''
	    }, UploadCompleteData);

	    callback(null, _UploadCompleteData);
	  }); // 上传分块完成，开始 uploadSliceComplete 操作

	  ep.on('upload_slice_complete', function (UploadData) {
	    var metaHeaders = {};
	    util.each(params.Headers, function (val, k) {
	      var shortKey = k.toLowerCase();
	      if (shortKey.indexOf('x-cos-meta-') === 0 || shortKey === 'pic-operations') metaHeaders[k] = val;
	    });
	    uploadSliceComplete.call(self, {
	      Bucket: Bucket,
	      Region: Region,
	      Key: Key,
	      UploadId: UploadData.UploadId,
	      SliceList: UploadData.SliceList,
	      Headers: metaHeaders,
	      tracker: tracker
	    }, function (err, data) {
	      if (!self._isRunningTask(TaskId)) return;
	      session.removeUsing(UploadData.UploadId);

	      if (err) {
	        onProgress(null, true);
	        return ep.emit('error', err);
	      }

	      session.removeUploadId.call(self, UploadData.UploadId);
	      onProgress({
	        loaded: FileSize,
	        total: FileSize
	      }, true);
	      ep.emit('upload_complete', data);
	    });
	  }); // 获取 UploadId 完成，开始上传每个分片

	  ep.on('get_upload_data_finish', function (UploadData) {
	    // 处理 UploadId 缓存
	    var uuid = session.getFileId(Body, params.ChunkSize, Bucket, Key);
	    uuid && session.saveUploadId.call(self, uuid, UploadData.UploadId, self.options.UploadIdCacheLimit); // 缓存 UploadId

	    session.setUsing(UploadData.UploadId); // 标记 UploadId 为正在使用
	    // 获取 UploadId

	    onProgress(null, true); // 任务状态开始 uploading

	    uploadSliceList.call(self, {
	      TaskId: TaskId,
	      Bucket: Bucket,
	      Region: Region,
	      Key: Key,
	      Body: Body,
	      FileSize: FileSize,
	      SliceSize: ChunkSize,
	      AsyncLimit: AsyncLimit,
	      ServerSideEncryption: ServerSideEncryption,
	      UploadData: UploadData,
	      Headers: params.Headers,
	      onProgress: onProgress,
	      tracker: tracker
	    }, function (err, data) {
	      if (!self._isRunningTask(TaskId)) return;

	      if (err) {
	        onProgress(null, true);
	        return ep.emit('error', err);
	      }

	      ep.emit('upload_slice_complete', data);
	    });
	  }); // 开始获取文件 UploadId，里面会视情况计算 ETag，并比对，保证文件一致性，也优化上传

	  ep.on('get_file_size_finish', function () {
	    onProgress = util.throttleOnProgress.call(self, FileSize, params.onProgress);

	    if (params.UploadData.UploadId) {
	      ep.emit('get_upload_data_finish', params.UploadData);
	    } else {
	      var _params = util.extend({
	        TaskId: TaskId,
	        Bucket: Bucket,
	        Region: Region,
	        Key: Key,
	        Headers: params.Headers,
	        StorageClass: StorageClass,
	        Body: Body,
	        FileSize: FileSize,
	        SliceSize: ChunkSize,
	        onHashProgress: onHashProgress,
	        tracker: tracker
	      }, params);

	      getUploadIdAndPartList.call(self, _params, function (err, UploadData) {
	        if (!self._isRunningTask(TaskId)) return;
	        if (err) return ep.emit('error', err);
	        params.UploadData.UploadId = UploadData.UploadId;
	        params.UploadData.PartList = UploadData.PartList;
	        ep.emit('get_upload_data_finish', params.UploadData);
	      });
	    }
	  }); // 获取上传文件大小

	  FileSize = params.ContentLength;
	  delete params.ContentLength;
	  !params.Headers && (params.Headers = {});
	  util.each(params.Headers, function (item, key) {
	    if (key.toLowerCase() === 'content-length') {
	      delete params.Headers[key];
	    }
	  }); // 控制分片大小

	  (function () {
	    var SIZE = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 1024 * 2, 1024 * 4, 1024 * 5];
	    var AutoChunkSize = 1024 * 1024;

	    for (var i = 0; i < SIZE.length; i++) {
	      AutoChunkSize = SIZE[i] * 1024 * 1024;
	      if (FileSize / AutoChunkSize <= self.options.MaxPartNumber) break;
	    }

	    params.ChunkSize = params.SliceSize = ChunkSize = Math.max(ChunkSize, AutoChunkSize);
	  })(); // 开始上传


	  if (FileSize === 0) {
	    params.Body = '';
	    params.ContentLength = 0;
	    params.SkipTask = true;
	    self.putObject(params, callback);
	  } else {
	    ep.emit('get_file_size_finish');
	  }
	} // 获取上传任务的 UploadId


	function getUploadIdAndPartList(params, callback) {
	  var TaskId = params.TaskId;
	  var Bucket = params.Bucket;
	  var Region = params.Region;
	  var Key = params.Key;
	  var StorageClass = params.StorageClass;
	  var self = this; // 计算 ETag

	  var ETagMap = {};
	  var FileSize = params.FileSize;
	  var SliceSize = params.SliceSize;
	  var SliceCount = Math.ceil(FileSize / SliceSize);
	  var FinishSize = 0;
	  var onHashProgress = util.throttleOnProgress.call(self, FileSize, params.onHashProgress);

	  var getChunkETag = function getChunkETag(PartNumber, callback) {
	    var start = SliceSize * (PartNumber - 1);
	    var end = Math.min(start + SliceSize, FileSize);
	    var ChunkSize = end - start;

	    if (ETagMap[PartNumber]) {
	      callback(null, {
	        PartNumber: PartNumber,
	        ETag: ETagMap[PartNumber],
	        Size: ChunkSize
	      });
	    } else {
	      util.fileSlice(params.Body, start, end, false, function (chunkItem) {
	        util.getFileMd5(chunkItem, function (err, md5) {
	          if (err) return callback(util.error(err));
	          var ETag = '"' + md5 + '"';
	          ETagMap[PartNumber] = ETag;
	          FinishSize += ChunkSize;
	          onHashProgress({
	            loaded: FinishSize,
	            total: FileSize
	          });
	          callback(null, {
	            PartNumber: PartNumber,
	            ETag: ETag,
	            Size: ChunkSize
	          });
	        });
	      });
	    }
	  }; // 通过和文件的 md5 对比，判断 UploadId 是否可用


	  var isAvailableUploadList = function isAvailableUploadList(PartList, callback) {
	    var PartCount = PartList.length; // 如果没有分片，通过

	    if (PartCount === 0) {
	      return callback(null, true);
	    } // 检查分片数量


	    if (PartCount > SliceCount) {
	      return callback(null, false);
	    } // 检查分片大小


	    if (PartCount > 1) {
	      var PartSliceSize = Math.max(PartList[0].Size, PartList[1].Size);

	      if (PartSliceSize !== SliceSize) {
	        return callback(null, false);
	      }
	    } // 逐个分片计算并检查 ETag 是否一致


	    var next = function next(index) {
	      if (index < PartCount) {
	        var Part = PartList[index];
	        getChunkETag(Part.PartNumber, function (err, chunk) {
	          if (chunk && chunk.ETag === Part.ETag && chunk.Size === Part.Size) {
	            next(index + 1);
	          } else {
	            callback(null, false);
	          }
	        });
	      } else {
	        callback(null, true);
	      }
	    };

	    next(0);
	  };

	  var ep = new EventProxy();
	  ep.on('error', function (errData) {
	    if (!self._isRunningTask(TaskId)) return;
	    return callback(errData);
	  }); // 存在 UploadId

	  ep.on('upload_id_available', function (UploadData) {
	    // 转换成 map
	    var map = {};
	    var list = [];
	    util.each(UploadData.PartList, function (item) {
	      map[item.PartNumber] = item;
	    });

	    for (var PartNumber = 1; PartNumber <= SliceCount; PartNumber++) {
	      var item = map[PartNumber];

	      if (item) {
	        item.PartNumber = PartNumber;
	        item.Uploaded = true;
	      } else {
	        item = {
	          PartNumber: PartNumber,
	          ETag: null,
	          Uploaded: false
	        };
	      }

	      list.push(item);
	    }

	    UploadData.PartList = list;
	    callback(null, UploadData);
	  }); // 不存在 UploadId, 初始化生成 UploadId

	  ep.on('no_available_upload_id', function () {
	    if (!self._isRunningTask(TaskId)) return;

	    var _params = util.extend({
	      Bucket: Bucket,
	      Region: Region,
	      Key: Key,
	      Query: util.clone(params.Query),
	      StorageClass: StorageClass,
	      Body: params.Body,
	      calledBySdk: 'sliceUploadFile',
	      tracker: params.tracker
	    }, params);

	    var headers = util.clone(params.Headers);
	    delete headers['x-cos-mime-limit'];
	    _params.Headers = headers;
	    self.multipartInit(_params, function (err, data) {
	      if (!self._isRunningTask(TaskId)) return;
	      if (err) return ep.emit('error', err);
	      var UploadId = data.UploadId;

	      if (!UploadId) {
	        return callback(util.error(new Error('no such upload id')));
	      }

	      ep.emit('upload_id_available', {
	        UploadId: UploadId,
	        PartList: []
	      });
	    });
	  }); // 如果已存在 UploadId，找一个可以用的 UploadId

	  ep.on('has_and_check_upload_id', function (UploadIdList) {
	    // 串行地，找一个内容一致的 UploadId
	    UploadIdList = UploadIdList.reverse();
	    Async.eachLimit(UploadIdList, 1, function (UploadId, asyncCallback) {
	      if (!self._isRunningTask(TaskId)) return; // 如果正在上传，跳过

	      if (session.using[UploadId]) {
	        asyncCallback(); // 检查下一个 UploadId

	        return;
	      } // 判断 UploadId 是否可用


	      wholeMultipartListPart.call(self, {
	        Bucket: Bucket,
	        Region: Region,
	        Key: Key,
	        UploadId: UploadId,
	        tracker: params.tracker
	      }, function (err, PartListData) {
	        if (!self._isRunningTask(TaskId)) return;

	        if (err) {
	          session.removeUsing(UploadId);
	          return ep.emit('error', err);
	        }

	        var PartList = PartListData.PartList;
	        PartList.forEach(function (item) {
	          item.PartNumber *= 1;
	          item.Size *= 1;
	          item.ETag = item.ETag || '';
	        });
	        isAvailableUploadList(PartList, function (err, isAvailable) {
	          if (!self._isRunningTask(TaskId)) return;
	          if (err) return ep.emit('error', err);

	          if (isAvailable) {
	            asyncCallback({
	              UploadId: UploadId,
	              PartList: PartList
	            }); // 马上结束
	          } else {
	            asyncCallback(); // 检查下一个 UploadId
	          }
	        });
	      });
	    }, function (AvailableUploadData) {
	      if (!self._isRunningTask(TaskId)) return;
	      onHashProgress(null, true);

	      if (AvailableUploadData && AvailableUploadData.UploadId) {
	        ep.emit('upload_id_available', AvailableUploadData);
	      } else {
	        ep.emit('no_available_upload_id');
	      }
	    });
	  }); // 在本地缓存找可用的 UploadId

	  ep.on('seek_local_avail_upload_id', function (RemoteUploadIdList) {
	    // 在本地找可用的 UploadId
	    var uuid = session.getFileId(params.Body, params.ChunkSize, Bucket, Key);
	    var LocalUploadIdList = session.getUploadIdList.call(self, uuid);

	    if (!uuid || !LocalUploadIdList) {
	      ep.emit('has_and_check_upload_id', RemoteUploadIdList);
	      return;
	    }

	    var next = function next(index) {
	      // 如果本地找不到可用 UploadId，再一个个遍历校验远端
	      if (index >= LocalUploadIdList.length) {
	        ep.emit('has_and_check_upload_id', RemoteUploadIdList);
	        return;
	      }

	      var UploadId = LocalUploadIdList[index]; // 如果不在远端 UploadId 列表里，跳过并删除

	      if (!util.isInArray(RemoteUploadIdList, UploadId)) {
	        session.removeUploadId.call(self, UploadId);
	        next(index + 1);
	        return;
	      } // 如果正在上传，跳过


	      if (session.using[UploadId]) {
	        next(index + 1);
	        return;
	      } // 判断 UploadId 是否存在线上


	      wholeMultipartListPart.call(self, {
	        Bucket: Bucket,
	        Region: Region,
	        Key: Key,
	        UploadId: UploadId,
	        tracker: params.tracker
	      }, function (err, PartListData) {
	        if (!self._isRunningTask(TaskId)) return;

	        if (err) {
	          // 如果 UploadId 获取会出错，跳过并删除
	          session.removeUploadId.call(self, UploadId);
	          next(index + 1);
	        } else {
	          // 找到可用 UploadId
	          ep.emit('upload_id_available', {
	            UploadId: UploadId,
	            PartList: PartListData.PartList
	          });
	        }
	      });
	    };

	    next(0);
	  }); // 获取线上 UploadId 列表

	  ep.on('get_remote_upload_id_list', function () {
	    // 获取符合条件的 UploadId 列表，因为同一个文件可以有多个上传任务。
	    wholeMultipartList.call(self, {
	      Bucket: Bucket,
	      Region: Region,
	      Key: Key,
	      tracker: params.tracker
	    }, function (err, data) {
	      if (!self._isRunningTask(TaskId)) return;
	      if (err) return ep.emit('error', err); // 整理远端 UploadId 列表

	      var RemoteUploadIdList = util.filter(data.UploadList, function (item) {
	        return item.Key === Key && (!StorageClass || item.StorageClass.toUpperCase() === StorageClass.toUpperCase());
	      }).reverse().map(function (item) {
	        return item.UploadId || item.UploadID;
	      });

	      if (RemoteUploadIdList.length) {
	        ep.emit('seek_local_avail_upload_id', RemoteUploadIdList);
	      } else {
	        // 远端没有 UploadId，清理缓存的 UploadId
	        var uuid = session.getFileId(params.Body, params.ChunkSize, Bucket, Key),
	            LocalUploadIdList;

	        if (uuid && (LocalUploadIdList = session.getUploadIdList.call(self, uuid))) {
	          util.each(LocalUploadIdList, function (UploadId) {
	            session.removeUploadId.call(self, UploadId);
	          });
	        }

	        ep.emit('no_available_upload_id');
	      }
	    });
	  }); // 开始找可用 UploadId

	  ep.emit('get_remote_upload_id_list');
	} // 获取符合条件的全部上传任务 (条件包括 Bucket, Region, Prefix)


	function wholeMultipartList(params, callback) {
	  var self = this;
	  var UploadList = [];
	  var sendParams = {
	    Bucket: params.Bucket,
	    Region: params.Region,
	    Prefix: params.Key,
	    calledBySdk: params.calledBySdk || 'sliceUploadFile',
	    tracker: params.tracker
	  };

	  var next = function next() {
	    self.multipartList(sendParams, function (err, data) {
	      if (err) return callback(err);
	      UploadList.push.apply(UploadList, data.Upload || []);

	      if (data.IsTruncated === 'true') {
	        // 列表不完整
	        sendParams.KeyMarker = data.NextKeyMarker;
	        sendParams.UploadIdMarker = data.NextUploadIdMarker;
	        next();
	      } else {
	        callback(null, {
	          UploadList: UploadList
	        });
	      }
	    });
	  };

	  next();
	} // 获取指定上传任务的分块列表


	function wholeMultipartListPart(params, callback) {
	  var self = this;
	  var PartList = [];
	  var sendParams = {
	    Bucket: params.Bucket,
	    Region: params.Region,
	    Key: params.Key,
	    UploadId: params.UploadId,
	    calledBySdk: 'sliceUploadFile',
	    tracker: params.tracker
	  };

	  var next = function next() {
	    self.multipartListPart(sendParams, function (err, data) {
	      if (err) return callback(err);
	      PartList.push.apply(PartList, data.Part || []);

	      if (data.IsTruncated === 'true') {
	        // 列表不完整
	        sendParams.PartNumberMarker = data.NextPartNumberMarker;
	        next();
	      } else {
	        callback(null, {
	          PartList: PartList
	        });
	      }
	    });
	  };

	  next();
	} // 上传文件分块，包括

	/*
	 UploadId (上传任务编号)
	 AsyncLimit (并发量)，
	 SliceList (上传的分块数组)，
	 FilePath (本地文件的位置)，
	 SliceSize (文件分块大小)
	 FileSize (文件大小)
	 onProgress (上传成功之后的回调函数)
	 */


	function uploadSliceList(params, cb) {
	  var self = this;
	  var TaskId = params.TaskId;
	  var Bucket = params.Bucket;
	  var Region = params.Region;
	  var Key = params.Key;
	  var UploadData = params.UploadData;
	  var FileSize = params.FileSize;
	  var SliceSize = params.SliceSize;
	  var ChunkParallel = Math.min(params.AsyncLimit || self.options.ChunkParallelLimit || 1, 256);
	  var Body = params.Body;
	  var SliceCount = Math.ceil(FileSize / SliceSize);
	  var FinishSize = 0;
	  var ServerSideEncryption = params.ServerSideEncryption;
	  var Headers = params.Headers;
	  var needUploadSlices = util.filter(UploadData.PartList, function (SliceItem) {
	    if (SliceItem['Uploaded']) {
	      FinishSize += SliceItem['PartNumber'] >= SliceCount ? FileSize % SliceSize || SliceSize : SliceSize;
	    }

	    return !SliceItem['Uploaded'];
	  });
	  var _onProgress2 = params.onProgress;
	  Async.eachLimit(needUploadSlices, ChunkParallel, function (SliceItem, asyncCallback) {
	    if (!self._isRunningTask(TaskId)) return;
	    var PartNumber = SliceItem['PartNumber'];
	    var currentSize = Math.min(FileSize, SliceItem['PartNumber'] * SliceSize) - (SliceItem['PartNumber'] - 1) * SliceSize;
	    var preAddSize = 0;
	    uploadSliceItem.call(self, {
	      TaskId: TaskId,
	      Bucket: Bucket,
	      Region: Region,
	      Key: Key,
	      SliceSize: SliceSize,
	      FileSize: FileSize,
	      PartNumber: PartNumber,
	      ServerSideEncryption: ServerSideEncryption,
	      Body: Body,
	      UploadData: UploadData,
	      Headers: Headers,
	      onProgress: function onProgress(data) {
	        FinishSize += data.loaded - preAddSize;
	        preAddSize = data.loaded;

	        _onProgress2({
	          loaded: FinishSize,
	          total: FileSize
	        });
	      },
	      tracker: params.tracker
	    }, function (err, data) {
	      if (!self._isRunningTask(TaskId)) return;
	      if (!err && !data.ETag) err = 'get ETag error, please add "ETag" to CORS ExposeHeader setting.( 获取ETag失败，请在CORS ExposeHeader设置中添加ETag，请参考文档：https://cloud.tencent.com/document/product/436/13318 )';

	      if (err) {
	        FinishSize -= preAddSize;
	      } else {
	        FinishSize += currentSize - preAddSize;
	        SliceItem.ETag = data.ETag;
	      }

	      _onProgress2({
	        loaded: FinishSize,
	        total: FileSize
	      });

	      asyncCallback(err || null, data);
	    });
	  }, function (err) {
	    if (!self._isRunningTask(TaskId)) return;
	    if (err) return cb(err);
	    cb(null, {
	      UploadId: UploadData.UploadId,
	      SliceList: UploadData.PartList
	    });
	  });
	} // 上传指定分片


	function uploadSliceItem(params, callback) {
	  var self = this;
	  var TaskId = params.TaskId;
	  var Bucket = params.Bucket;
	  var Region = params.Region;
	  var Key = params.Key;
	  var FileSize = params.FileSize;
	  var FileBody = params.Body;
	  var PartNumber = params.PartNumber * 1;
	  var SliceSize = params.SliceSize;
	  var ServerSideEncryption = params.ServerSideEncryption;
	  var UploadData = params.UploadData;
	  var Headers = params.Headers || {};
	  var ChunkRetryTimes = self.options.ChunkRetryTimes + 1;
	  var start = SliceSize * (PartNumber - 1);
	  var ContentLength = SliceSize;
	  var end = start + SliceSize;

	  if (end > FileSize) {
	    end = FileSize;
	    ContentLength = end - start;
	  }

	  var headersWhiteList = ['x-cos-traffic-limit', 'x-cos-mime-limit'];
	  var headers = {};
	  util.each(Headers, function (v, k) {
	    if (headersWhiteList.indexOf(k) > -1) {
	      headers[k] = v;
	    }
	  });
	  var PartItem = UploadData.PartList[PartNumber - 1];
	  Async.retry(ChunkRetryTimes, function (tryCallback) {
	    if (!self._isRunningTask(TaskId)) return;
	    util.fileSlice(FileBody, start, end, true, function (Body) {
	      self.multipartUpload({
	        TaskId: TaskId,
	        Bucket: Bucket,
	        Region: Region,
	        Key: Key,
	        ContentLength: ContentLength,
	        PartNumber: PartNumber,
	        UploadId: UploadData.UploadId,
	        ServerSideEncryption: ServerSideEncryption,
	        Body: Body,
	        Headers: headers,
	        onProgress: params.onProgress,
	        calledBySdk: 'sliceUploadFile',
	        tracker: params.tracker
	      }, function (err, data) {
	        if (!self._isRunningTask(TaskId)) return;
	        if (err) return tryCallback(err);
	        PartItem.Uploaded = true;
	        return tryCallback(null, data);
	      });
	    });
	  }, function (err, data) {
	    if (!self._isRunningTask(TaskId)) return;
	    return callback(err, data);
	  });
	} // 完成分块上传


	function uploadSliceComplete(params, callback) {
	  var Bucket = params.Bucket;
	  var Region = params.Region;
	  var Key = params.Key;
	  var UploadId = params.UploadId;
	  var SliceList = params.SliceList;
	  var self = this;
	  var ChunkRetryTimes = this.options.ChunkRetryTimes + 1;
	  var Headers = params.Headers;
	  var Parts = SliceList.map(function (item) {
	    return {
	      PartNumber: item.PartNumber,
	      ETag: item.ETag
	    };
	  }); // 完成上传的请求也做重试

	  Async.retry(ChunkRetryTimes, function (tryCallback) {
	    self.multipartComplete({
	      Bucket: Bucket,
	      Region: Region,
	      Key: Key,
	      UploadId: UploadId,
	      Parts: Parts,
	      Headers: Headers,
	      calledBySdk: 'sliceUploadFile',
	      tracker: params.tracker
	    }, tryCallback);
	  }, function (err, data) {
	    callback(err, data);
	  });
	} // 抛弃分块上传任务

	/*
	 AsyncLimit (抛弃上传任务的并发量)，
	 UploadId (上传任务的编号，当 Level 为 task 时候需要)
	 Level (抛弃分块上传任务的级别，task : 抛弃指定的上传任务，file ： 抛弃指定的文件对应的上传任务，其他值 ：抛弃指定Bucket 的全部上传任务)
	 */


	function abortUploadTask(params, callback) {
	  var Bucket = params.Bucket;
	  var Region = params.Region;
	  var Key = params.Key;
	  var UploadId = params.UploadId;
	  var Level = params.Level || 'task';
	  var AsyncLimit = params.AsyncLimit;
	  var self = this;
	  var ep = new EventProxy();
	  ep.on('error', function (errData) {
	    return callback(errData);
	  }); // 已经获取到需要抛弃的任务列表

	  ep.on('get_abort_array', function (AbortArray) {
	    abortUploadTaskArray.call(self, {
	      Bucket: Bucket,
	      Region: Region,
	      Key: Key,
	      Headers: params.Headers,
	      AsyncLimit: AsyncLimit,
	      AbortArray: AbortArray
	    }, callback);
	  });

	  if (Level === 'bucket') {
	    // Bucket 级别的任务抛弃，抛弃该 Bucket 下的全部上传任务
	    wholeMultipartList.call(self, {
	      Bucket: Bucket,
	      Region: Region,
	      calledBySdk: 'abortUploadTask'
	    }, function (err, data) {
	      if (err) return callback(err);
	      ep.emit('get_abort_array', data.UploadList || []);
	    });
	  } else if (Level === 'file') {
	    // 文件级别的任务抛弃，抛弃该文件的全部上传任务
	    if (!Key) return callback(util.error(new Error('abort_upload_task_no_key')));
	    wholeMultipartList.call(self, {
	      Bucket: Bucket,
	      Region: Region,
	      Key: Key,
	      calledBySdk: 'abortUploadTask'
	    }, function (err, data) {
	      if (err) return callback(err);
	      ep.emit('get_abort_array', data.UploadList || []);
	    });
	  } else if (Level === 'task') {
	    // 单个任务级别的任务抛弃，抛弃指定 UploadId 的上传任务
	    if (!UploadId) return callback(util.error(new Error('abort_upload_task_no_id')));
	    if (!Key) return callback(util.error(new Error('abort_upload_task_no_key')));
	    ep.emit('get_abort_array', [{
	      Key: Key,
	      UploadId: UploadId
	    }]);
	  } else {
	    return callback(util.error(new Error('abort_unknown_level')));
	  }
	} // 批量抛弃分块上传任务


	function abortUploadTaskArray(params, callback) {
	  var Bucket = params.Bucket;
	  var Region = params.Region;
	  var Key = params.Key;
	  var AbortArray = params.AbortArray;
	  var AsyncLimit = params.AsyncLimit || 1;
	  var self = this;
	  var index = 0;
	  var resultList = new Array(AbortArray.length);
	  Async.eachLimit(AbortArray, AsyncLimit, function (AbortItem, nextItem) {
	    var eachIndex = index;

	    if (Key && Key !== AbortItem.Key) {
	      resultList[eachIndex] = {
	        error: {
	          KeyNotMatch: true
	        }
	      };
	      nextItem(null);
	      return;
	    }

	    var UploadId = AbortItem.UploadId || AbortItem.UploadID;
	    self.multipartAbort({
	      Bucket: Bucket,
	      Region: Region,
	      Key: AbortItem.Key,
	      Headers: params.Headers,
	      UploadId: UploadId
	    }, function (err) {
	      var task = {
	        Bucket: Bucket,
	        Region: Region,
	        Key: AbortItem.Key,
	        UploadId: UploadId
	      };
	      resultList[eachIndex] = {
	        error: err,
	        task: task
	      };
	      nextItem(null);
	    });
	    index++;
	  }, function (err) {
	    if (err) return callback(err);
	    var successList = [];
	    var errorList = [];

	    for (var i = 0, len = resultList.length; i < len; i++) {
	      var item = resultList[i];

	      if (item['task']) {
	        if (item['error']) {
	          errorList.push(item['task']);
	        } else {
	          successList.push(item['task']);
	        }
	      }
	    }

	    return callback(null, {
	      successList: successList,
	      errorList: errorList
	    });
	  });
	} // 高级上传


	function uploadFile(params, callback) {
	  var self = this; // 判断多大的文件使用分片上传

	  var SliceSize = params.SliceSize === undefined ? self.options.SliceSize : params.SliceSize;
	  var taskList = [];
	  var Body = params.Body;
	  var FileSize = Body.size || Body.length || 0;
	  var fileInfo = {
	    TaskId: ''
	  }; // 上传链路

	  if (self.options.EnableTracker) {
	    var accelerate = self.options.UseAccelerate || typeof self.options.Domain === 'string' && self.options.Domain.includes('accelerate.');
	    params.tracker = new Tracker({
	      bucket: params.Bucket,
	      region: params.Region,
	      apiName: 'uploadFile',
	      fileKey: params.Key,
	      fileSize: FileSize,
	      accelerate: accelerate,
	      deepTracker: self.options.DeepTracker,
	      customId: self.options.CustomId,
	      delay: self.options.TrackerDelay
	    });
	  } // 整理 option，用于返回给回调


	  util.each(params, function (v, k) {
	    if (_typeof(v) !== 'object' && typeof v !== 'function') {
	      fileInfo[k] = v;
	    }
	  }); // 处理文件 TaskReady

	  var _onTaskReady = params.onTaskReady;

	  var onTaskReady = function onTaskReady(tid) {
	    fileInfo.TaskId = tid;
	    _onTaskReady && _onTaskReady(tid);
	  };

	  params.onTaskReady = onTaskReady; // 添加上传任务,超过阈值使用分块上传，小于等于则简单上传

	  var api = FileSize > SliceSize ? 'sliceUploadFile' : 'putObject'; // 处理文件完成

	  var _onFileFinish = params.onFileFinish;

	  var onFileFinish = function onFileFinish(err, data) {
	    // 格式化上报参数并上报
	    params.tracker && params.tracker.formatResult(err, data);
	    _onFileFinish && _onFileFinish(err, data, fileInfo);
	    callback && callback(err, data);
	  };

	  taskList.push({
	    api: api,
	    params: params,
	    callback: onFileFinish
	  });

	  self._addTasks(taskList);
	} // 批量上传文件


	function uploadFiles(params, callback) {
	  var self = this; // 判断多大的文件使用分片上传

	  var SliceSize = params.SliceSize === undefined ? self.options.SliceSize : params.SliceSize; // 汇总返回进度

	  var TotalSize = 0;
	  var TotalFinish = 0;
	  var onTotalProgress = util.throttleOnProgress.call(self, TotalFinish, params.onProgress); // 汇总返回回调

	  var unFinishCount = params.files.length;
	  var _onTotalFileFinish = params.onFileFinish;
	  var resultList = Array(unFinishCount);

	  var onTotalFileFinish = function onTotalFileFinish(err, data, options) {
	    onTotalProgress(null, true);
	    _onTotalFileFinish && _onTotalFileFinish(err, data, options);
	    resultList[options.Index] = {
	      options: options,
	      error: err,
	      data: data
	    };

	    if (--unFinishCount <= 0 && callback) {
	      callback(null, {
	        files: resultList
	      });
	    }
	  }; // 开始处理每个文件


	  var taskList = [];
	  util.each(params.files, function (fileParams, index) {
	    (function () {
	      // 对齐 nodejs 缩进
	      var Body = fileParams.Body;
	      var FileSize = Body.size || Body.length || 0;
	      var fileInfo = {
	        Index: index,
	        TaskId: ''
	      }; // 如果 批量上传的 Key 是 / 开头，强制去掉第一个 /

	      if (!self.options.UseRawKey && fileParams.Key && fileParams.Key.substr(0, 1) === '/') {
	        fileParams.Key = fileParams.Key.substr(1);
	      } // 更新文件总大小


	      TotalSize += FileSize; // 单个文件上传链路

	      if (self.options.EnableTracker) {
	        var accelerate = self.options.UseAccelerate || typeof self.options.Domain === 'string' && self.options.Domain.includes('accelerate.');
	        fileParams.tracker = new Tracker({
	          bucket: fileParams.Bucket,
	          region: fileParams.Region,
	          apiName: 'uploadFiles',
	          fileKey: fileParams.Key,
	          fileSize: FileSize,
	          accelerate: accelerate,
	          deepTracker: self.options.DeepTracker,
	          customId: self.options.CustomId,
	          delay: self.options.TrackerDelay
	        });
	      } // 整理 option，用于返回给回调


	      util.each(fileParams, function (v, k) {
	        if (_typeof(v) !== 'object' && typeof v !== 'function') {
	          fileInfo[k] = v;
	        }
	      }); // 处理单个文件 TaskReady

	      var _onTaskReady = fileParams.onTaskReady;

	      var onTaskReady = function onTaskReady(tid) {
	        fileInfo.TaskId = tid;
	        _onTaskReady && _onTaskReady(tid);
	      };

	      fileParams.onTaskReady = onTaskReady; // 处理单个文件进度

	      var PreAddSize = 0;
	      var _onProgress = fileParams.onProgress;

	      var onProgress = function onProgress(info) {
	        TotalFinish = TotalFinish - PreAddSize + info.loaded;
	        PreAddSize = info.loaded;
	        _onProgress && _onProgress(info);
	        onTotalProgress({
	          loaded: TotalFinish,
	          total: TotalSize
	        });
	      };

	      fileParams.onProgress = onProgress; // 添加上传任务

	      var api = FileSize > SliceSize ? 'sliceUploadFile' : 'putObject'; // 处理单个文件完成

	      var _onFileFinish = fileParams.onFileFinish;

	      var onFileFinish = function onFileFinish(err, data) {
	        // 格式化上报参数并上报
	        fileParams.tracker && fileParams.tracker.formatResult(err, data);
	        _onFileFinish && _onFileFinish(err, data);
	        onTotalFileFinish && onTotalFileFinish(err, data, fileInfo);
	      };

	      taskList.push({
	        api: api,
	        params: fileParams,
	        callback: onFileFinish
	      });
	    })();
	  });

	  self._addTasks(taskList);
	} // 分片复制文件


	function sliceCopyFile(params, callback) {
	  var ep = new EventProxy();
	  var self = this;
	  var Bucket = params.Bucket;
	  var Region = params.Region;
	  var Key = params.Key;
	  var CopySource = params.CopySource;
	  var m = util.getSourceParams.call(this, CopySource);

	  if (!m) {
	    callback(util.error(new Error('CopySource format error')));
	    return;
	  }

	  var SourceBucket = m.Bucket;
	  var SourceRegion = m.Region;
	  var SourceKey = decodeURIComponent(m.Key);
	  var CopySliceSize = params.CopySliceSize === undefined ? self.options.CopySliceSize : params.CopySliceSize;
	  CopySliceSize = Math.max(0, CopySliceSize);
	  var ChunkSize = params.CopyChunkSize || this.options.CopyChunkSize;
	  var ChunkParallel = this.options.CopyChunkParallelLimit;
	  var ChunkRetryTimes = this.options.ChunkRetryTimes + 1;
	  var ChunkCount = 0;
	  var FinishSize = 0;
	  var FileSize;
	  var onProgress;
	  var SourceResHeaders = {};
	  var SourceHeaders = {};
	  var TargetHeader = {}; // 分片复制完成，开始 multipartComplete 操作

	  ep.on('copy_slice_complete', function (UploadData) {
	    util.each(params.Headers, function (val, k) {
	      if (k.toLowerCase().indexOf('x-cos-meta-') === 0) ;
	    });
	    var Parts = util.map(UploadData.PartList, function (item) {
	      return {
	        PartNumber: item.PartNumber,
	        ETag: item.ETag
	      };
	    }); // 完成上传的请求也做重试

	    Async.retry(ChunkRetryTimes, function (tryCallback) {
	      self.multipartComplete({
	        Bucket: Bucket,
	        Region: Region,
	        Key: Key,
	        UploadId: UploadData.UploadId,
	        Parts: Parts,
	        calledBySdk: 'sliceCopyFile'
	      }, tryCallback);
	    }, function (err, data) {
	      session.removeUsing(UploadData.UploadId); // 标记 UploadId 没被使用了，因为复制没提供重试，所以只要出错，就是 UploadId 停用了。

	      if (err) {
	        onProgress(null, true);
	        return callback(err);
	      }

	      session.removeUploadId(UploadData.UploadId);
	      onProgress({
	        loaded: FileSize,
	        total: FileSize
	      }, true);
	      callback(null, data);
	    });
	  });
	  ep.on('get_copy_data_finish', function (UploadData) {
	    // 处理 UploadId 缓存
	    var uuid = session.getCopyFileId(CopySource, SourceResHeaders, ChunkSize, Bucket, Key);
	    uuid && session.saveUploadId(uuid, UploadData.UploadId, self.options.UploadIdCacheLimit); // 缓存 UploadId

	    session.setUsing(UploadData.UploadId); // 标记 UploadId 为正在使用

	    var needCopySlices = util.filter(UploadData.PartList, function (SliceItem) {
	      if (SliceItem['Uploaded']) {
	        FinishSize += SliceItem['PartNumber'] >= ChunkCount ? FileSize % ChunkSize || ChunkSize : ChunkSize;
	      }

	      return !SliceItem['Uploaded'];
	    });
	    Async.eachLimit(needCopySlices, ChunkParallel, function (SliceItem, asyncCallback) {
	      var PartNumber = SliceItem.PartNumber;
	      var CopySourceRange = SliceItem.CopySourceRange;
	      var currentSize = SliceItem.end - SliceItem.start;
	      Async.retry(ChunkRetryTimes, function (tryCallback) {
	        copySliceItem.call(self, {
	          Bucket: Bucket,
	          Region: Region,
	          Key: Key,
	          CopySource: CopySource,
	          UploadId: UploadData.UploadId,
	          PartNumber: PartNumber,
	          CopySourceRange: CopySourceRange
	        }, tryCallback);
	      }, function (err, data) {
	        if (err) return asyncCallback(err);
	        FinishSize += currentSize;
	        onProgress({
	          loaded: FinishSize,
	          total: FileSize
	        });
	        SliceItem.ETag = data.ETag;
	        asyncCallback(err || null, data);
	      });
	    }, function (err) {
	      if (err) {
	        session.removeUsing(UploadData.UploadId); // 标记 UploadId 没被使用了，因为复制没提供重试，所以只要出错，就是 UploadId 停用了。

	        onProgress(null, true);
	        return callback(err);
	      }

	      ep.emit('copy_slice_complete', UploadData);
	    });
	  });
	  ep.on('get_chunk_size_finish', function () {
	    var createNewUploadId = function createNewUploadId() {
	      self.multipartInit({
	        Bucket: Bucket,
	        Region: Region,
	        Key: Key,
	        Headers: TargetHeader
	      }, function (err, data) {
	        if (err) return callback(err);
	        params.UploadId = data.UploadId;
	        ep.emit('get_copy_data_finish', {
	          UploadId: params.UploadId,
	          PartList: params.PartList
	        });
	      });
	    }; // 在本地找可用的 UploadId


	    var uuid = session.getCopyFileId(CopySource, SourceResHeaders, ChunkSize, Bucket, Key);
	    var LocalUploadIdList = session.getUploadIdList(uuid);
	    if (!uuid || !LocalUploadIdList) return createNewUploadId();

	    var next = function next(index) {
	      // 如果本地找不到可用 UploadId，再一个个遍历校验远端
	      if (index >= LocalUploadIdList.length) return createNewUploadId();
	      var UploadId = LocalUploadIdList[index]; // 如果正在被使用，跳过

	      if (session.using[UploadId]) return next(index + 1); // 判断 UploadId 是否存在线上

	      wholeMultipartListPart.call(self, {
	        Bucket: Bucket,
	        Region: Region,
	        Key: Key,
	        UploadId: UploadId
	      }, function (err, PartListData) {
	        if (err) {
	          // 如果 UploadId 获取会出错，跳过并删除
	          session.removeUploadId(UploadId);
	          next(index + 1);
	        } else {
	          // 如果异步回来 UploadId 已经被用了，也跳过
	          if (session.using[UploadId]) return next(index + 1); // 找到可用 UploadId

	          var finishETagMap = {};
	          var offset = 0;
	          util.each(PartListData.PartList, function (PartItem) {
	            var size = parseInt(PartItem.Size);
	            var end = offset + size - 1;
	            finishETagMap[PartItem.PartNumber + '|' + offset + '|' + end] = PartItem.ETag;
	            offset += size;
	          });
	          util.each(params.PartList, function (PartItem) {
	            var ETag = finishETagMap[PartItem.PartNumber + '|' + PartItem.start + '|' + PartItem.end];

	            if (ETag) {
	              PartItem.ETag = ETag;
	              PartItem.Uploaded = true;
	            }
	          });
	          ep.emit('get_copy_data_finish', {
	            UploadId: UploadId,
	            PartList: params.PartList
	          });
	        }
	      });
	    };

	    next(0);
	  });
	  ep.on('get_file_size_finish', function () {
	    // 控制分片大小
	    (function () {
	      var SIZE = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 1024 * 2, 1024 * 4, 1024 * 5];
	      var AutoChunkSize = 1024 * 1024;

	      for (var i = 0; i < SIZE.length; i++) {
	        AutoChunkSize = SIZE[i] * 1024 * 1024;
	        if (FileSize / AutoChunkSize <= self.options.MaxPartNumber) break;
	      }

	      params.ChunkSize = ChunkSize = Math.max(ChunkSize, AutoChunkSize);
	      ChunkCount = Math.ceil(FileSize / ChunkSize);
	      var list = [];

	      for (var partNumber = 1; partNumber <= ChunkCount; partNumber++) {
	        var start = (partNumber - 1) * ChunkSize;
	        var end = partNumber * ChunkSize < FileSize ? partNumber * ChunkSize - 1 : FileSize - 1;
	        var item = {
	          PartNumber: partNumber,
	          start: start,
	          end: end,
	          CopySourceRange: 'bytes=' + start + '-' + end
	        };
	        list.push(item);
	      }

	      params.PartList = list;
	    })();

	    if (params.Headers['x-cos-metadata-directive'] === 'Replaced') {
	      TargetHeader = params.Headers;
	    } else {
	      TargetHeader = SourceHeaders;
	    }

	    TargetHeader['x-cos-storage-class'] = params.Headers['x-cos-storage-class'] || SourceHeaders['x-cos-storage-class'];
	    TargetHeader = util.clearKey(TargetHeader);
	    /**
	     * 对于归档存储的对象，如果未恢复副本，则不允许 Copy
	     */

	    if (SourceHeaders['x-cos-storage-class'] === 'ARCHIVE' || SourceHeaders['x-cos-storage-class'] === 'DEEP_ARCHIVE') {
	      var restoreHeader = SourceHeaders['x-cos-restore'];

	      if (!restoreHeader || restoreHeader === 'ongoing-request="true"') {
	        callback(util.error(new Error('Unrestored archive object is not allowed to be copied')));
	        return;
	      }
	    }
	    /**
	     * 去除一些无用的头部，规避 multipartInit 出错
	     * 这些头部通常是在 putObjectCopy 时才使用
	     */


	    delete TargetHeader['x-cos-copy-source'];
	    delete TargetHeader['x-cos-metadata-directive'];
	    delete TargetHeader['x-cos-copy-source-If-Modified-Since'];
	    delete TargetHeader['x-cos-copy-source-If-Unmodified-Since'];
	    delete TargetHeader['x-cos-copy-source-If-Match'];
	    delete TargetHeader['x-cos-copy-source-If-None-Match'];
	    ep.emit('get_chunk_size_finish');
	  }); // 获取远端复制源文件的大小

	  self.headObject({
	    Bucket: SourceBucket,
	    Region: SourceRegion,
	    Key: SourceKey
	  }, function (err, data) {
	    if (err) {
	      if (err.statusCode && err.statusCode === 404) {
	        callback(util.error(err, {
	          ErrorStatus: SourceKey + ' Not Exist'
	        }));
	      } else {
	        callback(err);
	      }

	      return;
	    }

	    FileSize = params.FileSize = data.headers['content-length'];

	    if (FileSize === undefined || !FileSize) {
	      callback(util.error(new Error('get Content-Length error, please add "Content-Length" to CORS ExposeHeader setting.（ 获取Content-Length失败，请在CORS ExposeHeader设置中添加Content-Length，请参考文档：https://cloud.tencent.com/document/product/436/13318 ）')));
	      return;
	    }

	    onProgress = util.throttleOnProgress.call(self, FileSize, params.onProgress); // 开始上传

	    if (FileSize <= CopySliceSize) {
	      if (!params.Headers['x-cos-metadata-directive']) {
	        params.Headers['x-cos-metadata-directive'] = 'Copy';
	      }

	      self.putObjectCopy(params, function (err, data) {
	        if (err) {
	          onProgress(null, true);
	          return callback(err);
	        }

	        onProgress({
	          loaded: FileSize,
	          total: FileSize
	        }, true);
	        callback(err, data);
	      });
	    } else {
	      var resHeaders = data.headers;
	      SourceResHeaders = resHeaders;
	      SourceHeaders = {
	        'Cache-Control': resHeaders['cache-control'],
	        'Content-Disposition': resHeaders['content-disposition'],
	        'Content-Encoding': resHeaders['content-encoding'],
	        'Content-Type': resHeaders['content-type'],
	        Expires: resHeaders['expires'],
	        'x-cos-storage-class': resHeaders['x-cos-storage-class']
	      };
	      util.each(resHeaders, function (v, k) {
	        var metaPrefix = 'x-cos-meta-';

	        if (k.indexOf(metaPrefix) === 0 && k.length > metaPrefix.length) {
	          SourceHeaders[k] = v;
	        }
	      });
	      ep.emit('get_file_size_finish');
	    }
	  });
	} // 复制指定分片


	function copySliceItem(params, callback) {
	  var TaskId = params.TaskId;
	  var Bucket = params.Bucket;
	  var Region = params.Region;
	  var Key = params.Key;
	  var CopySource = params.CopySource;
	  var UploadId = params.UploadId;
	  var PartNumber = params.PartNumber * 1;
	  var CopySourceRange = params.CopySourceRange;
	  var ChunkRetryTimes = this.options.ChunkRetryTimes + 1;
	  var self = this;
	  Async.retry(ChunkRetryTimes, function (tryCallback) {
	    self.uploadPartCopy({
	      TaskId: TaskId,
	      Bucket: Bucket,
	      Region: Region,
	      Key: Key,
	      CopySource: CopySource,
	      UploadId: UploadId,
	      PartNumber: PartNumber,
	      CopySourceRange: CopySourceRange
	    }, function (err, data) {
	      tryCallback(err || null, data);
	    });
	  }, function (err, data) {
	    return callback(err, data);
	  });
	}

	var API_MAP = {
	  sliceUploadFile: sliceUploadFile,
	  abortUploadTask: abortUploadTask,
	  uploadFile: uploadFile,
	  uploadFiles: uploadFiles,
	  sliceCopyFile: sliceCopyFile
	};

	module.exports.init = function (COS, task) {
	  task.transferToTaskMethod(API_MAP, 'sliceUploadFile');
	  util.each(API_MAP, function (fn, apiName) {
	    COS.prototype[apiName] = util.apiWrapper(apiName, fn);
	  });
	};

	/***/ }),

	/***/ "./src/async.js":
	/*!**********************!*\
	  !*** ./src/async.js ***!
	  \**********************/
	/*! no static exports found */
	/***/ (function(module, exports) {

	var eachLimit = function eachLimit(arr, limit, iterator, callback) {
	  callback = callback || function () {};

	  if (!arr.length || limit <= 0) {
	    return callback();
	  }

	  var completed = 0;
	  var started = 0;
	  var running = 0;

	  (function replenish() {
	    if (completed >= arr.length) {
	      return callback();
	    }

	    while (running < limit && started < arr.length) {
	      started += 1;
	      running += 1;
	      iterator(arr[started - 1], function (err) {
	        if (err) {
	          callback(err);

	          callback = function callback() {};
	        } else {
	          completed += 1;
	          running -= 1;

	          if (completed >= arr.length) {
	            callback();
	          } else {
	            replenish();
	          }
	        }
	      });
	    }
	  })();
	};

	var retry = function retry(times, iterator, callback) {
	  var next = function next(index) {
	    iterator(function (err, data) {
	      if (err && index < times) {
	        next(index + 1);
	      } else {
	        callback(err, data);
	      }
	    });
	  };

	  if (times < 1) {
	    callback();
	  } else {
	    next(1);
	  }
	};

	var async = {
	  eachLimit: eachLimit,
	  retry: retry
	};
	module.exports = async;

	/***/ }),

	/***/ "./src/base.js":
	/*!*********************!*\
	  !*** ./src/base.js ***!
	  \*********************/
	/*! no static exports found */
	/***/ (function(module, exports, __webpack_require__) {

	var _typeof = __webpack_require__(/*! @babel/runtime/helpers/typeof */ "./node_modules/@babel/runtime/helpers/typeof.js");

	var REQUEST = __webpack_require__(/*! ../lib/request */ "./lib/request.js");

	var util = __webpack_require__(/*! ./util */ "./src/util.js"); // Bucket 相关

	/**
	 * 获取用户的 bucket 列表
	 * @param  {Object}  params         回调函数，必须，下面为参数列表
	 * 无特殊参数
	 * @param  {Function}  callback     回调函数，必须
	 */


	function getService(params, callback) {
	  if (typeof params === 'function') {
	    callback = params;
	    params = {};
	  }

	  var protocol = this.options.Protocol || (util.isBrowser && (typeof location === "undefined" ? "undefined" : _typeof(location)) === 'object' && location.protocol === 'http:' ? 'http:' : 'https:');
	  var domain = this.options.ServiceDomain;
	  var appId = params.AppId || this.options.appId;
	  var region = params.Region;

	  if (domain) {
	    domain = domain.replace(/\{\{AppId\}\}/gi, appId || '').replace(/\{\{Region\}\}/gi, region || '').replace(/\{\{.*?\}\}/gi, '');

	    if (!/^[a-zA-Z]+:\/\//.test(domain)) {
	      domain = protocol + '//' + domain;
	    }

	    if (domain.slice(-1) === '/') {
	      domain = domain.slice(0, -1);
	    }
	  } else if (region) {
	    domain = protocol + '//cos.' + region + '.myqcloud.com';
	  } else {
	    domain = protocol + '//service.cos.myqcloud.com';
	  }

	  var SignHost = '';
	  var standardHost = region ? 'cos.' + region + '.myqcloud.com' : 'service.cos.myqcloud.com';
	  var urlHost = domain.replace(/^https?:\/\/([^/]+)(\/.*)?$/, '$1');
	  if (standardHost === urlHost) SignHost = standardHost;
	  submitRequest.call(this, {
	    Action: 'name/cos:GetService',
	    url: domain,
	    method: 'GET',
	    headers: params.Headers,
	    SignHost: SignHost
	  }, function (err, data) {
	    if (err) return callback(err);
	    var buckets = data && data.ListAllMyBucketsResult && data.ListAllMyBucketsResult.Buckets && data.ListAllMyBucketsResult.Buckets.Bucket || [];
	    buckets = util.isArray(buckets) ? buckets : [buckets];
	    var owner = data && data.ListAllMyBucketsResult && data.ListAllMyBucketsResult.Owner || {};
	    callback(null, {
	      Buckets: buckets,
	      Owner: owner,
	      statusCode: data.statusCode,
	      headers: data.headers
	    });
	  });
	}
	/**
	 * 创建 Bucket，并初始化访问权限
	 * @param  {Object}  params                         参数对象，必须
	 *     @param  {String}  params.Bucket              Bucket名称，必须
	 *     @param  {String}  params.Region              地域名称，必须
	 *     @param  {String}  params.ACL                 用户自定义文件权限，可以设置：private，public-read；默认值：private，非必须
	 *     @param  {String}  params.GrantRead           赋予被授权者读的权限，格式x-cos-grant-read: uin=" ",uin=" "，非必须
	 *     @param  {String}  params.GrantWrite          赋予被授权者写的权限，格式x-cos-grant-write: uin=" ",uin=" "，非必须
	 *     @param  {String}  params.GrantFullControl    赋予被授权者读写权限，格式x-cos-grant-full-control: uin=" ",uin=" "，非必须
	 * @param  {Function}  callback                     回调函数，必须
	 * @return  {Object}  err                           请求失败的错误，如果请求成功，则为空。https://cloud.tencent.com/document/product/436/7730
	 * @return  {Object}  data                          返回的数据
	 *     @return  {String}  data.Location             操作地址
	 */


	function putBucket(params, callback) {
	  var self = this;
	  var xml = '';

	  if (params['BucketAZConfig']) {
	    var CreateBucketConfiguration = {
	      BucketAZConfig: params.BucketAZConfig
	    };
	    xml = util.json2xml({
	      CreateBucketConfiguration: CreateBucketConfiguration
	    });
	  }

	  submitRequest.call(this, {
	    Action: 'name/cos:PutBucket',
	    method: 'PUT',
	    Bucket: params.Bucket,
	    Region: params.Region,
	    headers: params.Headers,
	    body: xml
	  }, function (err, data) {
	    if (err) return callback(err);
	    var url = getUrl({
	      protocol: self.options.Protocol,
	      domain: self.options.Domain,
	      bucket: params.Bucket,
	      region: params.Region,
	      isLocation: true
	    });
	    callback(null, {
	      Location: url,
	      statusCode: data.statusCode,
	      headers: data.headers
	    });
	  });
	}
	/**
	 * 查看是否存在该Bucket，是否有权限访问
	 * @param  {Object}  params                     参数对象，必须
	 *     @param  {String}  params.Bucket          Bucket名称，必须
	 *     @param  {String}  params.Region          地域名称，必须
	 * @param  {Function}  callback                 回调函数，必须
	 * @return  {Object}  err                       请求失败的错误，如果请求成功，则为空。https://cloud.tencent.com/document/product/436/7730
	 * @return  {Object}  data                      返回的数据
	 *     @return  {Boolean}  data.BucketExist     Bucket是否存在
	 *     @return  {Boolean}  data.BucketAuth      是否有 Bucket 的访问权限
	 */


	function headBucket(params, callback) {
	  submitRequest.call(this, {
	    Action: 'name/cos:HeadBucket',
	    Bucket: params.Bucket,
	    Region: params.Region,
	    headers: params.Headers,
	    method: 'HEAD'
	  }, callback);
	}
	/**
	 * 获取 Bucket 下的 object 列表
	 * @param  {Object}  params                         参数对象，必须
	 *     @param  {String}  params.Bucket              Bucket名称，必须
	 *     @param  {String}  params.Region              地域名称，必须
	 *     @param  {String}  params.Prefix              前缀匹配，用来规定返回的文件前缀地址，非必须
	 *     @param  {String}  params.Delimiter           定界符为一个符号，如果有Prefix，则将Prefix到delimiter之间的相同路径归为一类，非必须
	 *     @param  {String}  params.Marker              默认以UTF-8二进制顺序列出条目，所有列出条目从marker开始，非必须
	 *     @param  {String}  params.MaxKeys             单次返回最大的条目数量，默认1000，非必须
	 *     @param  {String}  params.EncodingType        规定返回值的编码方式，非必须
	 * @param  {Function}  callback                     回调函数，必须
	 * @return  {Object}  err                           请求失败的错误，如果请求成功，则为空。https://cloud.tencent.com/document/product/436/7730
	 * @return  {Object}  data                          返回的数据
	 *     @return  {Object}  data.ListBucketResult     返回的 object 列表信息
	 */


	function getBucket(params, callback) {
	  var reqParams = {};
	  reqParams['prefix'] = params['Prefix'] || '';
	  reqParams['delimiter'] = params['Delimiter'];
	  reqParams['marker'] = params['Marker'];
	  reqParams['max-keys'] = params['MaxKeys'];
	  reqParams['encoding-type'] = params['EncodingType'];
	  submitRequest.call(this, {
	    Action: 'name/cos:GetBucket',
	    ResourceKey: reqParams['prefix'],
	    method: 'GET',
	    Bucket: params.Bucket,
	    Region: params.Region,
	    headers: params.Headers,
	    qs: reqParams
	  }, function (err, data) {
	    if (err) return callback(err);
	    var ListBucketResult = data.ListBucketResult || {};
	    var Contents = ListBucketResult.Contents || [];
	    var CommonPrefixes = ListBucketResult.CommonPrefixes || [];
	    Contents = util.isArray(Contents) ? Contents : [Contents];
	    CommonPrefixes = util.isArray(CommonPrefixes) ? CommonPrefixes : [CommonPrefixes];
	    var result = util.clone(ListBucketResult);
	    util.extend(result, {
	      Contents: Contents,
	      CommonPrefixes: CommonPrefixes,
	      statusCode: data.statusCode,
	      headers: data.headers
	    });
	    callback(null, result);
	  });
	}
	/**
	 * 删除 Bucket
	 * @param  {Object}  params                 参数对象，必须
	 *     @param  {String}  params.Bucket      Bucket名称，必须
	 *     @param  {String}  params.Region      地域名称，必须
	 * @param  {Function}  callback             回调函数，必须
	 * @return  {Object}  err                   请求失败的错误，如果请求成功，则为空。https://cloud.tencent.com/document/product/436/7730
	 * @return  {Object}  data                  返回的数据
	 *     @return  {String}  data.Location     操作地址
	 */


	function deleteBucket(params, callback) {
	  submitRequest.call(this, {
	    Action: 'name/cos:DeleteBucket',
	    Bucket: params.Bucket,
	    Region: params.Region,
	    headers: params.Headers,
	    method: 'DELETE'
	  }, function (err, data) {
	    if (err && err.statusCode === 204) {
	      return callback(null, {
	        statusCode: err.statusCode
	      });
	    } else if (err) {
	      return callback(err);
	    }

	    callback(null, {
	      statusCode: data.statusCode,
	      headers: data.headers
	    });
	  });
	}
	/**
	 * 设置 Bucket 的 权限列表
	 * @param  {Object}  params                         参数对象，必须
	 *     @param  {String}  params.Bucket              Bucket名称，必须
	 *     @param  {String}  params.Region              地域名称，必须
	 *     @param  {String}  params.ACL                 用户自定义文件权限，可以设置：private，public-read；默认值：private，非必须
	 *     @param  {String}  params.GrantRead           赋予被授权者读的权限，格式x-cos-grant-read: uin=" ",uin=" "，非必须
	 *     @param  {String}  params.GrantWrite          赋予被授权者写的权限，格式x-cos-grant-write: uin=" ",uin=" "，非必须
	 *     @param  {String}  params.GrantFullControl    赋予被授权者读写权限，格式x-cos-grant-full-control: uin=" ",uin=" "，非必须
	 * @param  {Function}  callback                     回调函数，必须
	 * @return  {Object}  err                           请求失败的错误，如果请求成功，则为空。https://cloud.tencent.com/document/product/436/7730
	 * @return  {Object}  data                          返回的数据
	 */


	function putBucketAcl(params, callback) {
	  var headers = params.Headers;
	  var xml = '';

	  if (params['AccessControlPolicy']) {
	    var AccessControlPolicy = util.clone(params['AccessControlPolicy'] || {});
	    var Grants = AccessControlPolicy.Grants || AccessControlPolicy.Grant;
	    Grants = util.isArray(Grants) ? Grants : [Grants];
	    delete AccessControlPolicy.Grant;
	    delete AccessControlPolicy.Grants;
	    AccessControlPolicy.AccessControlList = {
	      Grant: Grants
	    };
	    xml = util.json2xml({
	      AccessControlPolicy: AccessControlPolicy
	    });
	    headers['Content-Type'] = 'application/xml';
	    headers['Content-MD5'] = util.b64(util.md5(xml));
	  } // Grant Header 去重


	  util.each(headers, function (val, key) {
	    if (key.indexOf('x-cos-grant-') === 0) {
	      headers[key] = uniqGrant(headers[key]);
	    }
	  });
	  submitRequest.call(this, {
	    Action: 'name/cos:PutBucketACL',
	    method: 'PUT',
	    Bucket: params.Bucket,
	    Region: params.Region,
	    headers: headers,
	    action: 'acl',
	    body: xml
	  }, function (err, data) {
	    if (err) return callback(err);
	    callback(null, {
	      statusCode: data.statusCode,
	      headers: data.headers
	    });
	  });
	}
	/**
	 * 获取 Bucket 的 权限列表
	 * @param  {Object}  params                         参数对象，必须
	 *     @param  {String}  params.Bucket              Bucket名称，必须
	 *     @param  {String}  params.Region              地域名称，必须
	 * @param  {Function}  callback                     回调函数，必须
	 * @return  {Object}  err                           请求失败的错误，如果请求成功，则为空。https://cloud.tencent.com/document/product/436/7730
	 * @return  {Object}  data                          返回的数据
	 *     @return  {Object}  data.AccessControlPolicy  访问权限信息
	 */


	function getBucketAcl(params, callback) {
	  submitRequest.call(this, {
	    Action: 'name/cos:GetBucketACL',
	    method: 'GET',
	    Bucket: params.Bucket,
	    Region: params.Region,
	    headers: params.Headers,
	    action: 'acl'
	  }, function (err, data) {
	    if (err) return callback(err);
	    var AccessControlPolicy = data.AccessControlPolicy || {};
	    var Owner = AccessControlPolicy.Owner || {};
	    var Grant = AccessControlPolicy.AccessControlList.Grant || [];
	    Grant = util.isArray(Grant) ? Grant : [Grant];
	    var result = decodeAcl(AccessControlPolicy);

	    if (data.headers && data.headers['x-cos-acl']) {
	      result.ACL = data.headers['x-cos-acl'];
	    }

	    result = util.extend(result, {
	      Owner: Owner,
	      Grants: Grant,
	      statusCode: data.statusCode,
	      headers: data.headers
	    });
	    callback(null, result);
	  });
	}
	/**
	 * 设置 Bucket 的 跨域设置
	 * @param  {Object}  params                             参数对象，必须
	 *     @param  {String}  params.Bucket                  Bucket名称，必须
	 *     @param  {String}  params.Region                  地域名称，必须
	 *     @param  {Object}  params.CORSConfiguration       相关的跨域设置，必须
	 * @param  {Array}  params.CORSConfiguration.CORSRules  对应的跨域规则
	 * @param  {Function}  callback                         回调函数，必须
	 * @return  {Object}  err                               请求失败的错误，如果请求成功，则为空。https://cloud.tencent.com/document/product/436/7730
	 * @return  {Object}  data                              返回的数据
	 */


	function putBucketCors(params, callback) {
	  var CORSConfiguration = params['CORSConfiguration'] || {};
	  var CORSRules = CORSConfiguration['CORSRules'] || params['CORSRules'] || [];
	  CORSRules = util.clone(util.isArray(CORSRules) ? CORSRules : [CORSRules]);
	  util.each(CORSRules, function (rule) {
	    util.each(['AllowedOrigin', 'AllowedHeader', 'AllowedMethod', 'ExposeHeader'], function (key) {
	      var sKey = key + 's';
	      var val = rule[sKey] || rule[key] || [];
	      delete rule[sKey];
	      rule[key] = util.isArray(val) ? val : [val];
	    });
	  });
	  var Conf = {
	    CORSRule: CORSRules
	  };
	  if (params.ResponseVary) Conf.ResponseVary = params.ResponseVary;
	  var xml = util.json2xml({
	    CORSConfiguration: Conf
	  });
	  var headers = params.Headers;
	  headers['Content-Type'] = 'application/xml';
	  headers['Content-MD5'] = util.b64(util.md5(xml));
	  submitRequest.call(this, {
	    Action: 'name/cos:PutBucketCORS',
	    method: 'PUT',
	    Bucket: params.Bucket,
	    Region: params.Region,
	    body: xml,
	    action: 'cors',
	    headers: headers
	  }, function (err, data) {
	    if (err) return callback(err);
	    callback(null, {
	      statusCode: data.statusCode,
	      headers: data.headers
	    });
	  });
	}
	/**
	 * 获取 Bucket 的 跨域设置
	 * @param  {Object}  params                         参数对象，必须
	 *     @param  {String}  params.Bucket              Bucket名称，必须
	 *     @param  {String}  params.Region              地域名称，必须
	 * @param  {Function}  callback                     回调函数，必须
	 * @return  {Object}  err                           请求失败的错误，如果请求成功，则为空。https://cloud.tencent.com/document/product/436/7730
	 * @return  {Object}  data                          返回的数据
	 *     @return  {Object}  data.CORSRules            Bucket的跨域设置
	 */


	function getBucketCors(params, callback) {
	  submitRequest.call(this, {
	    Action: 'name/cos:GetBucketCORS',
	    method: 'GET',
	    Bucket: params.Bucket,
	    Region: params.Region,
	    headers: params.Headers,
	    action: 'cors'
	  }, function (err, data) {
	    if (err) {
	      if (err.statusCode === 404 && err.error && err.error.Code === 'NoSuchCORSConfiguration') {
	        var result = {
	          CORSRules: [],
	          statusCode: err.statusCode
	        };
	        err.headers && (result.headers = err.headers);
	        callback(null, result);
	      } else {
	        callback(err);
	      }

	      return;
	    }

	    var CORSConfiguration = data.CORSConfiguration || {};
	    var CORSRules = CORSConfiguration.CORSRules || CORSConfiguration.CORSRule || [];
	    CORSRules = util.clone(util.isArray(CORSRules) ? CORSRules : [CORSRules]);
	    var ResponseVary = CORSConfiguration.ResponseVary;
	    util.each(CORSRules, function (rule) {
	      util.each(['AllowedOrigin', 'AllowedHeader', 'AllowedMethod', 'ExposeHeader'], function (key) {
	        var sKey = key + 's';
	        var val = rule[sKey] || rule[key] || [];
	        delete rule[key];
	        rule[sKey] = util.isArray(val) ? val : [val];
	      });
	    });
	    callback(null, {
	      CORSRules: CORSRules,
	      ResponseVary: ResponseVary,
	      statusCode: data.statusCode,
	      headers: data.headers
	    });
	  });
	}
	/**
	 * 删除 Bucket 的 跨域设置
	 * @param  {Object}  params                 参数对象，必须
	 *     @param  {String}  params.Bucket      Bucket名称，必须
	 *     @param  {String}  params.Region      地域名称，必须
	 * @param  {Function}  callback             回调函数，必须
	 * @return  {Object}  err                   请求失败的错误，如果请求成功，则为空。https://cloud.tencent.com/document/product/436/7730
	 * @return  {Object}  data                  返回的数据
	 */


	function deleteBucketCors(params, callback) {
	  submitRequest.call(this, {
	    Action: 'name/cos:DeleteBucketCORS',
	    method: 'DELETE',
	    Bucket: params.Bucket,
	    Region: params.Region,
	    headers: params.Headers,
	    action: 'cors'
	  }, function (err, data) {
	    if (err && err.statusCode === 204) {
	      return callback(null, {
	        statusCode: err.statusCode
	      });
	    } else if (err) {
	      return callback(err);
	    }

	    callback(null, {
	      statusCode: data.statusCode || err.statusCode,
	      headers: data.headers
	    });
	  });
	}
	/**
	 * 获取 Bucket 的 地域信息
	 * @param  {Object}  params             参数对象，必须
	 *     @param  {String}  params.Bucket  Bucket名称，必须
	 *     @param  {String}  params.Region  地域名称，必须
	 * @param  {Function}  callback         回调函数，必须
	 * @return  {Object}  err               请求失败的错误，如果请求成功，则为空。https://cloud.tencent.com/document/product/436/7730
	 * @return  {Object}  data              返回数据，包含地域信息 LocationConstraint
	 */


	function getBucketLocation(params, callback) {
	  submitRequest.call(this, {
	    Action: 'name/cos:GetBucketLocation',
	    method: 'GET',
	    Bucket: params.Bucket,
	    Region: params.Region,
	    headers: params.Headers,
	    action: 'location'
	  }, callback);
	}

	function putBucketPolicy(params, callback) {
	  var Policy = params['Policy'];

	  try {
	    if (typeof Policy === 'string') Policy = JSON.parse(Policy);
	  } catch (e) {}

	  if (!Policy || typeof Policy === 'string') return callback(util.error(new Error('Policy format error')));
	  var PolicyStr = JSON.stringify(Policy);
	  if (!Policy.version) Policy.version = '2.0';
	  var headers = params.Headers;
	  headers['Content-Type'] = 'application/json';
	  headers['Content-MD5'] = util.b64(util.md5(PolicyStr));
	  submitRequest.call(this, {
	    Action: 'name/cos:PutBucketPolicy',
	    method: 'PUT',
	    Bucket: params.Bucket,
	    Region: params.Region,
	    action: 'policy',
	    body: PolicyStr,
	    headers: headers
	  }, function (err, data) {
	    if (err && err.statusCode === 204) {
	      return callback(null, {
	        statusCode: err.statusCode
	      });
	    } else if (err) {
	      return callback(err);
	    }

	    callback(null, {
	      statusCode: data.statusCode,
	      headers: data.headers
	    });
	  });
	}
	/**
	 * 获取 Bucket 的读取权限策略
	 * @param  {Object}  params             参数对象，必须
	 *     @param  {String}  params.Bucket  Bucket名称，必须
	 *     @param  {String}  params.Region  地域名称，必须
	 * @param  {Function}  callback         回调函数，必须
	 * @return  {Object}  err               请求失败的错误，如果请求成功，则为空。https://cloud.tencent.com/document/product/436/7730
	 * @return  {Object}  data              返回数据
	 */


	function getBucketPolicy(params, callback) {
	  submitRequest.call(this, {
	    Action: 'name/cos:GetBucketPolicy',
	    method: 'GET',
	    Bucket: params.Bucket,
	    Region: params.Region,
	    headers: params.Headers,
	    action: 'policy',
	    rawBody: true
	  }, function (err, data) {
	    if (err) {
	      if (err.statusCode && err.statusCode === 403) {
	        return callback(util.error(err, {
	          ErrorStatus: 'Access Denied'
	        }));
	      }

	      if (err.statusCode && err.statusCode === 405) {
	        return callback(util.error(err, {
	          ErrorStatus: 'Method Not Allowed'
	        }));
	      }

	      if (err.statusCode && err.statusCode === 404) {
	        return callback(util.error(err, {
	          ErrorStatus: 'Policy Not Found'
	        }));
	      }

	      return callback(err);
	    }

	    var Policy = {};

	    try {
	      Policy = JSON.parse(data.body);
	    } catch (e) {}

	    callback(null, {
	      Policy: Policy,
	      statusCode: data.statusCode,
	      headers: data.headers
	    });
	  });
	}
	/**
	 * 删除 Bucket 的 跨域设置
	 * @param  {Object}  params                 参数对象，必须
	 *     @param  {String}  params.Bucket      Bucket名称，必须
	 *     @param  {String}  params.Region      地域名称，必须
	 * @param  {Function}  callback             回调函数，必须
	 * @return  {Object}  err                   请求失败的错误，如果请求成功，则为空。https://cloud.tencent.com/document/product/436/7730
	 * @return  {Object}  data                  返回的数据
	 */


	function deleteBucketPolicy(params, callback) {
	  submitRequest.call(this, {
	    Action: 'name/cos:DeleteBucketPolicy',
	    method: 'DELETE',
	    Bucket: params.Bucket,
	    Region: params.Region,
	    headers: params.Headers,
	    action: 'policy'
	  }, function (err, data) {
	    if (err && err.statusCode === 204) {
	      return callback(null, {
	        statusCode: err.statusCode
	      });
	    } else if (err) {
	      return callback(err);
	    }

	    callback(null, {
	      statusCode: data.statusCode || err.statusCode,
	      headers: data.headers
	    });
	  });
	}
	/**
	 * 设置 Bucket 的标签
	 * @param  {Object}  params             参数对象，必须
	 *     @param  {String}  params.Bucket  Bucket名称，必须
	 *     @param  {String}  params.Region  地域名称，必须
	 *     @param  {Array}   params.TagSet  标签设置，必须
	 * @param  {Function}  callback         回调函数，必须
	 * @return  {Object}  err               请求失败的错误，如果请求成功，则为空。https://cloud.tencent.com/document/product/436/7730
	 * @return  {Object}  data              返回数据
	 */


	function putBucketTagging(params, callback) {
	  var Tagging = params['Tagging'] || {};
	  var Tags = Tagging.TagSet || Tagging.Tags || params['Tags'] || [];
	  Tags = util.clone(util.isArray(Tags) ? Tags : [Tags]);
	  var xml = util.json2xml({
	    Tagging: {
	      TagSet: {
	        Tag: Tags
	      }
	    }
	  });
	  var headers = params.Headers;
	  headers['Content-Type'] = 'application/xml';
	  headers['Content-MD5'] = util.b64(util.md5(xml));
	  submitRequest.call(this, {
	    Action: 'name/cos:PutBucketTagging',
	    method: 'PUT',
	    Bucket: params.Bucket,
	    Region: params.Region,
	    body: xml,
	    action: 'tagging',
	    headers: headers
	  }, function (err, data) {
	    if (err && err.statusCode === 204) {
	      return callback(null, {
	        statusCode: err.statusCode
	      });
	    } else if (err) {
	      return callback(err);
	    }

	    callback(null, {
	      statusCode: data.statusCode,
	      headers: data.headers
	    });
	  });
	}
	/**
	 * 获取 Bucket 的标签设置
	 * @param  {Object}  params             参数对象，必须
	 *     @param  {String}  params.Bucket  Bucket名称，必须
	 *     @param  {String}  params.Region  地域名称，必须
	 * @param  {Function}  callback         回调函数，必须
	 * @return  {Object}  err               请求失败的错误，如果请求成功，则为空。https://cloud.tencent.com/document/product/436/7730
	 * @return  {Object}  data              返回数据
	 */


	function getBucketTagging(params, callback) {
	  submitRequest.call(this, {
	    Action: 'name/cos:GetBucketTagging',
	    method: 'GET',
	    Bucket: params.Bucket,
	    Region: params.Region,
	    headers: params.Headers,
	    action: 'tagging'
	  }, function (err, data) {
	    if (err) {
	      if (err.statusCode === 404 && err.error && (err.error === 'Not Found' || err.error.Code === 'NoSuchTagSet')) {
	        var result = {
	          Tags: [],
	          statusCode: err.statusCode
	        };
	        err.headers && (result.headers = err.headers);
	        callback(null, result);
	      } else {
	        callback(err);
	      }

	      return;
	    }

	    var Tags = [];

	    try {
	      Tags = data.Tagging.TagSet.Tag || [];
	    } catch (e) {}

	    Tags = util.clone(util.isArray(Tags) ? Tags : [Tags]);
	    callback(null, {
	      Tags: Tags,
	      statusCode: data.statusCode,
	      headers: data.headers
	    });
	  });
	}
	/**
	 * 删除 Bucket 的 标签设置
	 * @param  {Object}  params             参数对象，必须
	 *     @param  {String}  params.Bucket  Bucket名称，必须
	 *     @param  {String}  params.Region  地域名称，必须
	 * @param  {Function}  callback         回调函数，必须
	 * @return  {Object}  err               请求失败的错误，如果请求成功，则为空。https://cloud.tencent.com/document/product/436/7730
	 * @return  {Object}  data              返回的数据
	 */


	function deleteBucketTagging(params, callback) {
	  submitRequest.call(this, {
	    Action: 'name/cos:DeleteBucketTagging',
	    method: 'DELETE',
	    Bucket: params.Bucket,
	    Region: params.Region,
	    headers: params.Headers,
	    action: 'tagging'
	  }, function (err, data) {
	    if (err && err.statusCode === 204) {
	      return callback(null, {
	        statusCode: err.statusCode
	      });
	    } else if (err) {
	      return callback(err);
	    }

	    callback(null, {
	      statusCode: data.statusCode,
	      headers: data.headers
	    });
	  });
	}

	function putBucketLifecycle(params, callback) {
	  var LifecycleConfiguration = params['LifecycleConfiguration'] || {};
	  var Rules = LifecycleConfiguration.Rules || params.Rules || [];
	  Rules = util.clone(Rules);
	  var xml = util.json2xml({
	    LifecycleConfiguration: {
	      Rule: Rules
	    }
	  });
	  var headers = params.Headers;
	  headers['Content-Type'] = 'application/xml';
	  headers['Content-MD5'] = util.b64(util.md5(xml));
	  submitRequest.call(this, {
	    Action: 'name/cos:PutBucketLifecycle',
	    method: 'PUT',
	    Bucket: params.Bucket,
	    Region: params.Region,
	    body: xml,
	    action: 'lifecycle',
	    headers: headers
	  }, function (err, data) {
	    if (err && err.statusCode === 204) {
	      return callback(null, {
	        statusCode: err.statusCode
	      });
	    } else if (err) {
	      return callback(err);
	    }

	    callback(null, {
	      statusCode: data.statusCode,
	      headers: data.headers
	    });
	  });
	}

	function getBucketLifecycle(params, callback) {
	  submitRequest.call(this, {
	    Action: 'name/cos:GetBucketLifecycle',
	    method: 'GET',
	    Bucket: params.Bucket,
	    Region: params.Region,
	    headers: params.Headers,
	    action: 'lifecycle'
	  }, function (err, data) {
	    if (err) {
	      if (err.statusCode === 404 && err.error && err.error.Code === 'NoSuchLifecycleConfiguration') {
	        var result = {
	          Rules: [],
	          statusCode: err.statusCode
	        };
	        err.headers && (result.headers = err.headers);
	        callback(null, result);
	      } else {
	        callback(err);
	      }

	      return;
	    }

	    var Rules = [];

	    try {
	      Rules = data.LifecycleConfiguration.Rule || [];
	    } catch (e) {}

	    Rules = util.clone(util.isArray(Rules) ? Rules : [Rules]);
	    callback(null, {
	      Rules: Rules,
	      statusCode: data.statusCode,
	      headers: data.headers
	    });
	  });
	}

	function deleteBucketLifecycle(params, callback) {
	  submitRequest.call(this, {
	    Action: 'name/cos:DeleteBucketLifecycle',
	    method: 'DELETE',
	    Bucket: params.Bucket,
	    Region: params.Region,
	    headers: params.Headers,
	    action: 'lifecycle'
	  }, function (err, data) {
	    if (err && err.statusCode === 204) {
	      return callback(null, {
	        statusCode: err.statusCode
	      });
	    } else if (err) {
	      return callback(err);
	    }

	    callback(null, {
	      statusCode: data.statusCode,
	      headers: data.headers
	    });
	  });
	}

	function putBucketVersioning(params, callback) {
	  if (!params['VersioningConfiguration']) {
	    callback(util.error(new Error('missing param VersioningConfiguration')));
	    return;
	  }

	  var VersioningConfiguration = params['VersioningConfiguration'] || {};
	  var xml = util.json2xml({
	    VersioningConfiguration: VersioningConfiguration
	  });
	  var headers = params.Headers;
	  headers['Content-Type'] = 'application/xml';
	  headers['Content-MD5'] = util.b64(util.md5(xml));
	  submitRequest.call(this, {
	    Action: 'name/cos:PutBucketVersioning',
	    method: 'PUT',
	    Bucket: params.Bucket,
	    Region: params.Region,
	    body: xml,
	    action: 'versioning',
	    headers: headers
	  }, function (err, data) {
	    if (err && err.statusCode === 204) {
	      return callback(null, {
	        statusCode: err.statusCode
	      });
	    } else if (err) {
	      return callback(err);
	    }

	    callback(null, {
	      statusCode: data.statusCode,
	      headers: data.headers
	    });
	  });
	}

	function getBucketVersioning(params, callback) {
	  submitRequest.call(this, {
	    Action: 'name/cos:GetBucketVersioning',
	    method: 'GET',
	    Bucket: params.Bucket,
	    Region: params.Region,
	    headers: params.Headers,
	    action: 'versioning'
	  }, function (err, data) {
	    if (!err) {
	      !data.VersioningConfiguration && (data.VersioningConfiguration = {});
	    }

	    callback(err, data);
	  });
	}

	function putBucketReplication(params, callback) {
	  var ReplicationConfiguration = util.clone(params.ReplicationConfiguration);
	  var xml = util.json2xml({
	    ReplicationConfiguration: ReplicationConfiguration
	  });
	  xml = xml.replace(/<(\/?)Rules>/gi, '<$1Rule>');
	  xml = xml.replace(/<(\/?)Tags>/gi, '<$1Tag>');
	  var headers = params.Headers;
	  headers['Content-Type'] = 'application/xml';
	  headers['Content-MD5'] = util.b64(util.md5(xml));
	  submitRequest.call(this, {
	    Action: 'name/cos:PutBucketReplication',
	    method: 'PUT',
	    Bucket: params.Bucket,
	    Region: params.Region,
	    body: xml,
	    action: 'replication',
	    headers: headers
	  }, function (err, data) {
	    if (err && err.statusCode === 204) {
	      return callback(null, {
	        statusCode: err.statusCode
	      });
	    } else if (err) {
	      return callback(err);
	    }

	    callback(null, {
	      statusCode: data.statusCode,
	      headers: data.headers
	    });
	  });
	}

	function getBucketReplication(params, callback) {
	  submitRequest.call(this, {
	    Action: 'name/cos:GetBucketReplication',
	    method: 'GET',
	    Bucket: params.Bucket,
	    Region: params.Region,
	    headers: params.Headers,
	    action: 'replication'
	  }, function (err, data) {
	    if (err) {
	      if (err.statusCode === 404 && err.error && (err.error === 'Not Found' || err.error.Code === 'ReplicationConfigurationnotFoundError')) {
	        var result = {
	          ReplicationConfiguration: {
	            Rules: []
	          },
	          statusCode: err.statusCode
	        };
	        err.headers && (result.headers = err.headers);
	        callback(null, result);
	      } else {
	        callback(err);
	      }

	      return;
	    }

	    !data.ReplicationConfiguration && (data.ReplicationConfiguration = {});

	    if (data.ReplicationConfiguration.Rule) {
	      data.ReplicationConfiguration.Rules = util.makeArray(data.ReplicationConfiguration.Rule);
	      delete data.ReplicationConfiguration.Rule;
	    }

	    callback(err, data);
	  });
	}

	function deleteBucketReplication(params, callback) {
	  submitRequest.call(this, {
	    Action: 'name/cos:DeleteBucketReplication',
	    method: 'DELETE',
	    Bucket: params.Bucket,
	    Region: params.Region,
	    headers: params.Headers,
	    action: 'replication'
	  }, function (err, data) {
	    if (err && err.statusCode === 204) {
	      return callback(null, {
	        statusCode: err.statusCode
	      });
	    } else if (err) {
	      return callback(err);
	    }

	    callback(null, {
	      statusCode: data.statusCode,
	      headers: data.headers
	    });
	  });
	}
	/**
	 * 设置 Bucket 静态网站配置信息
	 * @param  {Object}  params                                                 参数对象，必须
	 *     @param  {String}  params.Bucket                                      Bucket名称，必须
	 *     @param  {String}  params.Region                                      地域名称，必须
	 *     @param  {Object}  params.WebsiteConfiguration                        地域名称，必须
	 *         @param  {Object}   WebsiteConfiguration.IndexDocument            索引文档，必须
	 *         @param  {Object}   WebsiteConfiguration.ErrorDocument            错误文档，非必须
	 *         @param  {Object}   WebsiteConfiguration.RedirectAllRequestsTo    重定向所有请求，非必须
	 *         @param  {Array}   params.RoutingRules                            重定向规则，非必须
	 * @param  {Function}  callback                                             回调函数，必须
	 * @return  {Object}  err                                                   请求失败的错误，如果请求成功，则为空。https://cloud.tencent.com/document/product/436/7730
	 * @return  {Object}  data                                                  返回数据
	 */


	function putBucketWebsite(params, callback) {
	  if (!params['WebsiteConfiguration']) {
	    callback(util.error(new Error('missing param WebsiteConfiguration')));
	    return;
	  }

	  var WebsiteConfiguration = util.clone(params['WebsiteConfiguration'] || {});
	  var RoutingRules = WebsiteConfiguration['RoutingRules'] || WebsiteConfiguration['RoutingRule'] || [];
	  RoutingRules = util.isArray(RoutingRules) ? RoutingRules : [RoutingRules];
	  delete WebsiteConfiguration.RoutingRule;
	  delete WebsiteConfiguration.RoutingRules;
	  if (RoutingRules.length) WebsiteConfiguration.RoutingRules = {
	    RoutingRule: RoutingRules
	  };
	  var xml = util.json2xml({
	    WebsiteConfiguration: WebsiteConfiguration
	  });
	  var headers = params.Headers;
	  headers['Content-Type'] = 'application/xml';
	  headers['Content-MD5'] = util.b64(util.md5(xml));
	  submitRequest.call(this, {
	    Action: 'name/cos:PutBucketWebsite',
	    method: 'PUT',
	    Bucket: params.Bucket,
	    Region: params.Region,
	    body: xml,
	    action: 'website',
	    headers: headers
	  }, function (err, data) {
	    if (err && err.statusCode === 204) {
	      return callback(null, {
	        statusCode: err.statusCode
	      });
	    } else if (err) {
	      return callback(err);
	    }

	    callback(null, {
	      statusCode: data.statusCode,
	      headers: data.headers
	    });
	  });
	}
	/**
	 * 获取 Bucket 的静态网站配置信息
	 * @param  {Object}  params             参数对象，必须
	 *     @param  {String}  params.Bucket  Bucket名称，必须
	 *     @param  {String}  params.Region  地域名称，必须
	 * @param  {Function}  callback         回调函数，必须
	 * @return  {Object}  err               请求失败的错误，如果请求成功，则为空。https://cloud.tencent.com/document/product/436/7730
	 * @return  {Object}  data              返回数据
	 */


	function getBucketWebsite(params, callback) {
	  submitRequest.call(this, {
	    Action: 'name/cos:GetBucketWebsite',
	    method: 'GET',
	    Bucket: params.Bucket,
	    Region: params.Region,
	    Key: params.Key,
	    headers: params.Headers,
	    action: 'website'
	  }, function (err, data) {
	    if (err) {
	      if (err.statusCode === 404 && err.error.Code === 'NoSuchWebsiteConfiguration') {
	        var result = {
	          WebsiteConfiguration: {},
	          statusCode: err.statusCode
	        };
	        err.headers && (result.headers = err.headers);
	        callback(null, result);
	      } else {
	        callback(err);
	      }

	      return;
	    }

	    var WebsiteConfiguration = data.WebsiteConfiguration || {};

	    if (WebsiteConfiguration['RoutingRules']) {
	      var RoutingRules = util.clone(WebsiteConfiguration['RoutingRules'].RoutingRule || []);
	      RoutingRules = util.makeArray(RoutingRules);
	      WebsiteConfiguration.RoutingRules = RoutingRules;
	    }

	    callback(null, {
	      WebsiteConfiguration: WebsiteConfiguration,
	      statusCode: data.statusCode,
	      headers: data.headers
	    });
	  });
	}
	/**
	 * 删除 Bucket 的静态网站配置
	 * @param  {Object}  params             参数对象，必须
	 *     @param  {String}  params.Bucket  Bucket名称，必须
	 *     @param  {String}  params.Region  地域名称，必须
	 * @param  {Function}  callback         回调函数，必须
	 * @return  {Object}  err               请求失败的错误，如果请求成功，则为空。https://cloud.tencent.com/document/product/436/7730
	 * @return  {Object}  data              返回数据
	 */


	function deleteBucketWebsite(params, callback) {
	  submitRequest.call(this, {
	    Action: 'name/cos:DeleteBucketWebsite',
	    method: 'DELETE',
	    Bucket: params.Bucket,
	    Region: params.Region,
	    headers: params.Headers,
	    action: 'website'
	  }, function (err, data) {
	    if (err && err.statusCode === 204) {
	      return callback(null, {
	        statusCode: err.statusCode
	      });
	    } else if (err) {
	      return callback(err);
	    }

	    callback(null, {
	      statusCode: data.statusCode,
	      headers: data.headers
	    });
	  });
	}
	/**
	 * 设置 Bucket 的防盗链白名单或者黑名单
	 * @param  {Object}  params                                                 参数对象，必须
	 *     @param  {String}  params.Bucket                                      Bucket名称，必须
	 *     @param  {String}  params.Region                                      地域名称，必须
	 *     @param  {Object}  params.RefererConfiguration                        地域名称，必须
	 *         @param  {String}   RefererConfiguration.Status                   是否开启防盗链，枚举值：Enabled、Disabled
	 *         @param  {String}   RefererConfiguration.RefererType              防盗链类型，枚举值：Black-List、White-List，必须
	 *         @param  {Array}   RefererConfiguration.DomianList.Domain         生效域名，必须
	 *         @param  {String}   RefererConfiguration.EmptyReferConfiguration  ，非必须
	 * @param  {Function}  callback                                             回调函数，必须
	 * @return  {Object}  err                                                   请求失败的错误，如果请求成功，则为空。https://cloud.tencent.com/document/product/436/7730
	 * @return  {Object}  data                                                  返回数据
	 */


	function putBucketReferer(params, callback) {
	  if (!params['RefererConfiguration']) {
	    callback(util.error(new Error('missing param RefererConfiguration')));
	    return;
	  }

	  var RefererConfiguration = util.clone(params['RefererConfiguration'] || {});
	  var DomainList = RefererConfiguration['DomainList'] || {};
	  var Domains = DomainList['Domains'] || DomainList['Domain'] || [];
	  Domains = util.isArray(Domains) ? Domains : [Domains];
	  if (Domains.length) RefererConfiguration.DomainList = {
	    Domain: Domains
	  };
	  var xml = util.json2xml({
	    RefererConfiguration: RefererConfiguration
	  });
	  var headers = params.Headers;
	  headers['Content-Type'] = 'application/xml';
	  headers['Content-MD5'] = util.b64(util.md5(xml));
	  submitRequest.call(this, {
	    Action: 'name/cos:PutBucketReferer',
	    method: 'PUT',
	    Bucket: params.Bucket,
	    Region: params.Region,
	    body: xml,
	    action: 'referer',
	    headers: headers
	  }, function (err, data) {
	    if (err && err.statusCode === 204) {
	      return callback(null, {
	        statusCode: err.statusCode
	      });
	    } else if (err) {
	      return callback(err);
	    }

	    callback(null, {
	      statusCode: data.statusCode,
	      headers: data.headers
	    });
	  });
	}
	/**
	 * 获取 Bucket 的防盗链白名单或者黑名单
	 * @param  {Object}  params             参数对象，必须
	 *     @param  {String}  params.Bucket  Bucket名称，必须
	 *     @param  {String}  params.Region  地域名称，必须
	 * @param  {Function}  callback         回调函数，必须
	 * @return  {Object}  err               请求失败的错误，如果请求成功，则为空。https://cloud.tencent.com/document/product/436/7730
	 * @return  {Object}  data              返回数据
	 */


	function getBucketReferer(params, callback) {
	  submitRequest.call(this, {
	    Action: 'name/cos:GetBucketReferer',
	    method: 'GET',
	    Bucket: params.Bucket,
	    Region: params.Region,
	    Key: params.Key,
	    headers: params.Headers,
	    action: 'referer'
	  }, function (err, data) {
	    if (err) {
	      if (err.statusCode === 404 && err.error.Code === 'NoSuchRefererConfiguration') {
	        var result = {
	          WebsiteConfiguration: {},
	          statusCode: err.statusCode
	        };
	        err.headers && (result.headers = err.headers);
	        callback(null, result);
	      } else {
	        callback(err);
	      }

	      return;
	    }

	    var RefererConfiguration = data.RefererConfiguration || {};

	    if (RefererConfiguration['DomainList']) {
	      var Domains = util.makeArray(RefererConfiguration['DomainList'].Domain || []);
	      RefererConfiguration.DomainList = {
	        Domains: Domains
	      };
	    }

	    callback(null, {
	      RefererConfiguration: RefererConfiguration,
	      statusCode: data.statusCode,
	      headers: data.headers
	    });
	  });
	}
	/**
	 * 设置 Bucket 自定义域名
	 * @param  {Object}  params                                                 参数对象，必须
	 *     @param  {String}  params.Bucket                                      Bucket名称，必须
	 *     @param  {String}  params.Region                                      地域名称，必须
	 * @param  {Function}  callback                                             回调函数，必须
	 * @return  {Object}  err                                                   请求失败的错误，如果请求成功，则为空。https://cloud.tencent.com/document/product/436/7730
	 * @return  {Object}  data                                                  返回数据
	 */


	function putBucketDomain(params, callback) {
	  var DomainConfiguration = params['DomainConfiguration'] || {};
	  var DomainRule = DomainConfiguration.DomainRule || params.DomainRule || [];
	  DomainRule = util.clone(DomainRule);
	  var xml = util.json2xml({
	    DomainConfiguration: {
	      DomainRule: DomainRule
	    }
	  });
	  var headers = params.Headers;
	  headers['Content-Type'] = 'application/xml';
	  headers['Content-MD5'] = util.b64(util.md5(xml));
	  submitRequest.call(this, {
	    Action: 'name/cos:PutBucketDomain',
	    method: 'PUT',
	    Bucket: params.Bucket,
	    Region: params.Region,
	    body: xml,
	    action: 'domain',
	    headers: headers
	  }, function (err, data) {
	    if (err && err.statusCode === 204) {
	      return callback(null, {
	        statusCode: err.statusCode
	      });
	    } else if (err) {
	      return callback(err);
	    }

	    callback(null, {
	      statusCode: data.statusCode,
	      headers: data.headers
	    });
	  });
	}
	/**
	 * 获取 Bucket 的自定义域名
	 * @param  {Object}  params             参数对象，必须
	 *     @param  {String}  params.Bucket  Bucket名称，必须
	 *     @param  {String}  params.Region  地域名称，必须
	 * @param  {Function}  callback         回调函数，必须
	 * @return  {Object}  err               请求失败的错误，如果请求成功，则为空。https://cloud.tencent.com/document/product/436/7730
	 * @return  {Object}  data              返回数据
	 */


	function getBucketDomain(params, callback) {
	  submitRequest.call(this, {
	    Action: 'name/cos:GetBucketDomain',
	    method: 'GET',
	    Bucket: params.Bucket,
	    Region: params.Region,
	    headers: params.Headers,
	    action: 'domain'
	  }, function (err, data) {
	    if (err) return callback(err);
	    var DomainRule = [];

	    try {
	      DomainRule = data.DomainConfiguration.DomainRule || [];
	    } catch (e) {}

	    DomainRule = util.clone(util.isArray(DomainRule) ? DomainRule : [DomainRule]);
	    callback(null, {
	      DomainRule: DomainRule,
	      statusCode: data.statusCode,
	      headers: data.headers
	    });
	  });
	}
	/**
	 * 删除 Bucket 自定义域名
	 * @param  {Object}  params             参数对象，必须
	 *     @param  {String}  params.Bucket  Bucket名称，必须
	 *     @param  {String}  params.Region  地域名称，必须
	 * @param  {Function}  callback         回调函数，必须
	 * @return  {Object}  err               请求失败的错误，如果请求成功，则为空。https://cloud.tencent.com/document/product/436/7730
	 * @return  {Object}  data              返回数据
	 */


	function deleteBucketDomain(params, callback) {
	  submitRequest.call(this, {
	    Action: 'name/cos:DeleteBucketDomain',
	    method: 'DELETE',
	    Bucket: params.Bucket,
	    Region: params.Region,
	    headers: params.Headers,
	    action: 'domain'
	  }, function (err, data) {
	    if (err && err.statusCode === 204) {
	      return callback(null, {
	        statusCode: err.statusCode
	      });
	    } else if (err) {
	      return callback(err);
	    }

	    callback(null, {
	      statusCode: data.statusCode,
	      headers: data.headers
	    });
	  });
	}
	/**
	 * 设置 Bucket 的回源
	 * @param  {Object}  params                                                 参数对象，必须
	 *     @param  {String}  params.Bucket                                      Bucket名称，必须
	 *     @param  {String}  params.Region                                      地域名称，必须
	 * @param  {Function}  callback                                             回调函数，必须
	 * @return  {Object}  err                                                   请求失败的错误，如果请求成功，则为空。https://cloud.tencent.com/document/product/436/7730
	 * @return  {Object}  data                                                  返回数据
	 */


	function putBucketOrigin(params, callback) {
	  var OriginConfiguration = params['OriginConfiguration'] || {};
	  var OriginRule = OriginConfiguration.OriginRule || params.OriginRule || [];
	  OriginRule = util.clone(OriginRule);
	  var xml = util.json2xml({
	    OriginConfiguration: {
	      OriginRule: OriginRule
	    }
	  });
	  var headers = params.Headers;
	  headers['Content-Type'] = 'application/xml';
	  headers['Content-MD5'] = util.b64(util.md5(xml));
	  submitRequest.call(this, {
	    Action: 'name/cos:PutBucketOrigin',
	    method: 'PUT',
	    Bucket: params.Bucket,
	    Region: params.Region,
	    body: xml,
	    action: 'origin',
	    headers: headers
	  }, function (err, data) {
	    if (err && err.statusCode === 204) {
	      return callback(null, {
	        statusCode: err.statusCode
	      });
	    } else if (err) {
	      return callback(err);
	    }

	    callback(null, {
	      statusCode: data.statusCode,
	      headers: data.headers
	    });
	  });
	}
	/**
	 * 获取 Bucket 的回源
	 * @param  {Object}  params             参数对象，必须
	 *     @param  {String}  params.Bucket  Bucket名称，必须
	 *     @param  {String}  params.Region  地域名称，必须
	 * @param  {Function}  callback         回调函数，必须
	 * @return  {Object}  err               请求失败的错误，如果请求成功，则为空。https://cloud.tencent.com/document/product/436/7730
	 * @return  {Object}  data              返回数据
	 */


	function getBucketOrigin(params, callback) {
	  submitRequest.call(this, {
	    Action: 'name/cos:GetBucketOrigin',
	    method: 'GET',
	    Bucket: params.Bucket,
	    Region: params.Region,
	    headers: params.Headers,
	    action: 'origin'
	  }, function (err, data) {
	    if (err) return callback(err);
	    var OriginRule = [];

	    try {
	      OriginRule = data.OriginConfiguration.OriginRule || [];
	    } catch (e) {}

	    OriginRule = util.clone(util.isArray(OriginRule) ? OriginRule : [OriginRule]);
	    callback(null, {
	      OriginRule: OriginRule,
	      statusCode: data.statusCode,
	      headers: data.headers
	    });
	  });
	}
	/**
	 * 删除 Bucket 的回源
	 * @param  {Object}  params             参数对象，必须
	 *     @param  {String}  params.Bucket  Bucket名称，必须
	 *     @param  {String}  params.Region  地域名称，必须
	 * @param  {Function}  callback         回调函数，必须
	 * @return  {Object}  err               请求失败的错误，如果请求成功，则为空。https://cloud.tencent.com/document/product/436/7730
	 * @return  {Object}  data              返回数据
	 */


	function deleteBucketOrigin(params, callback) {
	  submitRequest.call(this, {
	    Action: 'name/cos:DeleteBucketOrigin',
	    method: 'DELETE',
	    Bucket: params.Bucket,
	    Region: params.Region,
	    headers: params.Headers,
	    action: 'origin'
	  }, function (err, data) {
	    if (err && err.statusCode === 204) {
	      return callback(null, {
	        statusCode: err.statusCode
	      });
	    } else if (err) {
	      return callback(err);
	    }

	    callback(null, {
	      statusCode: data.statusCode,
	      headers: data.headers
	    });
	  });
	}
	/**
	 * 设置 Bucket 的日志记录
	 * @param  {Object}  params                                                 参数对象，必须
	 *     @param  {String}  params.Bucket                                      Bucket名称，必须
	 *     @param  {String}  params.Region                                      地域名称，必须
	 *     @param  {(Object|String)}  params.BucketLoggingStatus                         说明日志记录配置的状态，如果无子节点信息则意为关闭日志记录，必须
	 * @param  {Function}  callback                                             回调函数，必须
	 * @return  {Object}  err                                                   请求失败的错误，如果请求成功，则为空。https://cloud.tencent.com/document/product/436/7730
	 * @return  {Object}  data                                                  返回数据
	 */


	function putBucketLogging(params, callback) {
	  var xml = util.json2xml({
	    BucketLoggingStatus: params['BucketLoggingStatus'] || ''
	  });
	  var headers = params.Headers;
	  headers['Content-Type'] = 'application/xml';
	  headers['Content-MD5'] = util.b64(util.md5(xml));
	  submitRequest.call(this, {
	    Action: 'name/cos:PutBucketLogging',
	    method: 'PUT',
	    Bucket: params.Bucket,
	    Region: params.Region,
	    body: xml,
	    action: 'logging',
	    headers: headers
	  }, function (err, data) {
	    if (err && err.statusCode === 204) {
	      return callback(null, {
	        statusCode: err.statusCode
	      });
	    } else if (err) {
	      return callback(err);
	    }

	    callback(null, {
	      statusCode: data.statusCode,
	      headers: data.headers
	    });
	  });
	}
	/**
	 * 获取 Bucket 的日志记录
	 * @param  {Object}  params             参数对象，必须
	 *     @param  {String}  params.Bucket  Bucket名称，必须
	 *     @param  {String}  params.Region  地域名称，必须
	 * @param  {Function}  callback         回调函数，必须
	 * @return  {Object}  err               请求失败的错误，如果请求成功，则为空。https://cloud.tencent.com/document/product/436/7730
	 * @return  {Object}  data              返回数据
	 */


	function getBucketLogging(params, callback) {
	  submitRequest.call(this, {
	    Action: 'name/cos:GetBucketLogging',
	    method: 'GET',
	    Bucket: params.Bucket,
	    Region: params.Region,
	    headers: params.Headers,
	    action: 'logging'
	  }, function (err, data) {
	    if (err) return callback(err);
	    callback(null, {
	      BucketLoggingStatus: data.BucketLoggingStatus,
	      statusCode: data.statusCode,
	      headers: data.headers
	    });
	  });
	}
	/**
	 * 创建/编辑 Bucket 的清单任务
	 * @param  {Object}  params                                                 参数对象，必须
	 *     @param  {String}  params.Bucket                                      Bucket名称，必须
	 *     @param  {String}  params.Region                                      地域名称，必须
	 *     @param  {String}  params.Id                                          清单任务的名称，必须
	 *     @param  {Object}  params.InventoryConfiguration                      包含清单的配置参数，必须
	 * @param  {Function}  callback                                             回调函数，必须
	 * @return  {Object}  err                                                   请求失败的错误，如果请求成功，则为空。https://cloud.tencent.com/document/product/436/7730
	 * @return  {Object}  data                                                  返回数据
	 */


	function submitBucketInventory(method, params, callback) {
	  var InventoryConfiguration = util.clone(params['InventoryConfiguration']);

	  if (InventoryConfiguration.OptionalFields) {
	    var Field = InventoryConfiguration.OptionalFields || [];
	    InventoryConfiguration.OptionalFields = {
	      Field: Field
	    };
	  }

	  if (InventoryConfiguration.Destination && InventoryConfiguration.Destination.COSBucketDestination && InventoryConfiguration.Destination.COSBucketDestination.Encryption) {
	    var Encryption = InventoryConfiguration.Destination.COSBucketDestination.Encryption;

	    if (Object.keys(Encryption).indexOf('SSECOS') > -1) {
	      Encryption['SSE-COS'] = Encryption['SSECOS'];
	      delete Encryption['SSECOS'];
	    }
	  }

	  var xml = util.json2xml({
	    InventoryConfiguration: InventoryConfiguration
	  });
	  var headers = params.Headers;
	  headers['Content-Type'] = 'application/xml';
	  headers['Content-MD5'] = util.b64(util.md5(xml));
	  var action = method === 'PUT' ? 'name/cos:PutBucketInventory' : 'name/cos:PostBucketInventory';
	  submitRequest.call(this, {
	    Action: action,
	    method: method,
	    Bucket: params.Bucket,
	    Region: params.Region,
	    body: xml,
	    action: 'inventory',
	    qs: {
	      id: params['Id']
	    },
	    headers: headers
	  }, function (err, data) {
	    if (err && err.statusCode === 204) {
	      return callback(null, {
	        statusCode: err.statusCode
	      });
	    } else if (err) {
	      return callback(err);
	    }

	    callback(null, {
	      statusCode: data.statusCode,
	      headers: data.headers
	    });
	  });
	}
	/**
	 * 创建一个清单任务
	 */


	function putBucketInventory(params, callback) {
	  return submitBucketInventory.call(this, 'PUT', params, callback);
	}
	/**
	 * 创建一个一次性清单任务 会立即执行
	 */


	function postBucketInventory(params, callback) {
	  return submitBucketInventory.call(this, 'POST', params, callback);
	}
	/**
	 * 获取 Bucket 的清单任务信息
	 * @param  {Object}  params             参数对象，必须
	 *     @param  {String}  params.Bucket  Bucket名称，必须
	 *     @param  {String}  params.Region  地域名称，必须
	 *     @param  {String}  params.Id      清单任务的名称，必须
	 * @param  {Function}  callback         回调函数，必须
	 * @return  {Object}  err               请求失败的错误，如果请求成功，则为空。https://cloud.tencent.com/document/product/436/7730
	 * @return  {Object}  data              返回数据
	 */


	function getBucketInventory(params, callback) {
	  submitRequest.call(this, {
	    Action: 'name/cos:GetBucketInventory',
	    method: 'GET',
	    Bucket: params.Bucket,
	    Region: params.Region,
	    headers: params.Headers,
	    action: 'inventory',
	    qs: {
	      id: params['Id']
	    }
	  }, function (err, data) {
	    if (err) return callback(err);
	    var InventoryConfiguration = data['InventoryConfiguration'];

	    if (InventoryConfiguration && InventoryConfiguration.OptionalFields && InventoryConfiguration.OptionalFields.Field) {
	      var Field = InventoryConfiguration.OptionalFields.Field;

	      if (!util.isArray(Field)) {
	        Field = [Field];
	      }

	      InventoryConfiguration.OptionalFields = Field;
	    }

	    if (InventoryConfiguration.Destination && InventoryConfiguration.Destination.COSBucketDestination && InventoryConfiguration.Destination.COSBucketDestination.Encryption) {
	      var Encryption = InventoryConfiguration.Destination.COSBucketDestination.Encryption;

	      if (Object.keys(Encryption).indexOf('SSE-COS') > -1) {
	        Encryption['SSECOS'] = Encryption['SSE-COS'];
	        delete Encryption['SSE-COS'];
	      }
	    }

	    callback(null, {
	      InventoryConfiguration: InventoryConfiguration,
	      statusCode: data.statusCode,
	      headers: data.headers
	    });
	  });
	}
	/**
	 * 获取 Bucket 的清单任务信息
	 * @param  {Object}  params                             参数对象，必须
	 *     @param  {String}  params.Bucket                  Bucket名称，必须
	 *     @param  {String}  params.Region                  地域名称，必须
	 *     @param  {String}  params.ContinuationToken       当 COS 响应体中 IsTruncated 为 true，且 NextContinuationToken 节点中存在参数值时，您可以将这个参数作为 continuation-token 参数值，以获取下一页的清单任务信息，非必须
	 * @param  {Function}  callback                         回调函数，必须
	 * @return  {Object}  err                               请求失败的错误，如果请求成功，则为空。https://cloud.tencent.com/document/product/436/7730
	 * @return  {Object}  data                              返回数据
	 */


	function listBucketInventory(params, callback) {
	  submitRequest.call(this, {
	    Action: 'name/cos:ListBucketInventory',
	    method: 'GET',
	    Bucket: params.Bucket,
	    Region: params.Region,
	    headers: params.Headers,
	    action: 'inventory',
	    qs: {
	      'continuation-token': params['ContinuationToken']
	    }
	  }, function (err, data) {
	    if (err) return callback(err);
	    var ListInventoryConfigurationResult = data['ListInventoryConfigurationResult'];
	    var InventoryConfigurations = ListInventoryConfigurationResult.InventoryConfiguration || [];
	    InventoryConfigurations = util.isArray(InventoryConfigurations) ? InventoryConfigurations : [InventoryConfigurations];
	    delete ListInventoryConfigurationResult['InventoryConfiguration'];
	    util.each(InventoryConfigurations, function (InventoryConfiguration) {
	      if (InventoryConfiguration && InventoryConfiguration.OptionalFields && InventoryConfiguration.OptionalFields.Field) {
	        var Field = InventoryConfiguration.OptionalFields.Field;

	        if (!util.isArray(Field)) {
	          Field = [Field];
	        }

	        InventoryConfiguration.OptionalFields = Field;
	      }

	      if (InventoryConfiguration.Destination && InventoryConfiguration.Destination.COSBucketDestination && InventoryConfiguration.Destination.COSBucketDestination.Encryption) {
	        var Encryption = InventoryConfiguration.Destination.COSBucketDestination.Encryption;

	        if (Object.keys(Encryption).indexOf('SSE-COS') > -1) {
	          Encryption['SSECOS'] = Encryption['SSE-COS'];
	          delete Encryption['SSE-COS'];
	        }
	      }
	    });
	    ListInventoryConfigurationResult.InventoryConfigurations = InventoryConfigurations;
	    util.extend(ListInventoryConfigurationResult, {
	      statusCode: data.statusCode,
	      headers: data.headers
	    });
	    callback(null, ListInventoryConfigurationResult);
	  });
	}
	/**
	 * 删除 Bucket 的清单任务
	 * @param  {Object}  params             参数对象，必须
	 *     @param  {String}  params.Bucket  Bucket名称，必须
	 *     @param  {String}  params.Region  地域名称，必须
	 *     @param  {String}  params.Id      清单任务的名称，必须
	 * @param  {Function}  callback         回调函数，必须
	 * @return  {Object}  err               请求失败的错误，如果请求成功，则为空。https://cloud.tencent.com/document/product/436/7730
	 * @return  {Object}  data              返回数据
	 */


	function deleteBucketInventory(params, callback) {
	  submitRequest.call(this, {
	    Action: 'name/cos:DeleteBucketInventory',
	    method: 'DELETE',
	    Bucket: params.Bucket,
	    Region: params.Region,
	    headers: params.Headers,
	    action: 'inventory',
	    qs: {
	      id: params['Id']
	    }
	  }, function (err, data) {
	    if (err && err.statusCode === 204) {
	      return callback(null, {
	        statusCode: err.statusCode
	      });
	    } else if (err) {
	      return callback(err);
	    }

	    callback(null, {
	      statusCode: data.statusCode,
	      headers: data.headers
	    });
	  });
	}
	/* 全球加速 */


	function putBucketAccelerate(params, callback) {
	  if (!params['AccelerateConfiguration']) {
	    callback(util.error(new Error('missing param AccelerateConfiguration')));
	    return;
	  }

	  var configuration = {
	    AccelerateConfiguration: params.AccelerateConfiguration || {}
	  };
	  var xml = util.json2xml(configuration);
	  var headers = {};
	  headers['Content-Type'] = 'application/xml';
	  headers['Content-MD5'] = util.b64(util.md5(xml));
	  submitRequest.call(this, {
	    Action: 'name/cos:PutBucketAccelerate',
	    method: 'PUT',
	    Bucket: params.Bucket,
	    Region: params.Region,
	    body: xml,
	    action: 'accelerate',
	    headers: headers
	  }, function (err, data) {
	    if (err) return callback(err);
	    callback(null, {
	      statusCode: data.statusCode,
	      headers: data.headers
	    });
	  });
	}

	function getBucketAccelerate(params, callback) {
	  submitRequest.call(this, {
	    Action: 'name/cos:GetBucketAccelerate',
	    method: 'GET',
	    Bucket: params.Bucket,
	    Region: params.Region,
	    action: 'accelerate'
	  }, function (err, data) {
	    if (!err) {
	      !data.AccelerateConfiguration && (data.AccelerateConfiguration = {});
	    }

	    callback(err, data);
	  });
	}

	function putBucketEncryption(params, callback) {
	  var conf = params.ServerSideEncryptionConfiguration || {};
	  var Rules = conf.Rule || conf.Rules || [];
	  var xml = util.json2xml({
	    ServerSideEncryptionConfiguration: {
	      Rule: Rules
	    }
	  });
	  var headers = params.Headers;
	  headers['Content-Type'] = 'application/xml';
	  headers['Content-MD5'] = util.b64(util.md5(xml));
	  submitRequest.call(this, {
	    Action: 'name/cos:PutBucketEncryption',
	    method: 'PUT',
	    Bucket: params.Bucket,
	    Region: params.Region,
	    body: xml,
	    action: 'encryption',
	    headers: headers
	  }, function (err, data) {
	    if (err && err.statusCode === 204) {
	      return callback(null, {
	        statusCode: err.statusCode
	      });
	    } else if (err) {
	      return callback(err);
	    }

	    callback(null, {
	      statusCode: data.statusCode,
	      headers: data.headers
	    });
	  });
	}

	function getBucketEncryption(params, callback) {
	  submitRequest.call(this, {
	    Action: 'name/cos:GetBucketEncryption',
	    method: 'GET',
	    Bucket: params.Bucket,
	    Region: params.Region,
	    headers: params.Headers,
	    action: 'encryption'
	  }, function (err, data) {
	    if (err) {
	      if (err.statusCode === 404 && err.code === 'NoSuchEncryptionConfiguration') {
	        var result = {
	          EncryptionConfiguration: {
	            Rules: []
	          },
	          statusCode: err.statusCode
	        };
	        err.headers && (result.headers = err.headers);
	        callback(null, result);
	      } else {
	        callback(err);
	      }

	      return;
	    }

	    var Rules = util.makeArray(data.EncryptionConfiguration && data.EncryptionConfiguration.Rule || []);
	    data.EncryptionConfiguration = {
	      Rules: Rules
	    };
	    callback(err, data);
	  });
	}

	function deleteBucketEncryption(params, callback) {
	  submitRequest.call(this, {
	    Action: 'name/cos:DeleteBucketReplication',
	    method: 'DELETE',
	    Bucket: params.Bucket,
	    Region: params.Region,
	    headers: params.Headers,
	    action: 'encryption'
	  }, function (err, data) {
	    if (err && err.statusCode === 204) {
	      return callback(null, {
	        statusCode: err.statusCode
	      });
	    } else if (err) {
	      return callback(err);
	    }

	    callback(null, {
	      statusCode: data.statusCode,
	      headers: data.headers
	    });
	  });
	} // Object 相关

	/**
	 * 取回对应Object的元数据，Head的权限与Get的权限一致
	 * @param  {Object}  params                         参数对象，必须
	 *     @param  {String}  params.Bucket              Bucket名称，必须
	 *     @param  {String}  params.Region              地域名称，必须
	 *     @param  {String}  params.Key                 文件名称，必须
	 *     @param  {String}  params.IfModifiedSince     当Object在指定时间后被修改，则返回对应Object元信息，否则返回304，非必须
	 * @param  {Function}  callback                     回调函数，必须
	 * @return  {Object}  err                           请求失败的错误，如果请求成功，则为空。https://cloud.tencent.com/document/product/436/7730
	 * @return  {Object}  data                          为指定 object 的元数据，如果设置了 IfModifiedSince ，且文件未修改，则返回一个对象，NotModified 属性为 true
	 *     @return  {Boolean}  data.NotModified         是否在 IfModifiedSince 时间点之后未修改该 object，则为 true
	 */


	function headObject(params, callback) {
	  submitRequest.call(this, {
	    Action: 'name/cos:HeadObject',
	    method: 'HEAD',
	    Bucket: params.Bucket,
	    Region: params.Region,
	    Key: params.Key,
	    VersionId: params.VersionId,
	    headers: params.Headers
	  }, function (err, data) {
	    if (err) {
	      var statusCode = err.statusCode;

	      if (params.Headers['If-Modified-Since'] && statusCode && statusCode === 304) {
	        return callback(null, {
	          NotModified: true,
	          statusCode: statusCode
	        });
	      }

	      return callback(err);
	    }

	    data.ETag = util.attr(data.headers, 'etag', '');
	    callback(null, data);
	  });
	}

	function listObjectVersions(params, callback) {
	  var reqParams = {};
	  reqParams['prefix'] = params['Prefix'] || '';
	  reqParams['delimiter'] = params['Delimiter'];
	  reqParams['key-marker'] = params['KeyMarker'];
	  reqParams['version-id-marker'] = params['VersionIdMarker'];
	  reqParams['max-keys'] = params['MaxKeys'];
	  reqParams['encoding-type'] = params['EncodingType'];
	  submitRequest.call(this, {
	    Action: 'name/cos:GetBucketObjectVersions',
	    ResourceKey: reqParams['prefix'],
	    method: 'GET',
	    Bucket: params.Bucket,
	    Region: params.Region,
	    headers: params.Headers,
	    qs: reqParams,
	    action: 'versions'
	  }, function (err, data) {
	    if (err) return callback(err);
	    var ListVersionsResult = data.ListVersionsResult || {};
	    var DeleteMarkers = ListVersionsResult.DeleteMarker || [];
	    DeleteMarkers = util.isArray(DeleteMarkers) ? DeleteMarkers : [DeleteMarkers];
	    var Versions = ListVersionsResult.Version || [];
	    Versions = util.isArray(Versions) ? Versions : [Versions];
	    var result = util.clone(ListVersionsResult);
	    delete result.DeleteMarker;
	    delete result.Version;
	    util.extend(result, {
	      DeleteMarkers: DeleteMarkers,
	      Versions: Versions,
	      statusCode: data.statusCode,
	      headers: data.headers
	    });
	    callback(null, result);
	  });
	}
	/**
	 * 下载 object
	 * @param  {Object}  params                                 参数对象，必须
	 *     @param  {String}  params.Bucket                      Bucket名称，必须
	 *     @param  {String}  params.Region                      地域名称，必须
	 *     @param  {String}  params.Key                         文件名称，必须
	 *     @param  {WriteStream}  params.Output                 文件写入流，非必须
	 *     @param  {String}  params.IfModifiedSince             当Object在指定时间后被修改，则返回对应Object元信息，否则返回304，非必须
	 *     @param  {String}  params.IfUnmodifiedSince           如果文件修改时间早于或等于指定时间，才返回文件内容。否则返回 412 (precondition failed)，非必须
	 *     @param  {String}  params.IfMatch                     当 ETag 与指定的内容一致，才返回文件。否则返回 412 (precondition failed)，非必须
	 *     @param  {String}  params.IfNoneMatch                 当 ETag 与指定的内容不一致，才返回文件。否则返回304 (not modified)，非必须
	 *     @param  {String}  params.ResponseContentType         设置返回头部中的 Content-Type 参数，非必须
	 *     @param  {String}  params.ResponseContentLanguage     设置返回头部中的 Content-Language 参数，非必须
	 *     @param  {String}  params.ResponseExpires             设置返回头部中的 Content-Expires 参数，非必须
	 *     @param  {String}  params.ResponseCacheControl        设置返回头部中的 Cache-Control 参数，非必须
	 *     @param  {String}  params.ResponseContentDisposition  设置返回头部中的 Content-Disposition 参数，非必须
	 *     @param  {String}  params.ResponseContentEncoding     设置返回头部中的 Content-Encoding 参数，非必须
	 * @param  {Function}  callback                             回调函数，必须
	 * @param  {Object}  err                                    请求失败的错误，如果请求成功，则为空。https://cloud.tencent.com/document/product/436/7730
	 * @param  {Object}  data                                   为对应的 object 数据，包括 body 和 headers
	 */


	function getObject(params, callback) {
	  var reqParams = params.Query || {};
	  var reqParamsStr = params.QueryString || '';
	  var onProgress = util.throttleOnProgress.call(this, 0, params.onProgress);
	  var tracker = params.tracker;
	  tracker && tracker.setParams({
	    signStartTime: new Date().getTime()
	  });
	  reqParams['response-content-type'] = params['ResponseContentType'];
	  reqParams['response-content-language'] = params['ResponseContentLanguage'];
	  reqParams['response-expires'] = params['ResponseExpires'];
	  reqParams['response-cache-control'] = params['ResponseCacheControl'];
	  reqParams['response-content-disposition'] = params['ResponseContentDisposition'];
	  reqParams['response-content-encoding'] = params['ResponseContentEncoding']; // 如果用户自己传入了 output

	  submitRequest.call(this, {
	    Action: 'name/cos:GetObject',
	    method: 'GET',
	    Bucket: params.Bucket,
	    Region: params.Region,
	    Key: params.Key,
	    VersionId: params.VersionId,
	    DataType: params.DataType,
	    headers: params.Headers,
	    qs: reqParams,
	    qsStr: reqParamsStr,
	    rawBody: true,
	    onDownloadProgress: onProgress,
	    tracker: tracker
	  }, function (err, data) {
	    onProgress(null, true);

	    if (err) {
	      var statusCode = err.statusCode;

	      if (params.Headers['If-Modified-Since'] && statusCode && statusCode === 304) {
	        return callback(null, {
	          NotModified: true
	        });
	      }

	      return callback(err);
	    }

	    callback(null, {
	      Body: data.body,
	      ETag: util.attr(data.headers, 'etag', ''),
	      statusCode: data.statusCode,
	      headers: data.headers
	    });
	  });
	}
	/**
	 * 上传 object
	 * @param  {Object} params                                          参数对象，必须
	 *     @param  {String}  params.Bucket                              Bucket名称，必须
	 *     @param  {String}  params.Region                              地域名称，必须
	 *     @param  {String}  params.Key                                 文件名称，必须
	 *     @param  {File || Blob || String}  params.Body                上传文件对象或字符串，必须
	 *     @param  {String}  params.CacheControl                        RFC 2616 中定义的缓存策略，将作为 Object 元数据保存，非必须
	 *     @param  {String}  params.ContentDisposition                  RFC 2616 中定义的文件名称，将作为 Object 元数据保存，非必须
	 *     @param  {String}  params.ContentEncoding                     RFC 2616 中定义的编码格式，将作为 Object 元数据保存，非必须
	 *     @param  {String}  params.ContentLength                       RFC 2616 中定义的 HTTP 请求内容长度（字节），必须
	 *     @param  {String}  params.ContentType                         RFC 2616 中定义的内容类型（MIME），将作为 Object 元数据保存，非必须
	 *     @param  {String}  params.Expect                              当使用 Expect: 100-continue 时，在收到服务端确认后，才会发送请求内容，非必须
	 *     @param  {String}  params.Expires                             RFC 2616 中定义的过期时间，将作为 Object 元数据保存，非必须
	 *     @param  {String}  params.ACL                                 允许用户自定义文件权限，有效值：private | public-read，非必须
	 *     @param  {String}  params.GrantRead                           赋予被授权者读取对象的权限，格式：id="[OwnerUin]"，可使用半角逗号（,）分隔多组被授权者，非必须
	 *     @param  {String}  params.GrantReadAcp                        赋予被授权者读取对象的访问控制列表（ACL）的权限，格式：id="[OwnerUin]"，可使用半角逗号（,）分隔多组被授权者，非必须
	 *     @param  {String}  params.GrantWriteAcp                       赋予被授权者写入对象的访问控制列表（ACL）的权限，格式：id="[OwnerUin]"，可使用半角逗号（,）分隔多组被授权者，非必须
	 *     @param  {String}  params.GrantFullControl                    赋予被授权者操作对象的所有权限，格式：id="[OwnerUin]"，可使用半角逗号（,）分隔多组被授权者，非必须
	 *     @param  {String}  params.StorageClass                        设置对象的存储级别，枚举值：STANDARD、STANDARD_IA、ARCHIVE，默认值：STANDARD，非必须
	 *     @param  {String}  params.x-cos-meta-*                        允许用户自定义的头部信息，将作为对象的元数据保存。大小限制2KB，非必须
	 *     @param  {String}  params.ContentSha1                         RFC 3174 中定义的 160-bit 内容 SHA-1 算法校验，非必须
	 *     @param  {String}  params.ServerSideEncryption                支持按照指定的加密算法进行服务端数据加密，格式 x-cos-server-side-encryption: "AES256"，非必须
	 *     @param  {Function}  params.onProgress                        上传进度回调函数
	 * @param  {Function}  callback                                     回调函数，必须
	 * @return  {Object}  err                                           请求失败的错误，如果请求成功，则为空。https://cloud.tencent.com/document/product/436/7730
	 * @return  {Object}  data                                          为对应的 object 数据
	 *     @return  {String}  data.ETag                                 为对应上传文件的 ETag 值
	 */


	function putObject(params, callback) {
	  var self = this;
	  var FileSize = params.ContentLength;
	  var onProgress = util.throttleOnProgress.call(self, FileSize, params.onProgress); // 特殊处理 Cache-Control、Content-Type，避免代理更改这两个字段导致写入到 Object 属性里

	  var headers = params.Headers;
	  if (!headers['Cache-Control'] && !headers['cache-control']) headers['Cache-Control'] = '';
	  if (!headers['Content-Type'] && !headers['content-type']) headers['Content-Type'] = params.Body && params.Body.type || '';
	  var needCalcMd5 = params.UploadAddMetaMd5 || self.options.UploadAddMetaMd5 || self.options.UploadCheckContentMd5;
	  var tracker = params.tracker;
	  needCalcMd5 && tracker && tracker.setParams({
	    md5StartTime: new Date().getTime()
	  });
	  util.getBodyMd5(needCalcMd5, params.Body, function (md5) {
	    if (md5) {
	      tracker && tracker.setParams({
	        md5EndTime: new Date().getTime()
	      });
	      if (self.options.UploadCheckContentMd5) headers['Content-MD5'] = util.b64(md5);
	      if (params.UploadAddMetaMd5 || self.options.UploadAddMetaMd5) headers['x-cos-meta-md5'] = md5;
	    }

	    if (params.ContentLength !== undefined) headers['Content-Length'] = params.ContentLength;
	    onProgress(null, true); // 任务状态开始 uploading

	    submitRequest.call(self, {
	      Action: 'name/cos:PutObject',
	      TaskId: params.TaskId,
	      method: 'PUT',
	      Bucket: params.Bucket,
	      Region: params.Region,
	      Key: params.Key,
	      headers: params.Headers,
	      qs: params.Query,
	      body: params.Body,
	      onProgress: onProgress,
	      tracker: tracker
	    }, function (err, data) {
	      if (err) {
	        onProgress(null, true);
	        return callback(err);
	      }

	      onProgress({
	        loaded: FileSize,
	        total: FileSize
	      }, true);
	      var url = getUrl({
	        ForcePathStyle: self.options.ForcePathStyle,
	        protocol: self.options.Protocol,
	        domain: self.options.Domain,
	        bucket: params.Bucket,
	        region: !self.options.UseAccelerate ? params.Region : 'accelerate',
	        object: params.Key
	      });
	      url = url.substr(url.indexOf('://') + 3);
	      data.Location = url;
	      data.ETag = util.attr(data.headers, 'etag', '');
	      callback(null, data);
	    });
	  }, params.onHashProgress);
	}
	/**
	 * 删除 object
	 * @param  {Object}  params                     参数对象，必须
	 *     @param  {String}  params.Bucket          Bucket名称，必须
	 *     @param  {String}  params.Region          地域名称，必须
	 *     @param  {String}  params.Key             object名称，必须
	 * @param  {Function}  callback                 回调函数，必须
	 * @param  {Object}  err                        请求失败的错误，如果请求成功，则为空。https://cloud.tencent.com/document/product/436/7730
	 * @param  {Object}  data                       删除操作成功之后返回的数据
	 */


	function deleteObject(params, callback) {
	  submitRequest.call(this, {
	    Action: 'name/cos:DeleteObject',
	    method: 'DELETE',
	    Bucket: params.Bucket,
	    Region: params.Region,
	    Key: params.Key,
	    headers: params.Headers,
	    VersionId: params.VersionId,
	    action: params.Recursive ? 'recursive' : ''
	  }, function (err, data) {
	    if (err) {
	      var statusCode = err.statusCode;

	      if (statusCode && statusCode === 404) {
	        return callback(null, {
	          BucketNotFound: true,
	          statusCode: statusCode
	        });
	      } else {
	        return callback(err);
	      }
	    }

	    callback(null, {
	      statusCode: data.statusCode,
	      headers: data.headers
	    });
	  });
	}
	/**
	 * 获取 object 的 权限列表
	 * @param  {Object}  params                         参数对象，必须
	 *     @param  {String}  params.Bucket              Bucket名称，必须
	 *     @param  {String}  params.Region              地域名称，必须
	 *     @param  {String}  params.Key                 object名称，必须
	 * @param  {Function}  callback                     回调函数，必须
	 * @return  {Object}  err                           请求失败的错误，如果请求成功，则为空。https://cloud.tencent.com/document/product/436/7730
	 * @return  {Object}  data                          返回的数据
	 *     @return  {Object}  data.AccessControlPolicy  权限列表
	 */


	function getObjectAcl(params, callback) {
	  var reqParams = {};

	  if (params.VersionId) {
	    reqParams.versionId = params.VersionId;
	  }

	  submitRequest.call(this, {
	    Action: 'name/cos:GetObjectACL',
	    method: 'GET',
	    Bucket: params.Bucket,
	    Region: params.Region,
	    Key: params.Key,
	    headers: params.Headers,
	    qs: reqParams,
	    action: 'acl'
	  }, function (err, data) {
	    if (err) return callback(err);
	    var AccessControlPolicy = data.AccessControlPolicy || {};
	    var Owner = AccessControlPolicy.Owner || {};
	    var Grant = AccessControlPolicy.AccessControlList && AccessControlPolicy.AccessControlList.Grant || [];
	    Grant = util.isArray(Grant) ? Grant : [Grant];
	    var result = decodeAcl(AccessControlPolicy);
	    delete result.GrantWrite;

	    if (data.headers && data.headers['x-cos-acl']) {
	      result.ACL = data.headers['x-cos-acl'];
	    }

	    result = util.extend(result, {
	      Owner: Owner,
	      Grants: Grant,
	      statusCode: data.statusCode,
	      headers: data.headers
	    });
	    callback(null, result);
	  });
	}
	/**
	 * 设置 object 的 权限列表
	 * @param  {Object}  params             参数对象，必须
	 *     @param  {String}  params.Bucket  Bucket名称，必须
	 *     @param  {String}  params.Region  地域名称，必须
	 *     @param  {String}  params.Key     object名称，必须
	 * @param  {Function}  callback         回调函数，必须
	 * @return  {Object}  err               请求失败的错误，如果请求成功，则为空。https://cloud.tencent.com/document/product/436/7730
	 * @return  {Object}  data              返回的数据
	 */


	function putObjectAcl(params, callback) {
	  var headers = params.Headers;
	  var xml = '';

	  if (params['AccessControlPolicy']) {
	    var AccessControlPolicy = util.clone(params['AccessControlPolicy'] || {});
	    var Grants = AccessControlPolicy.Grants || AccessControlPolicy.Grant;
	    Grants = util.isArray(Grants) ? Grants : [Grants];
	    delete AccessControlPolicy.Grant;
	    delete AccessControlPolicy.Grants;
	    AccessControlPolicy.AccessControlList = {
	      Grant: Grants
	    };
	    xml = util.json2xml({
	      AccessControlPolicy: AccessControlPolicy
	    });
	    headers['Content-Type'] = 'application/xml';
	    headers['Content-MD5'] = util.b64(util.md5(xml));
	  } // Grant Header 去重


	  util.each(headers, function (val, key) {
	    if (key.indexOf('x-cos-grant-') === 0) {
	      headers[key] = uniqGrant(headers[key]);
	    }
	  });
	  submitRequest.call(this, {
	    Action: 'name/cos:PutObjectACL',
	    method: 'PUT',
	    Bucket: params.Bucket,
	    Region: params.Region,
	    Key: params.Key,
	    action: 'acl',
	    headers: headers,
	    body: xml
	  }, function (err, data) {
	    if (err) return callback(err);
	    callback(null, {
	      statusCode: data.statusCode,
	      headers: data.headers
	    });
	  });
	}
	/**
	 * Options Object请求实现跨域访问的预请求。即发出一个 OPTIONS 请求给服务器以确认是否可以进行跨域操作。
	 * @param  {Object}  params             参数对象，必须
	 *     @param  {String}  params.Bucket  Bucket名称，必须
	 *     @param  {String}  params.Region  地域名称，必须
	 *     @param  {String}  params.Key     object名称，必须
	 * @param  {Function}  callback         回调函数，必须
	 * @return  {Object}  err               请求失败的错误，如果请求成功，则为空。https://cloud.tencent.com/document/product/436/7730
	 * @return  {Object}  data              返回的数据
	 */


	function optionsObject(params, callback) {
	  var headers = params.Headers;
	  headers['Origin'] = params['Origin'];
	  headers['Access-Control-Request-Method'] = params['AccessControlRequestMethod'];
	  headers['Access-Control-Request-Headers'] = params['AccessControlRequestHeaders'];
	  submitRequest.call(this, {
	    Action: 'name/cos:OptionsObject',
	    method: 'OPTIONS',
	    Bucket: params.Bucket,
	    Region: params.Region,
	    Key: params.Key,
	    headers: headers
	  }, function (err, data) {
	    if (err) {
	      if (err.statusCode && err.statusCode === 403) {
	        return callback(null, {
	          OptionsForbidden: true,
	          statusCode: err.statusCode
	        });
	      }

	      return callback(err);
	    }

	    var headers = data.headers || {};
	    callback(null, {
	      AccessControlAllowOrigin: headers['access-control-allow-origin'],
	      AccessControlAllowMethods: headers['access-control-allow-methods'],
	      AccessControlAllowHeaders: headers['access-control-allow-headers'],
	      AccessControlExposeHeaders: headers['access-control-expose-headers'],
	      AccessControlMaxAge: headers['access-control-max-age'],
	      statusCode: data.statusCode,
	      headers: data.headers
	    });
	  });
	}
	/**
	 * @param  {Object}                                     参数列表
	 *     @param  {String}  Bucket                         Bucket 名称
	 *     @param  {String}  Region                         地域名称
	 *     @param  {String}  Key                            文件名称
	 *     @param  {String}  CopySource                     源文件URL绝对路径，可以通过versionid子资源指定历史版本
	 *     @param  {String}  ACL                            允许用户自定义文件权限。有效值：private，public-read默认值：private。
	 *     @param  {String}  GrantRead                      赋予被授权者读的权限，格式 x-cos-grant-read: uin=" ",uin=" "，当需要给子账户授权时，uin="RootAcountID/SubAccountID"，当需要给根账户授权时，uin="RootAcountID"。
	 *     @param  {String}  GrantWrite                     赋予被授权者写的权限，格式 x-cos-grant-write: uin=" ",uin=" "，当需要给子账户授权时，uin="RootAcountID/SubAccountID"，当需要给根账户授权时，uin="RootAcountID"。
	 *     @param  {String}  GrantFullControl               赋予被授权者读写权限，格式 x-cos-grant-full-control: uin=" ",uin=" "，当需要给子账户授权时，uin="RootAcountID/SubAccountID"，当需要给根账户授权时，uin="RootAcountID"。
	 *     @param  {String}  MetadataDirective              是否拷贝元数据，枚举值：Copy, Replaced，默认值Copy。假如标记为Copy，忽略Header中的用户元数据信息直接复制；假如标记为Replaced，按Header信息修改元数据。当目标路径和原路径一致，即用户试图修改元数据时，必须为Replaced
	 *     @param  {String}  CopySourceIfModifiedSince      当Object在指定时间后被修改，则执行操作，否则返回412。可与x-cos-copy-source-If-None-Match一起使用，与其他条件联合使用返回冲突。
	 *     @param  {String}  CopySourceIfUnmodifiedSince    当Object在指定时间后未被修改，则执行操作，否则返回412。可与x-cos-copy-source-If-Match一起使用，与其他条件联合使用返回冲突。
	 *     @param  {String}  CopySourceIfMatch              当Object的ETag和给定一致时，则执行操作，否则返回412。可与x-cos-copy-source-If-Unmodified-Since一起使用，与其他条件联合使用返回冲突。
	 *     @param  {String}  CopySourceIfNoneMatch          当Object的ETag和给定不一致时，则执行操作，否则返回412。可与x-cos-copy-source-If-Modified-Since一起使用，与其他条件联合使用返回冲突。
	 *     @param  {String}  StorageClass                   存储级别，枚举值：存储级别，枚举值：Standard, Standard_IA，Archive；默认值：Standard
	 *     @param  {String}  CacheControl                   指定所有缓存机制在整个请求/响应链中必须服从的指令。
	 *     @param  {String}  ContentDisposition             MIME 协议的扩展，MIME 协议指示 MIME 用户代理如何显示附加的文件
	 *     @param  {String}  ContentEncoding                HTTP 中用来对「采用何种编码格式传输正文」进行协定的一对头部字段
	 *     @param  {String}  ContentLength                  设置响应消息的实体内容的大小，单位为字节
	 *     @param  {String}  ContentType                    RFC 2616 中定义的 HTTP 请求内容类型（MIME），例如text/plain
	 *     @param  {String}  Expect                         请求的特定的服务器行为
	 *     @param  {String}  Expires                        响应过期的日期和时间
	 *     @param  {String}  params.ServerSideEncryption   支持按照指定的加密算法进行服务端数据加密，格式 x-cos-server-side-encryption: "AES256"，非必须
	 *     @param  {String}  ContentLanguage                指定内容语言
	 *     @param  {String}  x-cos-meta-*                   允许用户自定义的头部信息，将作为 Object 元数据返回。大小限制2K。
	 */


	function putObjectCopy(params, callback) {
	  // 特殊处理 Cache-Control
	  var self = this;
	  var headers = params.Headers;
	  if (!headers['Cache-Control'] && !headers['cache-control']) headers['Cache-Control'] = '';
	  var CopySource = params.CopySource || '';
	  var m = util.getSourceParams.call(this, CopySource);

	  if (!m) {
	    callback(util.error(new Error('CopySource format error')));
	    return;
	  }

	  var SourceBucket = m.Bucket;
	  var SourceRegion = m.Region;
	  var SourceKey = decodeURIComponent(m.Key);
	  submitRequest.call(this, {
	    Scope: [{
	      action: 'name/cos:GetObject',
	      bucket: SourceBucket,
	      region: SourceRegion,
	      prefix: SourceKey
	    }, {
	      action: 'name/cos:PutObject',
	      bucket: params.Bucket,
	      region: params.Region,
	      prefix: params.Key
	    }],
	    method: 'PUT',
	    Bucket: params.Bucket,
	    Region: params.Region,
	    Key: params.Key,
	    VersionId: params.VersionId,
	    headers: params.Headers
	  }, function (err, data) {
	    if (err) return callback(err);
	    var result = util.clone(data.CopyObjectResult || {});
	    var url = getUrl({
	      ForcePathStyle: self.options.ForcePathStyle,
	      protocol: self.options.Protocol,
	      domain: self.options.Domain,
	      bucket: params.Bucket,
	      region: params.Region,
	      object: params.Key,
	      isLocation: true
	    });
	    util.extend(result, {
	      Location: url,
	      statusCode: data.statusCode,
	      headers: data.headers
	    });
	    callback(null, result);
	  });
	}

	function uploadPartCopy(params, callback) {
	  var CopySource = params.CopySource || '';
	  var m = util.getSourceParams.call(this, CopySource);

	  if (!m) {
	    callback(util.error(new Error('CopySource format error')));
	    return;
	  }

	  var SourceBucket = m.Bucket;
	  var SourceRegion = m.Region;
	  var SourceKey = decodeURIComponent(m.Key);
	  submitRequest.call(this, {
	    Scope: [{
	      action: 'name/cos:GetObject',
	      bucket: SourceBucket,
	      region: SourceRegion,
	      prefix: SourceKey
	    }, {
	      action: 'name/cos:PutObject',
	      bucket: params.Bucket,
	      region: params.Region,
	      prefix: params.Key
	    }],
	    method: 'PUT',
	    Bucket: params.Bucket,
	    Region: params.Region,
	    Key: params.Key,
	    VersionId: params.VersionId,
	    qs: {
	      partNumber: params['PartNumber'],
	      uploadId: params['UploadId']
	    },
	    headers: params.Headers
	  }, function (err, data) {
	    if (err) return callback(err);
	    var result = util.clone(data.CopyPartResult || {});
	    util.extend(result, {
	      statusCode: data.statusCode,
	      headers: data.headers
	    });
	    callback(null, result);
	  });
	}

	function deleteMultipleObject(params, callback) {
	  var Objects = params.Objects || [];
	  var Quiet = params.Quiet;
	  Objects = util.isArray(Objects) ? Objects : [Objects];
	  var xml = util.json2xml({
	    Delete: {
	      Object: Objects,
	      Quiet: Quiet || false
	    }
	  });
	  var headers = params.Headers;
	  headers['Content-Type'] = 'application/xml';
	  headers['Content-MD5'] = util.b64(util.md5(xml));
	  var Scope = util.map(Objects, function (v) {
	    return {
	      action: 'name/cos:DeleteObject',
	      bucket: params.Bucket,
	      region: params.Region,
	      prefix: v.Key
	    };
	  });
	  submitRequest.call(this, {
	    Scope: Scope,
	    method: 'POST',
	    Bucket: params.Bucket,
	    Region: params.Region,
	    body: xml,
	    action: 'delete',
	    headers: headers
	  }, function (err, data) {
	    if (err) return callback(err);
	    var DeleteResult = data.DeleteResult || {};
	    var Deleted = DeleteResult.Deleted || [];
	    var Errors = DeleteResult.Error || [];
	    Deleted = util.isArray(Deleted) ? Deleted : [Deleted];
	    Errors = util.isArray(Errors) ? Errors : [Errors];
	    var result = util.clone(DeleteResult);
	    util.extend(result, {
	      Error: Errors,
	      Deleted: Deleted,
	      statusCode: data.statusCode,
	      headers: data.headers
	    });
	    callback(null, result);
	  });
	}

	function restoreObject(params, callback) {
	  var headers = params.Headers;

	  if (!params['RestoreRequest']) {
	    callback(util.error(new Error('missing param RestoreRequest')));
	    return;
	  }

	  var RestoreRequest = params.RestoreRequest || {};
	  var xml = util.json2xml({
	    RestoreRequest: RestoreRequest
	  });
	  headers['Content-Type'] = 'application/xml';
	  headers['Content-MD5'] = util.b64(util.md5(xml));
	  submitRequest.call(this, {
	    Action: 'name/cos:RestoreObject',
	    method: 'POST',
	    Bucket: params.Bucket,
	    Region: params.Region,
	    Key: params.Key,
	    VersionId: params.VersionId,
	    body: xml,
	    action: 'restore',
	    headers: headers
	  }, callback);
	}
	/**
	 * 设置 Object 的标签
	 * @param  {Object}  params             参数对象，必须
	 *     @param  {String}  params.Bucket  Object名称，必须
	 *     @param  {String}  params.Region  地域名称，必须
	 *     @param  {Array}   params.TagSet  标签设置，必须
	 * @param  {Function}  callback         回调函数，必须
	 * @return  {Object}  err               请求失败的错误，如果请求成功，则为空。https://cloud.tencent.com/document/product/436/42998
	 * @return  {Object}  data              返回数据
	 */


	function putObjectTagging(params, callback) {
	  var Tagging = params['Tagging'] || {};
	  var Tags = Tagging.TagSet || Tagging.Tags || params['Tags'] || [];
	  Tags = util.clone(util.isArray(Tags) ? Tags : [Tags]);
	  var xml = util.json2xml({
	    Tagging: {
	      TagSet: {
	        Tag: Tags
	      }
	    }
	  });
	  var headers = params.Headers;
	  headers['Content-Type'] = 'application/xml';
	  headers['Content-MD5'] = util.b64(util.md5(xml));
	  submitRequest.call(this, {
	    Action: 'name/cos:PutObjectTagging',
	    method: 'PUT',
	    Bucket: params.Bucket,
	    Key: params.Key,
	    Region: params.Region,
	    body: xml,
	    action: 'tagging',
	    headers: headers,
	    VersionId: params.VersionId
	  }, function (err, data) {
	    if (err && err.statusCode === 204) {
	      return callback(null, {
	        statusCode: err.statusCode
	      });
	    } else if (err) {
	      return callback(err);
	    }

	    callback(null, {
	      statusCode: data.statusCode,
	      headers: data.headers
	    });
	  });
	}
	/**
	 * 获取 Object 的标签设置
	 * @param  {Object}  params             参数对象，必须
	 *     @param  {String}  params.Bucket  Bucket名称，必须
	 *     @param  {String}  params.Region  地域名称，必须
	 * @param  {Function}  callback         回调函数，必须
	 * @return  {Object}  err               请求失败的错误，如果请求成功，则为空。https://cloud.tencent.com/document/product/436/42998
	 * @return  {Object}  data              返回数据
	 */


	function getObjectTagging(params, callback) {
	  submitRequest.call(this, {
	    Action: 'name/cos:GetObjectTagging',
	    method: 'GET',
	    Key: params.Key,
	    Bucket: params.Bucket,
	    Region: params.Region,
	    headers: params.Headers,
	    action: 'tagging',
	    VersionId: params.VersionId
	  }, function (err, data) {
	    if (err) {
	      if (err.statusCode === 404 && err.error && (err.error === 'Not Found' || err.error.Code === 'NoSuchTagSet')) {
	        var result = {
	          Tags: [],
	          statusCode: err.statusCode
	        };
	        err.headers && (result.headers = err.headers);
	        callback(null, result);
	      } else {
	        callback(err);
	      }

	      return;
	    }

	    var Tags = [];

	    try {
	      Tags = data.Tagging.TagSet.Tag || [];
	    } catch (e) {}

	    Tags = util.clone(util.isArray(Tags) ? Tags : [Tags]);
	    callback(null, {
	      Tags: Tags,
	      statusCode: data.statusCode,
	      headers: data.headers
	    });
	  });
	}
	/**
	 * 删除 Object 的 标签设置
	 * @param  {Object}  params             参数对象，必须
	 *     @param  {String}  params.Bucket  Object名称，必须
	 *     @param  {String}  params.Region  地域名称，必须
	 * @param  {Function}  callback         回调函数，必须
	 * @return  {Object}  err               请求失败的错误，如果请求成功，则为空。https://cloud.tencent.com/document/product/436/42998
	 * @return  {Object}  data              返回的数据
	 */


	function deleteObjectTagging(params, callback) {
	  submitRequest.call(this, {
	    Action: 'name/cos:DeleteObjectTagging',
	    method: 'DELETE',
	    Bucket: params.Bucket,
	    Region: params.Region,
	    Key: params.Key,
	    headers: params.Headers,
	    action: 'tagging',
	    VersionId: params.VersionId
	  }, function (err, data) {
	    if (err && err.statusCode === 204) {
	      return callback(null, {
	        statusCode: err.statusCode
	      });
	    } else if (err) {
	      return callback(err);
	    }

	    callback(null, {
	      statusCode: data.statusCode,
	      headers: data.headers
	    });
	  });
	}
	/**
	 * 使用 SQL 语句从指定对象（CSV 格式或者 JSON 格式）中检索内容
	 * @param  {Object}  params                   参数对象，必须
	 *     @param  {String}  params.Bucket        Object名称，必须
	 *     @param  {String}  params.Region        地域名称，必须
	 *     @param  {Object}  params.SelectRequest 地域名称，必须
	 * @param  {Function}  callback               回调函数，必须
	 * @return  {Object}  err                     请求失败的错误，如果请求成功，则为空。https://cloud.tencent.com/document/product/436/42998
	 * @return  {Object}  data                    返回的数据
	 */


	function selectObjectContent(params, callback) {
	  var SelectType = params['SelectType'];
	  if (!SelectType) return callback(util.error(new Error('missing param SelectType')));
	  var SelectRequest = params['SelectRequest'] || {};
	  var xml = util.json2xml({
	    SelectRequest: SelectRequest
	  });
	  var headers = params.Headers;
	  headers['Content-Type'] = 'application/xml';
	  headers['Content-MD5'] = util.b64(util.md5(xml));
	  submitRequest.call(this, {
	    Action: 'name/cos:GetObject',
	    method: 'POST',
	    Bucket: params.Bucket,
	    Region: params.Region,
	    Key: params.Key,
	    headers: params.Headers,
	    action: 'select',
	    qs: {
	      'select-type': params['SelectType']
	    },
	    VersionId: params.VersionId,
	    body: xml,
	    DataType: 'arraybuffer',
	    rawBody: true
	  }, function (err, data) {
	    if (err && err.statusCode === 204) {
	      return callback(null, {
	        statusCode: err.statusCode
	      });
	    } else if (err) {
	      return callback(err);
	    }

	    var result = util.parseSelectPayload(data.body);
	    callback(null, {
	      statusCode: data.statusCode,
	      headers: data.headers,
	      Body: result.body,
	      Payload: result.payload
	    });
	  });
	} // 分块上传

	/**
	 * 初始化分块上传
	 * @param  {Object}  params                                     参数对象，必须
	 *     @param  {String}  params.Bucket                          Bucket名称，必须
	 *     @param  {String}  params.Region                          地域名称，必须
	 *     @param  {String}  params.Key                             object名称，必须
	 *     @param  {String}  params.UploadId                        object名称，必须
	 *     @param  {String}  params.CacheControl                    RFC 2616 中定义的缓存策略，将作为 Object 元数据保存，非必须
	 *     @param  {String}  params.ContentDisposition              RFC 2616 中定义的文件名称，将作为 Object 元数据保存    ，非必须
	 *     @param  {String}  params.ContentEncoding                 RFC 2616 中定义的编码格式，将作为 Object 元数据保存，非必须
	 *     @param  {String}  params.ContentType                     RFC 2616 中定义的内容类型（MIME），将作为 Object 元数据保存，非必须
	 *     @param  {String}  params.Expires                         RFC 2616 中定义的过期时间，将作为 Object 元数据保存，非必须
	 *     @param  {String}  params.ACL                             允许用户自定义文件权限，非必须
	 *     @param  {String}  params.GrantRead                       赋予被授权者读的权限 ，非必须
	 *     @param  {String}  params.GrantWrite                      赋予被授权者写的权限 ，非必须
	 *     @param  {String}  params.GrantFullControl                赋予被授权者读写权限 ，非必须
	 *     @param  {String}  params.StorageClass                    设置Object的存储级别，枚举值：Standard，Standard_IA，Archive，非必须
	 *     @param  {String}  params.ServerSideEncryption           支持按照指定的加密算法进行服务端数据加密，格式 x-cos-server-side-encryption: "AES256"，非必须
	 * @param  {Function}  callback                                 回调函数，必须
	 * @return  {Object}  err                                       请求失败的错误，如果请求成功，则为空。https://cloud.tencent.com/document/product/436/7730
	 * @return  {Object}  data                                      返回的数据
	 */


	function multipartInit(params, callback) {
	  var self = this; // 特殊处理 Cache-Control

	  var headers = params.Headers;
	  var tracker = params.tracker; // 特殊处理 Cache-Control、Content-Type

	  if (!headers['Cache-Control'] && !headers['cache-control']) headers['Cache-Control'] = '';
	  if (!headers['Content-Type'] && !headers['content-type']) headers['Content-Type'] = params.Body && params.Body.type || '';
	  var needCalcMd5 = params.Body && (params.UploadAddMetaMd5 || self.options.UploadAddMetaMd5);
	  needCalcMd5 && tracker && tracker.setParams({
	    md5StartTime: new Date().getTime()
	  });
	  util.getBodyMd5(needCalcMd5, params.Body, function (md5) {
	    if (md5) params.Headers['x-cos-meta-md5'] = md5;
	    needCalcMd5 && tracker && tracker.setParams({
	      md5EndTime: new Date().getTime()
	    });
	    submitRequest.call(self, {
	      Action: 'name/cos:InitiateMultipartUpload',
	      method: 'POST',
	      Bucket: params.Bucket,
	      Region: params.Region,
	      Key: params.Key,
	      action: 'uploads',
	      headers: params.Headers,
	      qs: params.Query,
	      tracker: tracker
	    }, function (err, data) {
	      if (err) {
	        tracker && tracker.parent && tracker.parent.setParams({
	          errorNode: 'multipartInit'
	        });
	        return callback(err);
	      }

	      data = util.clone(data || {});

	      if (data && data.InitiateMultipartUploadResult) {
	        return callback(null, util.extend(data.InitiateMultipartUploadResult, {
	          statusCode: data.statusCode,
	          headers: data.headers
	        }));
	      }

	      callback(null, data);
	    });
	  }, params.onHashProgress);
	}
	/**
	 * 分块上传
	 * @param  {Object}  params                                 参数对象，必须
	 *     @param  {String}  params.Bucket                      Bucket名称，必须
	 *     @param  {String}  params.Region                      地域名称，必须
	 *     @param  {String}  params.Key                         object名称，必须
	 *     @param  {File || Blob || String}  params.Body        上传文件对象或字符串
	 *     @param  {String} params.ContentLength                RFC 2616 中定义的 HTTP 请求内容长度（字节），非必须
	 *     @param  {String} params.Expect                       当使用 Expect: 100-continue 时，在收到服务端确认后，才会发送请求内容，非必须
	 *     @param  {String} params.ServerSideEncryption         支持按照指定的加密算法进行服务端数据加密，格式 x-cos-server-side-encryption: "AES256"，非必须
	 *     @param  {String} params.ContentSha1                  RFC 3174 中定义的 160-bit 内容 SHA-1 算法校验值，非必须
	 * @param  {Function}  callback                             回调函数，必须
	 *     @return  {Object}  err                               请求失败的错误，如果请求成功，则为空。https://cloud.tencent.com/document/product/436/7730
	 *     @return  {Object}  data                              返回的数据
	 *     @return  {Object}  data.ETag                         返回的文件分块 sha1 值
	 */


	function multipartUpload(params, callback) {
	  var self = this;
	  util.getFileSize('multipartUpload', params, function () {
	    var tracker = params.tracker;
	    var needCalcMd5 = self.options.UploadCheckContentMd5;
	    needCalcMd5 && tracker && tracker.setParams({
	      md5StartTime: new Date().getTime()
	    });
	    util.getBodyMd5(needCalcMd5, params.Body, function (md5) {
	      if (md5) params.Headers['Content-MD5'] = util.b64(md5);
	      needCalcMd5 && tracker && tracker.setParams({
	        md5EndTime: new Date().getTime()
	      });
	      tracker && tracker.setParams({
	        partNumber: params.PartNumber
	      });
	      submitRequest.call(self, {
	        Action: 'name/cos:UploadPart',
	        TaskId: params.TaskId,
	        method: 'PUT',
	        Bucket: params.Bucket,
	        Region: params.Region,
	        Key: params.Key,
	        qs: {
	          partNumber: params['PartNumber'],
	          uploadId: params['UploadId']
	        },
	        headers: params.Headers,
	        onProgress: params.onProgress,
	        body: params.Body || null,
	        tracker: tracker
	      }, function (err, data) {
	        if (err) {
	          tracker && tracker.parent && tracker.parent.setParams({
	            errorNode: 'multipartUpload'
	          });
	          return callback(err);
	        }

	        callback(null, {
	          ETag: util.attr(data.headers, 'etag', ''),
	          statusCode: data.statusCode,
	          headers: data.headers
	        });
	      });
	    });
	  });
	}
	/**
	 * 完成分块上传
	 * @param  {Object}  params                             参数对象，必须
	 *     @param  {String}  params.Bucket                  Bucket名称，必须
	 *     @param  {String}  params.Region                  地域名称，必须
	 *     @param  {String}  params.Key                     object名称，必须
	 *     @param  {Array}   params.Parts                   分块信息列表，必须
	 *     @param  {String}  params.Parts[i].PartNumber     块编号，必须
	 *     @param  {String}  params.Parts[i].ETag           分块的 sha1 校验值
	 * @param  {Function}  callback                         回调函数，必须
	 * @return  {Object}  err                               请求失败的错误，如果请求成功，则为空。https://cloud.tencent.com/document/product/436/7730
	 * @return  {Object}  data                              返回的数据
	 *     @return  {Object}  data.CompleteMultipartUpload  完成分块上传后的文件信息，包括Location, Bucket, Key 和 ETag
	 */


	function multipartComplete(params, callback) {
	  var self = this;
	  var UploadId = params.UploadId;
	  var Parts = params['Parts'];
	  var tracker = params.tracker;

	  for (var i = 0, len = Parts.length; i < len; i++) {
	    if (Parts[i]['ETag'] && Parts[i]['ETag'].indexOf('"') === 0) {
	      continue;
	    }

	    Parts[i]['ETag'] = '"' + Parts[i]['ETag'] + '"';
	  }

	  var xml = util.json2xml({
	    CompleteMultipartUpload: {
	      Part: Parts
	    }
	  }); // CSP/ceph CompleteMultipartUpload 接口 body 写死了限制 1MB，这里醉倒 10000 片时，xml 字符串去掉空格853KB

	  xml = xml.replace(/\n\s*/g, '');
	  var headers = params.Headers;
	  headers['Content-Type'] = 'application/xml';
	  headers['Content-MD5'] = util.b64(util.md5(xml));
	  submitRequest.call(this, {
	    Action: 'name/cos:CompleteMultipartUpload',
	    method: 'POST',
	    Bucket: params.Bucket,
	    Region: params.Region,
	    Key: params.Key,
	    qs: {
	      uploadId: UploadId
	    },
	    body: xml,
	    headers: headers,
	    tracker: tracker
	  }, function (err, data) {
	    if (err) {
	      tracker && tracker.parent && tracker.parent.setParams({
	        errorNode: 'multipartComplete'
	      });
	      return callback(err);
	    }

	    var url = getUrl({
	      ForcePathStyle: self.options.ForcePathStyle,
	      protocol: self.options.Protocol,
	      domain: self.options.Domain,
	      bucket: params.Bucket,
	      region: params.Region,
	      object: params.Key,
	      isLocation: true
	    });
	    var res = data.CompleteMultipartUploadResult || {};

	    if (res.ProcessResults) {
	      if (res && res.ProcessResults) {
	        res.UploadResult = {
	          OriginalInfo: {
	            Key: res.Key,
	            Location: url,
	            ETag: res.ETag,
	            ImageInfo: res.ImageInfo
	          },
	          ProcessResults: res.ProcessResults
	        };
	        delete res.ImageInfo;
	        delete res.ProcessResults;
	      }
	    }

	    var result = util.extend(res, {
	      Location: url,
	      statusCode: data.statusCode,
	      headers: data.headers
	    });
	    callback(null, result);
	  });
	}
	/**
	 * 分块上传任务列表查询
	 * @param  {Object}  params                                 参数对象，必须
	 *     @param  {String}  params.Bucket                      Bucket名称，必须
	 *     @param  {String}  params.Region                      地域名称，必须
	 *     @param  {String}  params.Delimiter                   定界符为一个符号，如果有Prefix，则将Prefix到delimiter之间的相同路径归为一类，定义为Common Prefix，然后列出所有Common Prefix。如果没有Prefix，则从路径起点开始，非必须
	 *     @param  {String}  params.EncodingType                规定返回值的编码方式，非必须
	 *     @param  {String}  params.Prefix                      前缀匹配，用来规定返回的文件前缀地址，非必须
	 *     @param  {String}  params.MaxUploads                  单次返回最大的条目数量，默认1000，非必须
	 *     @param  {String}  params.KeyMarker                   与upload-id-marker一起使用 </Br>当upload-id-marker未被指定时，ObjectName字母顺序大于key-marker的条目将被列出 </Br>当upload-id-marker被指定时，ObjectName字母顺序大于key-marker的条目被列出，ObjectName字母顺序等于key-marker同时UploadId大于upload-id-marker的条目将被列出，非必须
	 *     @param  {String}  params.UploadIdMarker              与key-marker一起使用 </Br>当key-marker未被指定时，upload-id-marker将被忽略 </Br>当key-marker被指定时，ObjectName字母顺序大于key-marker的条目被列出，ObjectName字母顺序等于key-marker同时UploadId大于upload-id-marker的条目将被列出，非必须
	 * @param  {Function}  callback                             回调函数，必须
	 * @return  {Object}  err                                   请求失败的错误，如果请求成功，则为空。https://cloud.tencent.com/document/product/436/7730
	 * @return  {Object}  data                                  返回的数据
	 *     @return  {Object}  data.ListMultipartUploadsResult   分块上传任务信息
	 */


	function multipartList(params, callback) {
	  var reqParams = {};
	  reqParams['delimiter'] = params['Delimiter'];
	  reqParams['encoding-type'] = params['EncodingType'];
	  reqParams['prefix'] = params['Prefix'] || '';
	  reqParams['max-uploads'] = params['MaxUploads'];
	  reqParams['key-marker'] = params['KeyMarker'];
	  reqParams['upload-id-marker'] = params['UploadIdMarker'];
	  reqParams = util.clearKey(reqParams);
	  var tracker = params.tracker;
	  tracker && tracker.setParams({
	    signStartTime: new Date().getTime()
	  });
	  submitRequest.call(this, {
	    Action: 'name/cos:ListMultipartUploads',
	    ResourceKey: reqParams['prefix'],
	    method: 'GET',
	    Bucket: params.Bucket,
	    Region: params.Region,
	    headers: params.Headers,
	    qs: reqParams,
	    action: 'uploads',
	    tracker: tracker
	  }, function (err, data) {
	    if (err) {
	      tracker && tracker.parent && tracker.parent.setParams({
	        errorNode: 'multipartList'
	      });
	      return callback(err);
	    }

	    if (data && data.ListMultipartUploadsResult) {
	      var Upload = data.ListMultipartUploadsResult.Upload || [];
	      Upload = util.isArray(Upload) ? Upload : [Upload];
	      data.ListMultipartUploadsResult.Upload = Upload;
	    }

	    var result = util.clone(data.ListMultipartUploadsResult || {});
	    util.extend(result, {
	      statusCode: data.statusCode,
	      headers: data.headers
	    });
	    callback(null, result);
	  });
	}
	/**
	 * 上传的分块列表查询
	 * @param  {Object}  params                                 参数对象，必须
	 *     @param  {String}  params.Bucket                      Bucket名称，必须
	 *     @param  {String}  params.Region                      地域名称，必须
	 *     @param  {String}  params.Key                         object名称，必须
	 *     @param  {String}  params.UploadId                    标示本次分块上传的ID，必须
	 *     @param  {String}  params.EncodingType                规定返回值的编码方式，非必须
	 *     @param  {String}  params.MaxParts                    单次返回最大的条目数量，默认1000，非必须
	 *     @param  {String}  params.PartNumberMarker            默认以UTF-8二进制顺序列出条目，所有列出条目从marker开始，非必须
	 * @param  {Function}  callback                             回调函数，必须
	 * @return  {Object}  err                                   请求失败的错误，如果请求成功，则为空。https://cloud.tencent.com/document/product/436/7730
	 * @return  {Object}  data                                  返回的数据
	 *     @return  {Object}  data.ListMultipartUploadsResult   分块信息
	 */


	function multipartListPart(params, callback) {
	  var reqParams = {};
	  var tracker = params.tracker;
	  reqParams['uploadId'] = params['UploadId'];
	  reqParams['encoding-type'] = params['EncodingType'];
	  reqParams['max-parts'] = params['MaxParts'];
	  reqParams['part-number-marker'] = params['PartNumberMarker'];
	  submitRequest.call(this, {
	    Action: 'name/cos:ListParts',
	    method: 'GET',
	    Bucket: params.Bucket,
	    Region: params.Region,
	    Key: params.Key,
	    headers: params.Headers,
	    qs: reqParams
	  }, function (err, data) {
	    if (err) {
	      tracker && tracker.parent && tracker.parent.setParams({
	        errorNode: 'multipartListPart'
	      });
	      return callback(err);
	    }

	    var ListPartsResult = data.ListPartsResult || {};
	    var Part = ListPartsResult.Part || [];
	    Part = util.isArray(Part) ? Part : [Part];
	    ListPartsResult.Part = Part;
	    var result = util.clone(ListPartsResult);
	    util.extend(result, {
	      statusCode: data.statusCode,
	      headers: data.headers
	    });
	    callback(null, result);
	  });
	}
	/**
	 * 抛弃分块上传
	 * @param  {Object}  params                 参数对象，必须
	 *     @param  {String}  params.Bucket      Bucket名称，必须
	 *     @param  {String}  params.Region      地域名称，必须
	 *     @param  {String}  params.Key         object名称，必须
	 *     @param  {String}  params.UploadId    标示本次分块上传的ID，必须
	 * @param  {Function}  callback             回调函数，必须
	 *     @return  {Object}    err             请求失败的错误，如果请求成功，则为空。https://cloud.tencent.com/document/product/436/7730
	 *     @return  {Object}    data            返回的数据
	 */


	function multipartAbort(params, callback) {
	  var reqParams = {};
	  reqParams['uploadId'] = params['UploadId'];
	  submitRequest.call(this, {
	    Action: 'name/cos:AbortMultipartUpload',
	    method: 'DELETE',
	    Bucket: params.Bucket,
	    Region: params.Region,
	    Key: params.Key,
	    headers: params.Headers,
	    qs: reqParams
	  }, function (err, data) {
	    if (err) return callback(err);
	    callback(null, {
	      statusCode: data.statusCode,
	      headers: data.headers
	    });
	  });
	}
	/**
	 * 抛弃分块上传
	 * @param  {Object}  params                 参数对象，必须
	 *     @param  {String}  params.Bucket      Bucket名称，必须
	 *     @param  {String}  params.Region      地域名称，必须
	 *     @param  {String}  params.Key         object名称，必须
	 *     @param  {String}  params.UploadId    标示本次分块上传的ID，必须
	 * @param  {Function}  callback             回调函数，必须
	 *     @return  {Object}    err             请求失败的错误，如果请求成功，则为空。https://cloud.tencent.com/document/product/436/7730
	 *     @return  {Object}    data            返回的数据
	 */


	function request(params, callback) {
	  submitRequest.call(this, {
	    method: params.Method,
	    Bucket: params.Bucket,
	    Region: params.Region,
	    Key: params.Key,
	    action: params.Action,
	    headers: params.Headers,
	    qs: params.Query,
	    body: params.Body,
	    Url: params.Url,
	    rawBody: params.RawBody,
	    DataType: params.DataType
	  }, function (err, data) {
	    if (err) return callback(err);

	    if (data && data.body) {
	      data.Body = data.body;
	      delete data.body;
	    }

	    callback(err, data);
	  });
	}
	/**
	 * 追加上传
	 * @param  {Object}  params                                         参数对象，必须
	 *     @param  {String}  params.Bucket                              Bucket名称，必须
	 *     @param  {String}  params.Region                              地域名称，必须
	 *     @param  {String}  params.Key                                 object名称，必须
	 *     @param  {File || Blob || String}  params.Body                上传文件对象或字符串
	 *     @param  {Number}  params.Position                            追加操作的起始点，单位为字节，必须
	 *     @param  {String}  params.CacheControl                        RFC 2616 中定义的缓存策略，将作为 Object 元数据保存，非必须
	 *     @param  {String}  params.ContentDisposition                  RFC 2616 中定义的文件名称，将作为 Object 元数据保存，非必须
	 *     @param  {String}  params.ContentEncoding                     RFC 2616 中定义的编码格式，将作为 Object 元数据保存，非必须
	 *     @param  {String}  params.ContentLength                       RFC 2616 中定义的 HTTP 请求内容长度（字节），必须
	 *     @param  {String}  params.ContentType                         RFC 2616 中定义的内容类型（MIME），将作为 Object 元数据保存，非必须
	 *     @param  {String}  params.Expect                              当使用 Expect: 100-continue 时，在收到服务端确认后，才会发送请求内容，非必须
	 *     @param  {String}  params.Expires                             RFC 2616 中定义的过期时间，将作为 Object 元数据保存，非必须
	 *     @param  {String}  params.ACL                                 允许用户自定义文件权限，有效值：private | public-read，非必须
	 *     @param  {String}  params.GrantRead                           赋予被授权者读取对象的权限，格式：id="[OwnerUin]"，可使用半角逗号（,）分隔多组被授权者，非必须
	 *     @param  {String}  params.GrantReadAcp                        赋予被授权者读取对象的访问控制列表（ACL）的权限，格式：id="[OwnerUin]"，可使用半角逗号（,）分隔多组被授权者，非必须
	 *     @param  {String}  params.GrantWriteAcp                       赋予被授权者写入对象的访问控制列表（ACL）的权限，格式：id="[OwnerUin]"，可使用半角逗号（,）分隔多组被授权者，非必须
	 *     @param  {String}  params.GrantFullControl                    赋予被授权者操作对象的所有权限，格式：id="[OwnerUin]"，可使用半角逗号（,）分隔多组被授权者，非必须
	 *     @param  {String}  params.StorageClass                        设置对象的存储级别，枚举值：STANDARD、STANDARD_IA、ARCHIVE，默认值：STANDARD，非必须
	 *     @param  {String}  params.x-cos-meta-*                        允许用户自定义的头部信息，将作为对象的元数据保存。大小限制2KB，非必须
	 *     @param  {String}  params.ContentSha1                         RFC 3174 中定义的 160-bit 内容 SHA-1 算法校验，非必须
	 *     @param  {String}  params.ServerSideEncryption                支持按照指定的加密算法进行服务端数据加密，格式 x-cos-server-side-encryption: "AES256"，非必须
	 * @param  {Function}  callback                                     回调函数，必须
	 *     @return  {Object}    err                                     请求失败的错误，如果请求成功，则为空。https://cloud.tencent.com/document/product/436/7730
	 *     @return  {Object}    data                                    返回的数据
	 */


	function appendObject(params, callback) {
	  // 特殊处理 Cache-Control、Content-Type，避免代理更改这两个字段导致写入到 Object 属性里
	  var headers = params.Headers;
	  if (!headers['Cache-Control'] && !headers['cache-control']) headers['Cache-Control'] = '';
	  if (!headers['Content-Type'] && !headers['content-type']) headers['Content-Type'] = params.Body && params.Body.type || '';
	  submitRequest.call(this, {
	    Action: 'name/cos:AppendObject',
	    method: 'POST',
	    Bucket: params.Bucket,
	    Region: params.Region,
	    action: 'append',
	    Key: params.Key,
	    body: params.Body,
	    qs: {
	      position: params.Position
	    },
	    headers: params.Headers
	  }, function (err, data) {
	    if (err) return callback(err);
	    callback(null, data);
	  });
	}
	/**
	 * 获取签名
	 * @param  {Object}  params             参数对象，必须
	 *     @param  {String}  params.Method  请求方法，必须
	 *     @param  {String}  params.Key     object名称，必须
	 *     @param  {String}  params.Expires 名超时时间，单位秒，可选
	 * @return  {String}  data              返回签名字符串
	 */


	function getAuth(params) {
	  var self = this;
	  return util.getAuth({
	    SecretId: params.SecretId || this.options.SecretId || '',
	    SecretKey: params.SecretKey || this.options.SecretKey || '',
	    Bucket: params.Bucket,
	    Region: params.Region,
	    Method: params.Method,
	    Key: params.Key,
	    Query: params.Query,
	    Headers: params.Headers,
	    Expires: params.Expires,
	    UseRawKey: self.options.UseRawKey,
	    SystemClockOffset: self.options.SystemClockOffset
	  });
	}
	/**
	 * 获取文件下载链接
	 * @param  {Object}  params                 参数对象，必须
	 *     @param  {String}  params.Bucket      Bucket名称，必须
	 *     @param  {String}  params.Region      地域名称，必须
	 *     @param  {String}  params.Key         object名称，必须
	 *     @param  {String}  params.Method      请求的方法，可选
	 *     @param  {String}  params.Expires     签名超时时间，单位秒，可选
	 * @param  {Function}  callback             回调函数，必须
	 *     @return  {Object}    err             请求失败的错误，如果请求成功，则为空。https://cloud.tencent.com/document/product/436/7730
	 *     @return  {Object}    data            返回的数据
	 */


	function getObjectUrl(params, callback) {
	  var self = this;
	  var useAccelerate = params.UseAccelerate === undefined ? self.options.UseAccelerate : params.UseAccelerate;
	  var url = getUrl({
	    ForcePathStyle: self.options.ForcePathStyle,
	    protocol: params.Protocol || self.options.Protocol,
	    domain: params.Domain || self.options.Domain,
	    bucket: params.Bucket,
	    region: useAccelerate ? 'accelerate' : params.Region,
	    object: params.Key
	  });
	  var queryParamsStr = '';

	  if (params.Query) {
	    queryParamsStr += util.obj2str(params.Query);
	  }

	  if (params.QueryString) {
	    queryParamsStr += (queryParamsStr ? '&' : '') + params.QueryString;
	  }

	  var syncUrl = url;

	  if (params.Sign !== undefined && !params.Sign) {
	    queryParamsStr && (syncUrl += '?' + queryParamsStr);
	    callback(null, {
	      Url: syncUrl
	    });
	    return syncUrl;
	  } // 签名加上 Host，避免跨桶访问


	  var SignHost = getSignHost.call(this, {
	    Bucket: params.Bucket,
	    Region: params.Region,
	    UseAccelerate: params.UseAccelerate,
	    Url: url
	  });
	  var AuthData = getAuthorizationAsync.call(this, {
	    Action: (params.Method || '').toUpperCase() === 'PUT' ? 'name/cos:PutObject' : 'name/cos:GetObject',
	    Bucket: params.Bucket || '',
	    Region: params.Region || '',
	    Method: params.Method || 'get',
	    Key: params.Key,
	    Expires: params.Expires,
	    Headers: params.Headers,
	    Query: params.Query,
	    SignHost: SignHost,
	    ForceSignHost: params.ForceSignHost === false ? false : self.options.ForceSignHost // getObjectUrl支持传参ForceSignHost

	  }, function (err, AuthData) {
	    if (!callback) return;

	    if (err) {
	      callback(err);
	      return;
	    } // 兼容万象url qUrlParamList需要再encode一次


	    var replaceUrlParamList = function replaceUrlParamList(url) {
	      var urlParams = url.match(/q-url-param-list.*?(?=&)/g)[0];
	      var encodedParams = 'q-url-param-list=' + encodeURIComponent(urlParams.replace(/q-url-param-list=/, '')).toLowerCase();
	      var reg = new RegExp(urlParams, 'g');
	      var replacedUrl = url.replace(reg, encodedParams);
	      return replacedUrl;
	    };

	    var signUrl = url;
	    signUrl += '?' + (AuthData.Authorization.indexOf('q-signature') > -1 ? replaceUrlParamList(AuthData.Authorization) : 'sign=' + encodeURIComponent(AuthData.Authorization));
	    AuthData.SecurityToken && (signUrl += '&x-cos-security-token=' + AuthData.SecurityToken);
	    AuthData.ClientIP && (signUrl += '&clientIP=' + AuthData.ClientIP);
	    AuthData.ClientUA && (signUrl += '&clientUA=' + AuthData.ClientUA);
	    AuthData.Token && (signUrl += '&token=' + AuthData.Token);
	    queryParamsStr && (signUrl += '&' + queryParamsStr);
	    setTimeout(function () {
	      callback(null, {
	        Url: signUrl
	      });
	    });
	  });

	  if (AuthData) {
	    syncUrl += '?' + AuthData.Authorization + (AuthData.SecurityToken ? '&x-cos-security-token=' + AuthData.SecurityToken : '');
	    queryParamsStr && (syncUrl += '&' + queryParamsStr);
	  } else {
	    queryParamsStr && (syncUrl += '?' + queryParamsStr);
	  }

	  return syncUrl;
	}
	/**
	 * 私有方法
	 */


	function decodeAcl(AccessControlPolicy) {
	  var result = {
	    GrantFullControl: [],
	    GrantWrite: [],
	    GrantRead: [],
	    GrantReadAcp: [],
	    GrantWriteAcp: [],
	    ACL: ''
	  };
	  var GrantMap = {
	    FULL_CONTROL: 'GrantFullControl',
	    WRITE: 'GrantWrite',
	    READ: 'GrantRead',
	    READ_ACP: 'GrantReadAcp',
	    WRITE_ACP: 'GrantWriteAcp'
	  };
	  var AccessControlList = AccessControlPolicy && AccessControlPolicy.AccessControlList || {};
	  var Grant = AccessControlList.Grant;

	  if (Grant) {
	    Grant = util.isArray(Grant) ? Grant : [Grant];
	  }

	  var PublicAcl = {
	    READ: 0,
	    WRITE: 0,
	    FULL_CONTROL: 0
	  };
	  Grant && Grant.length && util.each(Grant, function (item) {
	    if (item.Grantee.ID === 'qcs::cam::anyone:anyone' || item.Grantee.URI === 'http://cam.qcloud.com/groups/global/AllUsers') {
	      PublicAcl[item.Permission] = 1;
	    } else if (item.Grantee.ID !== AccessControlPolicy.Owner.ID) {
	      result[GrantMap[item.Permission]].push('id="' + item.Grantee.ID + '"');
	    }
	  });

	  if (PublicAcl.FULL_CONTROL || PublicAcl.WRITE && PublicAcl.READ) {
	    result.ACL = 'public-read-write';
	  } else if (PublicAcl.READ) {
	    result.ACL = 'public-read';
	  } else {
	    result.ACL = 'private';
	  }

	  util.each(GrantMap, function (item) {
	    result[item] = uniqGrant(result[item].join(','));
	  });
	  return result;
	} // Grant 去重


	function uniqGrant(str) {
	  var arr = str.split(',');
	  var exist = {};
	  var i, item;

	  for (i = 0; i < arr.length;) {
	    item = arr[i].trim();

	    if (exist[item]) {
	      arr.splice(i, 1);
	    } else {
	      exist[item] = true;
	      arr[i] = item;
	      i++;
	    }
	  }

	  return arr.join(',');
	} // 生成操作 url


	function getUrl(params) {
	  var region = params.region || '';
	  var longBucket = params.bucket || '';
	  var shortBucket = longBucket.substr(0, longBucket.lastIndexOf('-'));
	  var appId = longBucket.substr(longBucket.lastIndexOf('-') + 1);
	  var domain = params.domain;
	  var object = params.object;

	  if (typeof domain === 'function') {
	    domain = domain({
	      Bucket: longBucket,
	      Region: region
	    });
	  } // 兼容不带冒号的http、https


	  if (['http', 'https'].includes(params.protocol)) {
	    params.protocol = params.protocol + ':';
	  }

	  var protocol = params.protocol || (util.isBrowser && (typeof location === "undefined" ? "undefined" : _typeof(location)) === 'object' && location.protocol === 'http:' ? 'http:' : 'https:');

	  if (!domain) {
	    if (['cn-south', 'cn-south-2', 'cn-north', 'cn-east', 'cn-southwest', 'sg'].indexOf(region) > -1) {
	      domain = '{Region}.myqcloud.com';
	    } else {
	      domain = 'cos.{Region}.myqcloud.com';
	    }

	    if (!params.ForcePathStyle) {
	      domain = '{Bucket}.' + domain;
	    }
	  }

	  domain = domain.replace(/\{\{AppId\}\}/gi, appId).replace(/\{\{Bucket\}\}/gi, shortBucket).replace(/\{\{Region\}\}/gi, region).replace(/\{\{.*?\}\}/gi, '');
	  domain = domain.replace(/\{AppId\}/gi, appId).replace(/\{BucketName\}/gi, shortBucket).replace(/\{Bucket\}/gi, longBucket).replace(/\{Region\}/gi, region).replace(/\{.*?\}/gi, '');

	  if (!/^[a-zA-Z]+:\/\//.test(domain)) {
	    domain = protocol + '//' + domain;
	  } // 去掉域名最后的斜杆


	  if (domain.slice(-1) === '/') {
	    domain = domain.slice(0, -1);
	  }

	  var url = domain;

	  if (params.ForcePathStyle) {
	    url += '/' + longBucket;
	  }

	  url += '/';

	  if (object) {
	    url += util.camSafeUrlEncode(object).replace(/%2F/g, '/');
	  }

	  if (params.isLocation) {
	    url = url.replace(/^https?:\/\//, '');
	  }

	  return url;
	}

	var getSignHost = function getSignHost(opt) {
	  if (!opt.Bucket || !opt.Region) return '';
	  var useAccelerate = opt.UseAccelerate === undefined ? this.options.UseAccelerate : opt.UseAccelerate;
	  var url = opt.Url || getUrl({
	    ForcePathStyle: this.options.ForcePathStyle,
	    protocol: this.options.Protocol,
	    domain: this.options.Domain,
	    bucket: opt.Bucket,
	    region: useAccelerate ? 'accelerate' : opt.Region
	  });
	  var urlHost = url.replace(/^https?:\/\/([^/]+)(\/.*)?$/, '$1');
	  var standardHostReg = new RegExp('^([a-z\\d-]+-\\d+\\.)?(cos|cosv6|ci|pic)\\.([a-z\\d-]+)\\.myqcloud\\.com$');
	  if (standardHostReg.test(urlHost)) return urlHost;
	  return '';
	}; // 异步获取签名


	function getAuthorizationAsync(params, callback) {
	  var headers = util.clone(params.Headers);
	  var headerHost = '';
	  util.each(headers, function (v, k) {
	    (v === '' || ['content-type', 'cache-control', 'expires'].indexOf(k.toLowerCase()) > -1) && delete headers[k];
	    if (k.toLowerCase() === 'host') headerHost = v;
	  }); // ForceSignHost明确传入false才不加入host签名

	  var forceSignHost = params.ForceSignHost === false ? false : true; // Host 加入签名计算

	  if (!headerHost && params.SignHost && forceSignHost) headers.Host = params.SignHost; // 获取凭证的回调，避免用户 callback 多次

	  var cbDone = false;

	  var cb = function cb(err, AuthData) {
	    if (cbDone) return;
	    cbDone = true;

	    if (AuthData && AuthData.XCosSecurityToken && !AuthData.SecurityToken) {
	      AuthData = util.clone(AuthData);
	      AuthData.SecurityToken = AuthData.XCosSecurityToken;
	      delete AuthData.XCosSecurityToken;
	    }

	    callback && callback(err, AuthData);
	  };

	  var self = this;
	  var Bucket = params.Bucket || '';
	  var Region = params.Region || ''; // PathName

	  var KeyName = params.Key || '';

	  if (self.options.ForcePathStyle && Bucket) {
	    KeyName = Bucket + '/' + KeyName;
	  }

	  var Pathname = '/' + KeyName; // Action、ResourceKey

	  var StsData = {};
	  var Scope = params.Scope;

	  if (!Scope) {
	    var Action = params.Action || '';
	    var ResourceKey = params.ResourceKey || params.Key || '';
	    Scope = params.Scope || [{
	      action: Action,
	      bucket: Bucket,
	      region: Region,
	      prefix: ResourceKey
	    }];
	  }

	  var ScopeKey = util.md5(JSON.stringify(Scope)); // STS

	  self._StsCache = self._StsCache || [];

	  (function () {
	    var i, AuthData;

	    for (i = self._StsCache.length - 1; i >= 0; i--) {
	      AuthData = self._StsCache[i];
	      var compareTime = Math.round(util.getSkewTime(self.options.SystemClockOffset) / 1000) + 30;

	      if (AuthData.StartTime && compareTime < AuthData.StartTime || compareTime >= AuthData.ExpiredTime) {
	        self._StsCache.splice(i, 1);

	        continue;
	      }

	      if (!AuthData.ScopeLimit || AuthData.ScopeLimit && AuthData.ScopeKey === ScopeKey) {
	        StsData = AuthData;
	        break;
	      }
	    }
	  })();

	  var calcAuthByTmpKey = function calcAuthByTmpKey() {
	    var KeyTime = '';
	    if (StsData.StartTime && params.Expires) KeyTime = StsData.StartTime + ';' + (StsData.StartTime + params.Expires * 1);else if (StsData.StartTime && StsData.ExpiredTime) KeyTime = StsData.StartTime + ';' + StsData.ExpiredTime;
	    var Authorization = util.getAuth({
	      SecretId: StsData.TmpSecretId,
	      SecretKey: StsData.TmpSecretKey,
	      Method: params.Method,
	      Pathname: Pathname,
	      Query: params.Query,
	      Headers: headers,
	      Expires: params.Expires,
	      UseRawKey: self.options.UseRawKey,
	      SystemClockOffset: self.options.SystemClockOffset,
	      KeyTime: KeyTime,
	      ForceSignHost: forceSignHost
	    });
	    var AuthData = {
	      Authorization: Authorization,
	      SecurityToken: StsData.SecurityToken || StsData.XCosSecurityToken || '',
	      Token: StsData.Token || '',
	      ClientIP: StsData.ClientIP || '',
	      ClientUA: StsData.ClientUA || ''
	    };
	    cb(null, AuthData);
	  };

	  var checkAuthError = function checkAuthError(AuthData) {
	    if (AuthData.Authorization) {
	      // 检查签名格式
	      var formatAllow = false;
	      var auth = AuthData.Authorization;

	      if (auth) {
	        if (auth.indexOf(' ') > -1) {
	          formatAllow = false;
	        } else if (auth.indexOf('q-sign-algorithm=') > -1 && auth.indexOf('q-ak=') > -1 && auth.indexOf('q-sign-time=') > -1 && auth.indexOf('q-key-time=') > -1 && auth.indexOf('q-url-param-list=') > -1) {
	          formatAllow = true;
	        } else {
	          try {
	            auth = atob(auth);

	            if (auth.indexOf('a=') > -1 && auth.indexOf('k=') > -1 && auth.indexOf('t=') > -1 && auth.indexOf('r=') > -1 && auth.indexOf('b=') > -1) {
	              formatAllow = true;
	            }
	          } catch (e) {}
	        }
	      }

	      if (!formatAllow) return util.error(new Error('getAuthorization callback params format error'));
	    } else {
	      if (!AuthData.TmpSecretId) return util.error(new Error('getAuthorization callback params missing "TmpSecretId"'));
	      if (!AuthData.TmpSecretKey) return util.error(new Error('getAuthorization callback params missing "TmpSecretKey"'));
	      if (!AuthData.SecurityToken && !AuthData.XCosSecurityToken) return util.error(new Error('getAuthorization callback params missing "SecurityToken"'));
	      if (!AuthData.ExpiredTime) return util.error(new Error('getAuthorization callback params missing "ExpiredTime"'));
	      if (AuthData.ExpiredTime && AuthData.ExpiredTime.toString().length !== 10) return util.error(new Error('getAuthorization callback params "ExpiredTime" should be 10 digits'));
	      if (AuthData.StartTime && AuthData.StartTime.toString().length !== 10) return util.error(new Error('getAuthorization callback params "StartTime" should be 10 StartTime'));
	    }

	    return false;
	  }; // 先判断是否有临时密钥


	  if (StsData.ExpiredTime && StsData.ExpiredTime - util.getSkewTime(self.options.SystemClockOffset) / 1000 > 60) {
	    // 如果缓存的临时密钥有效，并还有超过60秒有效期就直接使用
	    calcAuthByTmpKey();
	  } else if (self.options.getAuthorization) {
	    // 外部计算签名或获取临时密钥
	    self.options.getAuthorization.call(self, {
	      Bucket: Bucket,
	      Region: Region,
	      Method: params.Method,
	      Key: KeyName,
	      Pathname: Pathname,
	      Query: params.Query,
	      Headers: headers,
	      Scope: Scope,
	      SystemClockOffset: self.options.SystemClockOffset,
	      ForceSignHost: forceSignHost
	    }, function (AuthData) {
	      if (typeof AuthData === 'string') AuthData = {
	        Authorization: AuthData
	      };
	      var AuthError = checkAuthError(AuthData);
	      if (AuthError) return cb(AuthError);

	      if (AuthData.Authorization) {
	        cb(null, AuthData);
	      } else {
	        StsData = AuthData || {};
	        StsData.Scope = Scope;
	        StsData.ScopeKey = ScopeKey;

	        self._StsCache.push(StsData);

	        calcAuthByTmpKey();
	      }
	    });
	  } else if (self.options.getSTS) {
	    // 外部获取临时密钥
	    self.options.getSTS.call(self, {
	      Bucket: Bucket,
	      Region: Region
	    }, function (data) {
	      StsData = data || {};
	      StsData.Scope = Scope;
	      StsData.ScopeKey = ScopeKey;
	      if (!StsData.TmpSecretId) StsData.TmpSecretId = StsData.SecretId;
	      if (!StsData.TmpSecretKey) StsData.TmpSecretKey = StsData.SecretKey;
	      var AuthError = checkAuthError(StsData);
	      if (AuthError) return cb(AuthError);

	      self._StsCache.push(StsData);

	      calcAuthByTmpKey();
	    });
	  } else {
	    // 内部计算获取签名
	    return function () {
	      var Authorization = util.getAuth({
	        SecretId: params.SecretId || self.options.SecretId,
	        SecretKey: params.SecretKey || self.options.SecretKey,
	        Method: params.Method,
	        Pathname: Pathname,
	        Query: params.Query,
	        Headers: headers,
	        Expires: params.Expires,
	        UseRawKey: self.options.UseRawKey,
	        SystemClockOffset: self.options.SystemClockOffset,
	        ForceSignHost: forceSignHost
	      });
	      var AuthData = {
	        Authorization: Authorization,
	        SecurityToken: self.options.SecurityToken || self.options.XCosSecurityToken
	      };
	      cb(null, AuthData);
	      return AuthData;
	    }();
	  }

	  return '';
	} // 调整时间偏差


	function allowRetry(err) {
	  var allowRetry = false;
	  var isTimeError = false;
	  var serverDate = err.headers && (err.headers.date || err.headers.Date) || err.error && err.error.ServerTime;

	  try {
	    var errorCode = err.error.Code;
	    var errorMessage = err.error.Message;

	    if (errorCode === 'RequestTimeTooSkewed' || errorCode === 'AccessDenied' && errorMessage === 'Request has expired') {
	      isTimeError = true;
	    }
	  } catch (e) {}

	  if (err) {
	    if (isTimeError && serverDate) {
	      var serverTime = Date.parse(serverDate);

	      if (this.options.CorrectClockSkew && Math.abs(util.getSkewTime(this.options.SystemClockOffset) - serverTime) >= 30000) {
	        console.error('error: Local time is too skewed.');
	        this.options.SystemClockOffset = serverTime - Date.now();
	        allowRetry = true;
	      }
	    } else if (Math.floor(err.statusCode / 100) === 5) {
	      allowRetry = true;
	    }
	  }

	  return allowRetry;
	} // 获取签名并发起请求


	function submitRequest(params, callback) {
	  var self = this; // 处理 headers

	  !params.headers && (params.headers = {}); // 处理 query

	  !params.qs && (params.qs = {});
	  params.VersionId && (params.qs.versionId = params.VersionId);
	  params.qs = util.clearKey(params.qs); // 清理 undefined 和 null 字段

	  params.headers && (params.headers = util.clearKey(params.headers));
	  params.qs && (params.qs = util.clearKey(params.qs));
	  var Query = util.clone(params.qs);
	  params.action && (Query[params.action] = '');
	  var paramsUrl = params.url || params.Url;
	  var SignHost = params.SignHost || getSignHost.call(this, {
	    Bucket: params.Bucket,
	    Region: params.Region,
	    Url: paramsUrl
	  });
	  var tracker = params.tracker;

	  var next = function next(tryTimes) {
	    var oldClockOffset = self.options.SystemClockOffset;
	    tracker && tracker.setParams({
	      signStartTime: new Date().getTime(),
	      retryTimes: tryTimes - 1
	    });
	    getAuthorizationAsync.call(self, {
	      Bucket: params.Bucket || '',
	      Region: params.Region || '',
	      Method: params.method,
	      Key: params.Key,
	      Query: Query,
	      Headers: params.headers,
	      SignHost: SignHost,
	      Action: params.Action,
	      ResourceKey: params.ResourceKey,
	      Scope: params.Scope,
	      ForceSignHost: self.options.ForceSignHost
	    }, function (err, AuthData) {
	      if (err) {
	        callback(err);
	        return;
	      }

	      tracker && tracker.setParams({
	        signEndTime: new Date().getTime(),
	        httpStartTime: new Date().getTime()
	      });
	      params.AuthData = AuthData;

	      _submitRequest.call(self, params, function (err, data) {
	        tracker && tracker.setParams({
	          httpEndTime: new Date().getTime()
	        });

	        if (err && tryTimes < 2 && (oldClockOffset !== self.options.SystemClockOffset || allowRetry.call(self, err))) {
	          if (params.headers) {
	            delete params.headers.Authorization;
	            delete params.headers['token'];
	            delete params.headers['clientIP'];
	            delete params.headers['clientUA'];
	            params.headers['x-cos-security-token'] && delete params.headers['x-cos-security-token'];
	            params.headers['x-ci-security-token'] && delete params.headers['x-ci-security-token'];
	          }

	          next(tryTimes + 1);
	        } else {
	          callback(err, data);
	        }
	      });
	    });
	  };

	  next(1);
	} // 发起请求


	function _submitRequest(params, callback) {
	  var self = this;
	  var TaskId = params.TaskId;
	  if (TaskId && !self._isRunningTask(TaskId)) return;
	  var bucket = params.Bucket;
	  var region = params.Region;
	  var object = params.Key;
	  var method = params.method || 'GET';
	  var url = params.Url || params.url;
	  var body = params.body;
	  var rawBody = params.rawBody; // url

	  if (self.options.UseAccelerate) {
	    region = 'accelerate';
	  }

	  url = url || getUrl({
	    ForcePathStyle: self.options.ForcePathStyle,
	    protocol: self.options.Protocol,
	    domain: self.options.Domain,
	    bucket: bucket,
	    region: region,
	    object: object
	  });

	  if (params.action) {
	    // 已知问题，某些版本的qq会对url自动拼接（比如/upload被拼接成/upload=(null)）导致签名错误，这里做下兼容。
	    url = url + '?' + (util.isIOS_QQ ? "".concat(params.action, "=") : params.action);
	  }

	  if (params.qsStr) {
	    if (url.indexOf('?') > -1) {
	      url = url + '&' + params.qsStr;
	    } else {
	      url = url + '?' + params.qsStr;
	    }
	  }

	  var opt = {
	    method: method,
	    url: url,
	    headers: params.headers,
	    qs: params.qs,
	    body: body
	  }; // 兼容ci接口

	  var token = 'x-cos-security-token';

	  if (util.isCIHost(url)) {
	    token = 'x-ci-security-token';
	  } // 获取签名


	  opt.headers.Authorization = params.AuthData.Authorization;
	  params.AuthData.Token && (opt.headers['token'] = params.AuthData.Token);
	  params.AuthData.ClientIP && (opt.headers['clientIP'] = params.AuthData.ClientIP);
	  params.AuthData.ClientUA && (opt.headers['clientUA'] = params.AuthData.ClientUA);
	  params.AuthData.SecurityToken && (opt.headers[token] = params.AuthData.SecurityToken); // 清理 undefined 和 null 字段

	  opt.headers && (opt.headers = util.clearKey(opt.headers));
	  opt = util.clearKey(opt); // progress

	  if (params.onProgress && typeof params.onProgress === 'function') {
	    var contentLength = body && (body.size || body.length) || 0;

	    opt.onProgress = function (e) {
	      if (TaskId && !self._isRunningTask(TaskId)) return;
	      var loaded = e ? e.loaded : 0;
	      params.onProgress({
	        loaded: loaded,
	        total: contentLength
	      });
	    };
	  }

	  if (params.onDownloadProgress) {
	    opt.onDownloadProgress = params.onDownloadProgress;
	  }

	  if (params.DataType) {
	    opt.dataType = params.DataType;
	  }

	  if (this.options.Timeout) {
	    opt.timeout = this.options.Timeout;
	  }

	  self.options.ForcePathStyle && (opt.pathStyle = self.options.ForcePathStyle);
	  self.emit('before-send', opt);
	  var useAccelerate = opt.url.includes('accelerate.');
	  var queryString = opt.qs ? Object.keys(opt.qs).map(function (key) {
	    return "".concat(key, "=").concat(opt.qs[key]);
	  }).join('&') : '';
	  var fullUrl = queryString ? opt.url + '?' + queryString : opt.url;
	  params.tracker && params.tracker.setParams({
	    reqUrl: fullUrl,
	    accelerate: useAccelerate ? 'Y' : 'N'
	  }); // 分块上传时给父级tracker设置url信息

	  params.tracker && params.tracker.parent && params.tracker.parent.setParams({
	    reqUrl: fullUrl,
	    accelerate: useAccelerate ? 'Y' : 'N'
	  });
	  var sender = (self.options.Request || REQUEST)(opt, function (r) {
	    if (r && r.error === 'abort') return;
	    var receive = {
	      options: opt,
	      error: r && r.error,
	      statusCode: r && r.statusCode || 0,
	      statusMessage: r && r.statusMessage || '',
	      headers: r && r.headers || {},
	      body: r && r.body
	    }; // 抛出事件，允许修改返回值的 error、statusCode、statusMessage、body

	    self.emit('after-receive', receive);
	    var err = receive.error;
	    var body = receive.body; // 返回内容添加 状态码 和 headers

	    var response = {
	      statusCode: receive.statusCode,
	      statusMessage: receive.statusMessage,
	      headers: receive.headers
	    };
	    var hasReturned;

	    var cb = function cb(err, data) {
	      TaskId && self.off('inner-kill-task', killTask);
	      if (hasReturned) return;
	      hasReturned = true;
	      var attrs = {};
	      response && response.statusCode && (attrs.statusCode = response.statusCode);
	      response && response.headers && (attrs.headers = response.headers);

	      if (err) {
	        err = util.extend(err || {}, attrs);
	        callback(err, null);
	      } else {
	        data = util.extend(data || {}, attrs);
	        callback(null, data);
	      }

	      sender = null;
	    }; // 请求错误，发生网络错误


	    if (err) return cb(util.error(err)); // 请求返回码不为 200

	    var statusCode = response.statusCode;
	    var statusSuccess = Math.floor(statusCode / 100) === 2; // 200 202 204 206
	    // 不对 body 进行转换，body 直接挂载返回

	    if (rawBody && statusSuccess) return cb(null, {
	      body: body
	    }); // 解析 xml body

	    var json;

	    try {
	      json = body && body.indexOf('<') > -1 && body.indexOf('>') > -1 && util.xml2json(body) || {};
	    } catch (e) {
	      json = {};
	    } // 处理返回值


	    var xmlError = json && json.Error;

	    if (statusSuccess) {
	      // 正确返回，状态码 2xx 时，body 不会有 Error
	      cb(null, json);
	    } else if (xmlError) {
	      // 正常返回了 xml body，且有 Error 节点
	      cb(util.error(new Error(xmlError.Message), {
	        code: xmlError.Code,
	        error: xmlError
	      }));
	    } else if (statusCode) {
	      // 有错误的状态码
	      cb(util.error(new Error(response.statusMessage), {
	        code: '' + statusCode
	      }));
	    } else if (statusCode) {
	      // 无状态码，或者获取不到状态码
	      cb(util.error(new Error('statusCode error')));
	    }
	  }); // kill task

	  var killTask = function killTask(data) {
	    if (data.TaskId === TaskId) {
	      sender && sender.abort && sender.abort();
	      self.off('inner-kill-task', killTask);
	    }
	  };

	  TaskId && self.on('inner-kill-task', killTask);
	}

	var API_MAP = {
	  // Bucket 相关方法
	  getService: getService,
	  // Bucket
	  putBucket: putBucket,
	  headBucket: headBucket,
	  // Bucket
	  getBucket: getBucket,
	  deleteBucket: deleteBucket,
	  putBucketAcl: putBucketAcl,
	  // BucketACL
	  getBucketAcl: getBucketAcl,
	  putBucketCors: putBucketCors,
	  // BucketCors
	  getBucketCors: getBucketCors,
	  deleteBucketCors: deleteBucketCors,
	  getBucketLocation: getBucketLocation,
	  // BucketLocation
	  getBucketPolicy: getBucketPolicy,
	  // BucketPolicy
	  putBucketPolicy: putBucketPolicy,
	  deleteBucketPolicy: deleteBucketPolicy,
	  putBucketTagging: putBucketTagging,
	  // BucketTagging
	  getBucketTagging: getBucketTagging,
	  deleteBucketTagging: deleteBucketTagging,
	  putBucketLifecycle: putBucketLifecycle,
	  // BucketLifecycle
	  getBucketLifecycle: getBucketLifecycle,
	  deleteBucketLifecycle: deleteBucketLifecycle,
	  putBucketVersioning: putBucketVersioning,
	  // BucketVersioning
	  getBucketVersioning: getBucketVersioning,
	  putBucketReplication: putBucketReplication,
	  // BucketReplication
	  getBucketReplication: getBucketReplication,
	  deleteBucketReplication: deleteBucketReplication,
	  putBucketWebsite: putBucketWebsite,
	  // BucketWebsite
	  getBucketWebsite: getBucketWebsite,
	  deleteBucketWebsite: deleteBucketWebsite,
	  putBucketReferer: putBucketReferer,
	  // BucketReferer
	  getBucketReferer: getBucketReferer,
	  putBucketDomain: putBucketDomain,
	  // BucketDomain
	  getBucketDomain: getBucketDomain,
	  deleteBucketDomain: deleteBucketDomain,
	  putBucketOrigin: putBucketOrigin,
	  // BucketOrigin
	  getBucketOrigin: getBucketOrigin,
	  deleteBucketOrigin: deleteBucketOrigin,
	  putBucketLogging: putBucketLogging,
	  // BucketLogging
	  getBucketLogging: getBucketLogging,
	  putBucketInventory: putBucketInventory,
	  // BucketInventory
	  postBucketInventory: postBucketInventory,
	  getBucketInventory: getBucketInventory,
	  listBucketInventory: listBucketInventory,
	  deleteBucketInventory: deleteBucketInventory,
	  putBucketAccelerate: putBucketAccelerate,
	  getBucketAccelerate: getBucketAccelerate,
	  putBucketEncryption: putBucketEncryption,
	  getBucketEncryption: getBucketEncryption,
	  deleteBucketEncryption: deleteBucketEncryption,
	  // Object 相关方法
	  getObject: getObject,
	  headObject: headObject,
	  listObjectVersions: listObjectVersions,
	  putObject: putObject,
	  deleteObject: deleteObject,
	  getObjectAcl: getObjectAcl,
	  putObjectAcl: putObjectAcl,
	  optionsObject: optionsObject,
	  putObjectCopy: putObjectCopy,
	  deleteMultipleObject: deleteMultipleObject,
	  restoreObject: restoreObject,
	  putObjectTagging: putObjectTagging,
	  getObjectTagging: getObjectTagging,
	  deleteObjectTagging: deleteObjectTagging,
	  selectObjectContent: selectObjectContent,
	  appendObject: appendObject,
	  // 分块上传相关方法
	  uploadPartCopy: uploadPartCopy,
	  multipartInit: multipartInit,
	  multipartUpload: multipartUpload,
	  multipartComplete: multipartComplete,
	  multipartList: multipartList,
	  multipartListPart: multipartListPart,
	  multipartAbort: multipartAbort,
	  // 工具方法
	  request: request,
	  getObjectUrl: getObjectUrl,
	  getAuth: getAuth
	};

	function warnOldApi(apiName, fn, proto) {
	  util.each(['Cors', 'Acl'], function (suffix) {
	    if (apiName.slice(-suffix.length) === suffix) {
	      var oldName = apiName.slice(0, -suffix.length) + suffix.toUpperCase();
	      var apiFn = util.apiWrapper(apiName, fn);
	      var warned = false;

	      proto[oldName] = function () {
	        !warned && console.warn('warning: cos.' + oldName + ' has been deprecated. Please Use cos.' + apiName + ' instead.');
	        warned = true;
	        apiFn.apply(this, arguments);
	      };
	    }
	  });
	}

	module.exports.init = function (COS, task) {
	  task.transferToTaskMethod(API_MAP, 'putObject');
	  util.each(API_MAP, function (fn, apiName) {
	    COS.prototype[apiName] = util.apiWrapper(apiName, fn);
	    warnOldApi(apiName, fn, COS.prototype);
	  });
	};

	/***/ }),

	/***/ "./src/cos.js":
	/*!********************!*\
	  !*** ./src/cos.js ***!
	  \********************/
	/*! no static exports found */
	/***/ (function(module, exports, __webpack_require__) {


	var util = __webpack_require__(/*! ./util */ "./src/util.js");

	var event = __webpack_require__(/*! ./event */ "./src/event.js");

	var task = __webpack_require__(/*! ./task */ "./src/task.js");

	var base = __webpack_require__(/*! ./base */ "./src/base.js");

	var advance = __webpack_require__(/*! ./advance */ "./src/advance.js");

	var pkg = __webpack_require__(/*! ../package.json */ "./package.json");

	var defaultOptions = {
	  AppId: '',
	  // AppId 已废弃，请拼接到 Bucket 后传入，例如：test-1250000000
	  SecretId: '',
	  SecretKey: '',
	  SecurityToken: '',
	  // 使用临时密钥需要注意自行刷新 Token
	  ChunkRetryTimes: 2,
	  FileParallelLimit: 3,
	  ChunkParallelLimit: 3,
	  ChunkSize: 1024 * 1024,
	  SliceSize: 1024 * 1024,
	  CopyChunkParallelLimit: 20,
	  CopyChunkSize: 1024 * 1024 * 10,
	  CopySliceSize: 1024 * 1024 * 10,
	  MaxPartNumber: 10000,
	  ProgressInterval: 1000,
	  Domain: '',
	  ServiceDomain: '',
	  Protocol: '',
	  CompatibilityMode: false,
	  ForcePathStyle: false,
	  UseRawKey: false,
	  Timeout: 0,
	  // 单位毫秒，0 代表不设置超时时间
	  CorrectClockSkew: true,
	  SystemClockOffset: 0,
	  // 单位毫秒，ms
	  UploadCheckContentMd5: false,
	  UploadQueueSize: 10000,
	  UploadAddMetaMd5: false,
	  UploadIdCacheLimit: 50,
	  UseAccelerate: false,
	  ForceSignHost: true,
	  // 默认将host加入签名计算，关闭后可能导致越权风险，建议保持为true
	  EnableTracker: false,
	  // 默认关闭上报
	  DeepTracker: false,
	  // 上报时是否对每个分块上传做单独上报
	  TrackerDelay: 5000,
	  // 周期性上报，单位毫秒。0代表实时上报
	  CustomId: '' // 自定义上报id

	}; // 对外暴露的类

	var COS = function COS(options) {
	  this.options = util.extend(util.clone(defaultOptions), options || {});
	  this.options.FileParallelLimit = Math.max(1, this.options.FileParallelLimit);
	  this.options.ChunkParallelLimit = Math.max(1, this.options.ChunkParallelLimit);
	  this.options.ChunkRetryTimes = Math.max(0, this.options.ChunkRetryTimes);
	  this.options.ChunkSize = Math.max(1024 * 1024, this.options.ChunkSize);
	  this.options.CopyChunkParallelLimit = Math.max(1, this.options.CopyChunkParallelLimit);
	  this.options.CopyChunkSize = Math.max(1024 * 1024, this.options.CopyChunkSize);
	  this.options.CopySliceSize = Math.max(0, this.options.CopySliceSize);
	  this.options.MaxPartNumber = Math.max(1024, Math.min(10000, this.options.MaxPartNumber));
	  this.options.Timeout = Math.max(0, this.options.Timeout);

	  if (this.options.AppId) {
	    console.warn('warning: AppId has been deprecated, Please put it at the end of parameter Bucket(E.g: "test-1250000000").');
	  }

	  if (this.options.SecretId && this.options.SecretId.indexOf(' ') > -1) {
	    console.error('error: SecretId格式错误，请检查');
	    console.error('error: SecretId format is incorrect. Please check');
	  }

	  if (this.options.SecretKey && this.options.SecretKey.indexOf(' ') > -1) {
	    console.error('error: SecretKey格式错误，请检查');
	    console.error('error: SecretKey format is incorrect. Please check');
	  }

	  if (util.isNode()) {
	    console.warn('warning: cos-js-sdk-v5 不支持 nodejs 环境使用，请改用 cos-nodejs-sdk-v5，参考文档： https://cloud.tencent.com/document/product/436/8629');
	    console.warn('warning: cos-js-sdk-v5 does not support nodejs environment. Please use cos-nodejs-sdk-v5 instead. See: https://cloud.tencent.com/document/product/436/8629');
	  }

	  event.init(this);
	  task.init(this);
	};

	base.init(COS, task);
	advance.init(COS, task);
	COS.util = {
	  md5: util.md5,
	  xml2json: util.xml2json,
	  json2xml: util.json2xml,
	  encodeBase64: util.encodeBase64
	};
	COS.getAuthorization = util.getAuth;
	COS.version = pkg.version;
	module.exports = COS;

	/***/ }),

	/***/ "./src/event.js":
	/*!**********************!*\
	  !*** ./src/event.js ***!
	  \**********************/
	/*! no static exports found */
	/***/ (function(module, exports) {

	var initEvent = function initEvent(cos) {
	  var listeners = {};

	  var getList = function getList(action) {
	    !listeners[action] && (listeners[action] = []);
	    return listeners[action];
	  };

	  cos.on = function (action, callback) {
	    if (action === 'task-list-update') {
	      console.warn('warning: Event "' + action + '" has been deprecated. Please use "list-update" instead.');
	    }

	    getList(action).push(callback);
	  };

	  cos.off = function (action, callback) {
	    var list = getList(action);

	    for (var i = list.length - 1; i >= 0; i--) {
	      callback === list[i] && list.splice(i, 1);
	    }
	  };

	  cos.emit = function (action, data) {
	    var list = getList(action).map(function (cb) {
	      return cb;
	    });

	    for (var i = 0; i < list.length; i++) {
	      list[i](data);
	    }
	  };
	};

	var EventProxy = function EventProxy() {
	  initEvent(this);
	};

	module.exports.init = initEvent;
	module.exports.EventProxy = EventProxy;

	/***/ }),

	/***/ "./src/session.js":
	/*!************************!*\
	  !*** ./src/session.js ***!
	  \************************/
	/*! no static exports found */
	/***/ (function(module, exports, __webpack_require__) {

	var util = __webpack_require__(/*! ./util */ "./src/util.js"); // 按照文件特征值，缓存 UploadId


	var cacheKey = 'cos_sdk_upload_cache';
	var expires = 30 * 24 * 3600;
	var cache;
	var timer;

	var getCache = function getCache() {
	  try {
	    var val = JSON.parse(localStorage.getItem(cacheKey));
	  } catch (e) {}

	  if (!val) val = [];
	  cache = val;
	};

	var setCache = function setCache() {
	  try {
	    if (cache.length) localStorage.setItem(cacheKey, JSON.stringify(cache));else localStorage.removeItem(cacheKey);
	  } catch (e) {}
	};

	var init = function init() {
	  if (cache) return;
	  getCache.call(this); // 清理太老旧的数据

	  var changed = false;
	  var now = Math.round(Date.now() / 1000);

	  for (var i = cache.length - 1; i >= 0; i--) {
	    var mtime = cache[i][2];

	    if (!mtime || mtime + expires < now) {
	      cache.splice(i, 1);
	      changed = true;
	    }
	  }

	  changed && setCache();
	}; // 把缓存存到本地


	var save = function save() {
	  if (timer) return;
	  timer = setTimeout(function () {
	    setCache();
	    timer = null;
	  }, 400);
	};

	var mod = {
	  using: {},
	  // 标记 UploadId 正在使用
	  setUsing: function setUsing(uuid) {
	    mod.using[uuid] = true;
	  },
	  // 标记 UploadId 已经没在使用
	  removeUsing: function removeUsing(uuid) {
	    delete mod.using[uuid];
	  },
	  // 用上传参数生成哈希值
	  getFileId: function getFileId(file, ChunkSize, Bucket, Key) {
	    if (file.name && file.size && file.lastModifiedDate && ChunkSize) {
	      return util.md5([file.name, file.size, file.lastModifiedDate, ChunkSize, Bucket, Key].join('::'));
	    } else {
	      return null;
	    }
	  },
	  // 用上传参数生成哈希值
	  getCopyFileId: function getCopyFileId(copySource, sourceHeaders, ChunkSize, Bucket, Key) {
	    var size = sourceHeaders['content-length'];
	    var etag = sourceHeaders.etag || '';
	    var lastModified = sourceHeaders['last-modified'];

	    if (copySource && ChunkSize) {
	      return util.md5([copySource, size, etag, lastModified, ChunkSize, Bucket, Key].join('::'));
	    } else {
	      return null;
	    }
	  },
	  // 获取文件对应的 UploadId 列表
	  getUploadIdList: function getUploadIdList(uuid) {
	    if (!uuid) return null;
	    init.call(this);
	    var list = [];

	    for (var i = 0; i < cache.length; i++) {
	      if (cache[i][0] === uuid) list.push(cache[i][1]);
	    }

	    return list.length ? list : null;
	  },
	  // 缓存 UploadId
	  saveUploadId: function saveUploadId(uuid, UploadId, limit) {
	    init.call(this);
	    if (!uuid) return; // 清理没用的 UploadId，js 文件没有 FilePath ，只清理相同记录

	    for (var i = cache.length - 1; i >= 0; i--) {
	      var item = cache[i];

	      if (item[0] === uuid && item[1] === UploadId) {
	        cache.splice(i, 1);
	      }
	    }

	    cache.unshift([uuid, UploadId, Math.round(Date.now() / 1000)]);
	    if (cache.length > limit) cache.splice(limit);
	    save();
	  },
	  // UploadId 已用完，移除掉
	  removeUploadId: function removeUploadId(UploadId) {
	    init.call(this);
	    delete mod.using[UploadId];

	    for (var i = cache.length - 1; i >= 0; i--) {
	      if (cache[i][1] === UploadId) cache.splice(i, 1);
	    }

	    save();
	  }
	};
	module.exports = mod;

	/***/ }),

	/***/ "./src/task.js":
	/*!*********************!*\
	  !*** ./src/task.js ***!
	  \*********************/
	/*! no static exports found */
	/***/ (function(module, exports, __webpack_require__) {

	var session = __webpack_require__(/*! ./session */ "./src/session.js");

	var util = __webpack_require__(/*! ./util */ "./src/util.js");

	var originApiMap = {};

	var transferToTaskMethod = function transferToTaskMethod(apiMap, apiName) {
	  originApiMap[apiName] = apiMap[apiName];

	  apiMap[apiName] = function (params, callback) {
	    if (params.SkipTask) {
	      originApiMap[apiName].call(this, params, callback);
	    } else {
	      this._addTask(apiName, params, callback);
	    }
	  };
	};

	var initTask = function initTask(cos) {
	  var queue = [];
	  var tasks = {};
	  var uploadingFileCount = 0;
	  var nextUploadIndex = 0; // 接口返回简略的任务信息

	  var formatTask = function formatTask(task) {
	    var t = {
	      id: task.id,
	      Bucket: task.Bucket,
	      Region: task.Region,
	      Key: task.Key,
	      FilePath: task.FilePath,
	      state: task.state,
	      loaded: task.loaded,
	      size: task.size,
	      speed: task.speed,
	      percent: task.percent,
	      hashPercent: task.hashPercent,
	      error: task.error
	    };
	    if (task.FilePath) t.FilePath = task.FilePath;
	    if (task._custom) t._custom = task._custom; // 控制台使用

	    return t;
	  };

	  var emitListUpdate = function () {
	    var timer;

	    var emit = function emit() {
	      timer = 0;
	      cos.emit('task-list-update', {
	        list: util.map(queue, formatTask)
	      });
	      cos.emit('list-update', {
	        list: util.map(queue, formatTask)
	      });
	    };

	    return function () {
	      if (!timer) timer = setTimeout(emit);
	    };
	  }();

	  var clearQueue = function clearQueue() {
	    if (queue.length <= cos.options.UploadQueueSize) return;

	    for (var i = 0; i < nextUploadIndex && // 小于当前操作的 index 才清理
	    i < queue.length && // 大于队列才清理
	    queue.length > cos.options.UploadQueueSize;) {
	      var isActive = queue[i].state === 'waiting' || queue[i].state === 'checking' || queue[i].state === 'uploading';

	      if (!queue[i] || !isActive) {
	        tasks[queue[i].id] && delete tasks[queue[i].id];
	        queue.splice(i, 1);
	        nextUploadIndex--;
	      } else {
	        i++;
	      }
	    }

	    emitListUpdate();
	  };

	  var startNextTask = function startNextTask() {
	    // 检查是否允许增加执行进程
	    if (uploadingFileCount >= cos.options.FileParallelLimit) return; // 跳过不可执行的任务

	    while (queue[nextUploadIndex] && queue[nextUploadIndex].state !== 'waiting') {
	      nextUploadIndex++;
	    } // 检查是否已遍历结束


	    if (nextUploadIndex >= queue.length) return; // 上传该遍历到的任务

	    var task = queue[nextUploadIndex];
	    nextUploadIndex++;
	    uploadingFileCount++;
	    task.state = 'checking';
	    task.params.onTaskStart && task.params.onTaskStart(formatTask(task));
	    !task.params.UploadData && (task.params.UploadData = {});
	    var apiParams = util.formatParams(task.api, task.params);
	    originApiMap[task.api].call(cos, apiParams, function (err, data) {
	      if (!cos._isRunningTask(task.id)) return;

	      if (task.state === 'checking' || task.state === 'uploading') {
	        task.state = err ? 'error' : 'success';
	        err && (task.error = err);
	        uploadingFileCount--;
	        emitListUpdate();
	        startNextTask();
	        task.callback && task.callback(err, data);

	        if (task.state === 'success') {
	          if (task.params) {
	            delete task.params.UploadData;
	            delete task.params.Body;
	            delete task.params;
	          }

	          delete task.callback;
	        }
	      }

	      clearQueue();
	    });
	    emitListUpdate(); // 异步执行下一个任务

	    setTimeout(startNextTask);
	  };

	  var killTask = function killTask(id, switchToState) {
	    var task = tasks[id];
	    if (!task) return;
	    var waiting = task && task.state === 'waiting';
	    var running = task && (task.state === 'checking' || task.state === 'uploading');

	    if (switchToState === 'canceled' && task.state !== 'canceled' || switchToState === 'paused' && waiting || switchToState === 'paused' && running) {
	      if (switchToState === 'paused' && task.params.Body && typeof task.params.Body.pipe === 'function') {
	        console.error('stream not support pause');
	        return;
	      }

	      task.state = switchToState;
	      cos.emit('inner-kill-task', {
	        TaskId: id,
	        toState: switchToState
	      });

	      try {
	        var UploadId = task && task.params && task.params.UploadData.UploadId;
	      } catch (e) {}

	      if (switchToState === 'canceled' && UploadId) session.removeUsing(UploadId);
	      emitListUpdate();

	      if (running) {
	        uploadingFileCount--;
	        startNextTask();
	      }

	      if (switchToState === 'canceled') {
	        if (task.params) {
	          delete task.params.UploadData;
	          delete task.params.Body;
	          delete task.params;
	        }

	        delete task.callback;
	      }
	    }

	    clearQueue();
	  };

	  cos._addTasks = function (taskList) {
	    util.each(taskList, function (task) {
	      cos._addTask(task.api, task.params, task.callback, true);
	    });
	    emitListUpdate();
	  };

	  var isTaskReadyWarning = true;

	  cos._addTask = function (api, params, callback, ignoreAddEvent) {
	    // 复制参数对象
	    params = util.formatParams(api, params); // 生成 id

	    var id = util.uuid();
	    params.TaskId = id;
	    params.onTaskReady && params.onTaskReady(id);

	    if (params.TaskReady) {
	      params.TaskReady(id);
	      isTaskReadyWarning && console.warn('warning: Param "TaskReady" has been deprecated. Please use "onTaskReady" instead.');
	      isTaskReadyWarning = false;
	    }

	    var task = {
	      // env
	      params: params,
	      callback: callback,
	      api: api,
	      index: queue.length,
	      // task
	      id: id,
	      Bucket: params.Bucket,
	      Region: params.Region,
	      Key: params.Key,
	      FilePath: params.FilePath || '',
	      state: 'waiting',
	      loaded: 0,
	      size: 0,
	      speed: 0,
	      percent: 0,
	      hashPercent: 0,
	      error: null,
	      _custom: params._custom
	    };
	    var onHashProgress = params.onHashProgress;

	    params.onHashProgress = function (info) {
	      if (!cos._isRunningTask(task.id)) return;
	      task.hashPercent = info.percent;
	      onHashProgress && onHashProgress(info);
	      emitListUpdate();
	    };

	    var onProgress = params.onProgress;

	    params.onProgress = function (info) {
	      if (!cos._isRunningTask(task.id)) return;
	      task.state === 'checking' && (task.state = 'uploading');
	      task.loaded = info.loaded;
	      task.speed = info.speed;
	      task.percent = info.percent;
	      onProgress && onProgress(info);
	      emitListUpdate();
	    }; // 异步获取 filesize


	    util.getFileSize(api, params, function (err, size) {
	      // 开始处理上传
	      if (err) return callback(util.error(err)); // 如果获取大小出错，不加入队列
	      // 获取完文件大小再把任务加入队列

	      tasks[id] = task;
	      queue.push(task);
	      task.size = size;
	      !ignoreAddEvent && emitListUpdate();
	      startNextTask();
	      clearQueue();
	    });
	    return id;
	  };

	  cos._isRunningTask = function (id) {
	    var task = tasks[id];
	    return !!(task && (task.state === 'checking' || task.state === 'uploading'));
	  };

	  cos.getTaskList = function () {
	    return util.map(queue, formatTask);
	  };

	  cos.cancelTask = function (id) {
	    killTask(id, 'canceled');
	  };

	  cos.pauseTask = function (id) {
	    killTask(id, 'paused');
	  };

	  cos.restartTask = function (id) {
	    var task = tasks[id];

	    if (task && (task.state === 'paused' || task.state === 'error')) {
	      task.state = 'waiting';
	      emitListUpdate();
	      nextUploadIndex = Math.min(nextUploadIndex, task.index);
	      startNextTask();
	    }
	  };

	  cos.isUploadRunning = function () {
	    return uploadingFileCount || nextUploadIndex < queue.length;
	  };
	};

	module.exports.transferToTaskMethod = transferToTaskMethod;
	module.exports.init = initTask;

	/***/ }),

	/***/ "./src/tracker.js":
	/*!************************!*\
	  !*** ./src/tracker.js ***!
	  \************************/
	/*! no static exports found */
	/***/ (function(module, exports, __webpack_require__) {

	var _classCallCheck = __webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ "./node_modules/@babel/runtime/helpers/classCallCheck.js");

	var _createClass = __webpack_require__(/*! @babel/runtime/helpers/createClass */ "./node_modules/@babel/runtime/helpers/createClass.js");

	var _typeof = __webpack_require__(/*! @babel/runtime/helpers/typeof */ "./node_modules/@babel/runtime/helpers/typeof.js");

	var pkg = __webpack_require__(/*! ../package.json */ "./package.json");

	var beacon = null;

	var getBeacon = function getBeacon(delay) {
	  if (!beacon) {
	    // 不放在顶层是避免首次引入就被加载，从而避免在某些环境比如webworker里加载灯塔sdk内window相关对象报错
	    var BeaconAction = __webpack_require__(/*! ../lib/beacon.min */ "./lib/beacon.min.js");

	    beacon = new BeaconAction({
	      appkey: '0AND0VEVB24UBGDU',
	      versionCode: pkg.version,
	      channelID: 'js_sdk',
	      //渠道,选填
	      openid: 'openid',
	      // 用户id, 选填
	      unionid: 'unid',
	      //用户unionid , 类似idfv,选填
	      strictMode: false,
	      //严苛模式开关, 打开严苛模式会主动抛出异常, 上线请务必关闭!!!
	      delay: delay,
	      // 普通事件延迟上报时间(单位毫秒), 默认1000(1秒),选填
	      sessionDuration: 60 * 1000 // session变更的时间间隔, 一个用户持续30分钟(默认值)没有任何上报则算另一次 session,每变更一次session上报一次启动事件(rqd_applaunched),使用毫秒(ms),最小值30秒,选填

	    });
	  }

	  return beacon;
	};

	var utils = {
	  // 生成uid 每个链路对应唯一一条uid
	  getUid: function getUid() {
	    var S4 = function S4() {
	      return ((1 + Math.random()) * 0x10000 | 0).toString(16).substring(1);
	    };

	    return S4() + S4() + '-' + S4() + '-' + S4() + '-' + S4() + '-' + S4() + S4() + S4();
	  },
	  // 获取网络类型
	  getNetType: function getNetType() {
	    if ((typeof navigator === "undefined" ? "undefined" : _typeof(navigator)) === 'object') {
	      var connection = navigator.connection || navigator.mozConnection || navigator.webkitConnection;
	      return (connection === null || connection === void 0 ? void 0 : connection.type) || (connection === null || connection === void 0 ? void 0 : connection.effectiveType) || 'unknown';
	    }

	    return 'unknown';
	  },
	  // 获取pc端操作系统类型
	  getOsType: function getOsType() {
	    if ((typeof navigator === "undefined" ? "undefined" : _typeof(navigator)) !== 'object') {
	      return 'unknown os';
	    }

	    var agent = navigator.userAgent.toLowerCase();
	    var isMac = /macintosh|mac os x/i.test(navigator.userAgent);

	    if (agent.indexOf('win32') >= 0 || agent.indexOf('wow32') >= 0) {
	      return 'win32';
	    }

	    if (agent.indexOf('win64') >= 0 || agent.indexOf('wow64') >= 0) {
	      return 'win64';
	    }

	    if (isMac) {
	      return 'mac';
	    }

	    return 'unknown os';
	  },
	  isMobile: function isMobile() {
	    var exp = /(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i;

	    if ((typeof navigator === "undefined" ? "undefined" : _typeof(navigator)) === 'object' && navigator.userAgent.match(exp)) {
	      return true; // 移动端
	    }

	    return false; // PC端
	  },
	  isAndroid: function isAndroid() {
	    var exp = /(Android|Adr|Linux)/i;

	    if ((typeof navigator === "undefined" ? "undefined" : _typeof(navigator)) === 'object' && navigator.userAgent.match(exp)) {
	      return true;
	    }

	    return false;
	  },
	  isIOS: function isIOS() {
	    var exp = /(iPhone|iPod|iPad|iOS)/i;

	    if ((typeof navigator === "undefined" ? "undefined" : _typeof(navigator)) === 'object' && navigator.userAgent.match(exp)) {
	      return true;
	    }

	    return false;
	  },
	  isOtherMobile: function isOtherMobile() {
	    return isMobile && !isAndroid && !isIOS;
	  },
	  // 获取浏览器类型
	  getDeviceName: function getDeviceName() {
	    if ((typeof navigator === "undefined" ? "undefined" : _typeof(navigator)) !== 'object') {
	      return 'unknown device';
	    }

	    var explorer = navigator.userAgent.toLowerCase(); // 腾讯会议内置浏览器

	    if (explorer.includes('app/tencent_wemeet')) {
	      return 'tencent_wemeet';
	    } // 遨游浏览器


	    if (explorer.indexOf('maxthon') >= 0) {
	      var match = explorer.match(/maxthon\/([\d.]+)/);
	      var ver = match && match[1] || '';
	      return "\u50B2\u6E38\u6D4F\u89C8\u5668 ".concat(ver).trim();
	    } // QQ浏览器


	    if (explorer.indexOf('qqbrowser') >= 0) {
	      var _match = explorer.match(/qqbrowser\/([\d.]+)/);

	      var _ver = _match && _match[1] || '';

	      return "QQ\u6D4F\u89C8\u5668 ".concat(_ver).trim();
	    } // 搜狗浏览器


	    if (explorer.indexOf('se 2.x') >= 0) {
	      return '搜狗浏览器';
	    } // 微信浏览器


	    if (explorer.indexOf('wxwork') >= 0) {
	      return '微信内置浏览器';
	    } // ie


	    if (explorer.indexOf('msie') >= 0) {
	      var _match2 = explorer.match(/msie ([\d.]+)/);

	      var _ver2 = _match2 && _match2[1] || '';

	      return "IE ".concat(_ver2).trim();
	    } // firefox


	    if (explorer.indexOf('firefox') >= 0) {
	      var _match3 = explorer.match(/firefox\/([\d.]+)/);

	      var _ver3 = _match3 && _match3[1] || '';

	      return "Firefox ".concat(_ver3).trim();
	    } // Chrome


	    if (explorer.indexOf('chrome') >= 0) {
	      var _match4 = explorer.match(/chrome\/([\d.]+)/);

	      var _ver4 = _match4 && _match4[1] || '';

	      return "Chrome ".concat(_ver4).trim();
	    } // Opera


	    if (explorer.indexOf('opera') >= 0) {
	      var _match5 = explorer.match(/opera.([\d.]+)/);

	      var _ver5 = _match5 && _match5[1] || '';

	      return "Opera ".concat(_ver5).trim();
	    } // Safari


	    if (explorer.indexOf('safari') >= 0) {
	      var _match6 = explorer.match(/version\/([\d.]+)/);

	      var _ver6 = _match6 && _match6[1] || '';

	      return "Safari ".concat(_ver6).trim();
	    }

	    if (explorer.indexOf('edge') >= 0) {
	      var _match7 = explorer.match(/edge\/([\d.]+)/);

	      var _ver7 = _match7 && _match7[1] || '';

	      return "edge ".concat(_ver7).trim();
	    }

	    return explorer.substr(0, 200);
	  }
	};
	var constant = {
	  isMobile: utils.isMobile(),
	  isBrowser: !utils.isMobile(),
	  mobileOsType: utils.isAndroid() ? 'android' : utils.isIOS ? 'ios' : 'other_mobile',
	  pcOsType: utils.getOsType()
	}; // 设备信息，只取一次值

	var deviceInfo = {
	  // ↓上报项
	  deviceType: constant.isMobile ? 'mobile' : constant.isBrowser ? 'browser' : 'unknown',
	  devicePlatform: constant.isMobile ? constant.mobileOsType : constant.pcOsType,
	  deviceName: utils.getDeviceName() //浏览器名称

	}; // 分块上传原子方法

	var sliceUploadMethods = ['multipartInit', 'multipartUpload', 'multipartComplete', 'multipartList', 'multipartListPart', 'multipartAbort'];
	var uploadApi = ['putObject', 'postObject', 'appendObject', 'sliceUploadFile', 'uploadFile', 'uploadFiles'].concat(sliceUploadMethods);
	var downloadApi = ['getObject'];

	function getEventCode(apiName) {
	  if (uploadApi.includes(apiName)) {
	    return 'cos_upload';
	  }

	  if (downloadApi.includes(apiName)) {
	    return 'cos_download';
	  }

	  return 'base_service';
	} // 上报参数驼峰改下划线


	function camel2underline(key) {
	  return key.replace(/([A-Z])/g, '_$1').toLowerCase();
	}

	function formatParams(params) {
	  var formattedParams = {};
	  var allReporterKeys = ['tracePlatform', 'cossdkVersion', 'region', 'networkType', 'host', 'accelerate', 'requestPath', 'size', 'httpMd5', 'httpSign', 'httpFull', 'name', 'result', 'tookTime', 'errorNode', 'errorCode', 'errorMessage', 'errorRequestId', 'errorStatusCode', 'errorServiceName', 'errorType', 'traceId', 'bucket', 'appid', 'partNumber', 'retryTimes', 'reqUrl', 'customId', 'fullError', 'deviceType', 'devicePlatform', 'deviceName'];
	  var successKeys = ['tracePlatform', 'cossdkVersion', 'region', 'bucket', 'appid', 'networkType', 'host', 'accelerate', 'requestPath', 'partNumber', 'size', 'name', 'result', 'tookTime', 'errorRequestId', 'retryTimes', 'reqUrl', 'customId', 'deviceType', 'devicePlatform', 'deviceName']; // 需要上报的参数字段

	  var reporterKeys = params.result === 'Success' ? successKeys : allReporterKeys;

	  for (var key in params) {
	    if (!reporterKeys.includes(key)) continue;
	    var formattedKey = camel2underline(key);
	    formattedParams[formattedKey] = params[key];
	  }

	  return formattedParams;
	} // 链路追踪器


	var Tracker = /*#__PURE__*/function () {

	  function Tracker(opt) {
	    _classCallCheck(this, Tracker);

	    var parent = opt.parent,
	        traceId = opt.traceId,
	        bucket = opt.bucket,
	        region = opt.region,
	        apiName = opt.apiName,
	        fileKey = opt.fileKey,
	        fileSize = opt.fileSize,
	        accelerate = opt.accelerate,
	        customId = opt.customId,
	        delay = opt.delay,
	        deepTracker = opt.deepTracker;
	    var appid = bucket && bucket.substr(bucket.lastIndexOf('-') + 1) || '';
	    this.parent = parent;
	    this.deepTracker = deepTracker;
	    this.delay = delay; // 上报用到的字段

	    this.params = {
	      // 通用字段
	      cossdkVersion: pkg.version,
	      region: region,
	      networkType: '',
	      host: '',
	      accelerate: accelerate ? 'Y' : 'N',
	      requestPath: fileKey || '',
	      size: fileSize || -1,
	      httpMd5: 0,
	      // MD5耗时
	      httpSign: 0,
	      // 计算签名耗时
	      httpFull: 0,
	      // http请求耗时
	      name: apiName || '',
	      result: '',
	      // sdk api调用结果Success、Fail
	      tookTime: 0,
	      // 总耗时
	      errorNode: '',
	      errorCode: '',
	      errorMessage: '',
	      errorRequestId: '',
	      errorStatusCode: 0,
	      errorServiceName: '',
	      // js补充字段
	      tracePlatform: 'cos-js-sdk-v5',
	      // 上报平台=js
	      traceId: traceId || utils.getUid(),
	      // 每条上报唯一标识
	      bucket: bucket,
	      appid: appid,
	      partNumber: 0,
	      // 分块上传编号
	      retryTimes: 0,
	      // sdk内部发起的请求重试
	      reqUrl: '',
	      // 请求url
	      customId: customId || '',
	      // 业务id
	      deviceType: deviceInfo.deviceType,
	      // 设备类型 移动端浏览器、web浏览器
	      devicePlatform: deviceInfo.devicePlatform,
	      deviceName: deviceInfo.deviceName,
	      md5StartTime: 0,
	      // md5计算开始时间
	      md5EndTime: 0,
	      // md5计算结束时间
	      signStartTime: 0,
	      // 计算签名开始时间
	      signEndTime: 0,
	      // 计算签名结束时间
	      httpStartTime: 0,
	      // 发起网络请求开始时间
	      httpEndTime: 0,
	      // 网路请求结束时间
	      startTime: new Date().getTime(),
	      // sdk api调用起始时间，不是纯网络耗时
	      endTime: 0 //  sdk api调用结束时间，不是纯网络耗时

	    };
	    this.beacon = getBeacon(delay);
	  } // 格式化sdk回调


	  _createClass(Tracker, [{
	    key: "formatResult",
	    value: function formatResult(err, data) {
	      var _err$error, _err$error2, _err$error3, _err$error4, _err$error5, _err$error6;

	      var now = new Date().getTime();
	      var tookTime = now - this.params.startTime;
	      var networkType = utils.getNetType();
	      var errorCode = err ? (err === null || err === void 0 ? void 0 : err.code) || (err === null || err === void 0 ? void 0 : (_err$error = err.error) === null || _err$error === void 0 ? void 0 : _err$error.code) || (err === null || err === void 0 ? void 0 : (_err$error2 = err.error) === null || _err$error2 === void 0 ? void 0 : _err$error2.Code) : '';
	      var errorMessage = err ? (err === null || err === void 0 ? void 0 : err.message) || (err === null || err === void 0 ? void 0 : (_err$error3 = err.error) === null || _err$error3 === void 0 ? void 0 : _err$error3.message) || (err === null || err === void 0 ? void 0 : (_err$error4 = err.error) === null || _err$error4 === void 0 ? void 0 : _err$error4.Message) : '';
	      var errorServiceName = err ? (err === null || err === void 0 ? void 0 : err.resource) || (err === null || err === void 0 ? void 0 : (_err$error5 = err.error) === null || _err$error5 === void 0 ? void 0 : _err$error5.resource) || (err === null || err === void 0 ? void 0 : (_err$error6 = err.error) === null || _err$error6 === void 0 ? void 0 : _err$error6.Resource) : '';
	      var errorStatusCode = err ? err === null || err === void 0 ? void 0 : err.statusCode : data.statusCode;
	      var requestId = err ? (err === null || err === void 0 ? void 0 : err.headers) && (err === null || err === void 0 ? void 0 : err.headers['x-cos-request-id']) : (data === null || data === void 0 ? void 0 : data.headers) && (data === null || data === void 0 ? void 0 : data.headers['x-cos-request-id']);
	      var errorType = err ? requestId ? 'Server' : 'Client' : '';
	      Object.assign(this.params, {
	        tookTime: tookTime,
	        networkType: networkType,
	        httpMd5: this.params.md5EndTime - this.params.md5StartTime,
	        httpSign: this.params.signEndTime - this.params.signStartTime,
	        httpFull: this.params.httpEndTime - this.params.httpStartTime,
	        result: err ? 'Fail' : 'Success',
	        errorType: errorType,
	        errorCode: errorCode,
	        errorStatusCode: errorStatusCode,
	        errorMessage: errorMessage,
	        errorServiceName: errorServiceName,
	        errorRequestId: requestId
	      });

	      if (err && (!errorCode || !errorMessage)) {
	        // 暂存全量err一段时间 观察是否所有err格式都可被解析
	        this.params.fullError = err ? JSON.stringify(err) : '';
	      }

	      if (this.params.name === 'getObject') {
	        this.params.size = data ? data.headers && data.headers['content-length'] : -1;
	      }

	      if (this.params.reqUrl) {
	        try {
	          var execRes = /^http(s)?:\/\/(.*?)\//.exec(this.params.reqUrl);
	          this.params.host = execRes[2];
	        } catch (e) {
	          this.params.host = this.params.reqUrl;
	        }
	      }

	      this.sendEvents();
	    } // 设置当前链路的参数

	  }, {
	    key: "setParams",
	    value: function setParams(params) {
	      Object.assign(this.params, params);
	    } // 使用灯塔延时上报

	  }, {
	    key: "sendEvents",
	    value: function sendEvents() {
	      // DeepTracker模式下才会上报分块上传内部细节
	      if (sliceUploadMethods.includes(this.params.name) && !this.deepTracker) {
	        return;
	      }

	      var eventCode = getEventCode(this.params.name);
	      var formattedParams = formatParams(this.params); // 兜底处理

	      if (!this.beacon) {
	        this.beacon = getBeacon(this.delay || 5000);
	      }

	      if (this.delay === 0) {
	        // 实时上报
	        this.beacon && this.beacon.onDirectUserAction(eventCode, formattedParams);
	      } else {
	        // 周期性上报
	        this.beacon && this.beacon.onUserAction(eventCode, formattedParams);
	      }
	    } // 生成子实例，与父所属一个链路，可用于分块上传内部流程上报单个分块操作

	  }, {
	    key: "generateSubTracker",
	    value: function generateSubTracker(subParams) {
	      Object.assign(subParams, {
	        parent: this,
	        deepTracker: this.deepTracker,
	        traceId: this.params.traceId,
	        bucket: this.params.bucket,
	        region: this.params.region,
	        fileKey: this.params.requestPath,
	        customId: this.params.customId,
	        delay: this.delay
	      });
	      return new Tracker(subParams);
	    }
	  }]);

	  return Tracker;
	}();

	module.exports = Tracker;

	/***/ }),

	/***/ "./src/util.js":
	/*!*********************!*\
	  !*** ./src/util.js ***!
	  \*********************/
	/*! no static exports found */
	/***/ (function(module, exports, __webpack_require__) {
	/* WEBPACK VAR INJECTION */(function(process) {

	var _typeof = __webpack_require__(/*! @babel/runtime/helpers/typeof */ "./node_modules/@babel/runtime/helpers/typeof.js");

	var md5 = __webpack_require__(/*! ../lib/md5 */ "./lib/md5.js");

	var CryptoJS = __webpack_require__(/*! ../lib/crypto */ "./lib/crypto.js");

	var xml2json = __webpack_require__(/*! ../lib/xml2json */ "./lib/xml2json.js");

	var json2xml = __webpack_require__(/*! ../lib/json2xml */ "./lib/json2xml.js");

	var base64 = __webpack_require__(/*! ../lib/base64 */ "./lib/base64.js");

	var Tracker = __webpack_require__(/*! ./tracker */ "./src/tracker.js");

	function camSafeUrlEncode(str) {
	  return encodeURIComponent(str).replace(/!/g, '%21').replace(/'/g, '%27').replace(/\(/g, '%28').replace(/\)/g, '%29').replace(/\*/g, '%2A');
	}

	function getObjectKeys(obj, forKey) {
	  var list = [];

	  for (var key in obj) {
	    if (obj.hasOwnProperty(key)) {
	      list.push(forKey ? camSafeUrlEncode(key).toLowerCase() : key);
	    }
	  }

	  return list.sort(function (a, b) {
	    a = a.toLowerCase();
	    b = b.toLowerCase();
	    return a === b ? 0 : a > b ? 1 : -1;
	  });
	}
	/**
	 * obj转为string
	 * @param  {Object}  obj                需要转的对象，必须
	 * @param  {Boolean} lowerCaseKey       key是否转为小写，默认false，非必须
	 * @return {String}  data               返回字符串
	 */


	var obj2str = function obj2str(obj, lowerCaseKey) {
	  var i, key, val;
	  var list = [];
	  var keyList = getObjectKeys(obj);

	  for (i = 0; i < keyList.length; i++) {
	    key = keyList[i];
	    val = obj[key] === undefined || obj[key] === null ? '' : '' + obj[key];
	    key = lowerCaseKey ? camSafeUrlEncode(key).toLowerCase() : camSafeUrlEncode(key);
	    val = camSafeUrlEncode(val) || '';
	    list.push(key + '=' + val);
	  }

	  return list.join('&');
	}; // 可以签入签名的headers


	var signHeaders = ['cache-control', 'content-disposition', 'content-encoding', 'content-length', 'content-md5', 'expect', 'expires', 'host', 'if-match', 'if-modified-since', 'if-none-match', 'if-unmodified-since', 'origin', 'range', 'transfer-encoding'];

	var getSignHeaderObj = function getSignHeaderObj(headers) {
	  var signHeaderObj = {};

	  for (var i in headers) {
	    var key = i.toLowerCase();

	    if (key.indexOf('x-cos-') > -1 || signHeaders.indexOf(key) > -1) {
	      signHeaderObj[i] = headers[i];
	    }
	  }

	  return signHeaderObj;
	}; //测试用的key后面可以去掉


	var getAuth = function getAuth(opt) {
	  opt = opt || {};
	  var SecretId = opt.SecretId;
	  var SecretKey = opt.SecretKey;
	  var KeyTime = opt.KeyTime;
	  var method = (opt.method || opt.Method || 'get').toLowerCase();
	  var queryParams = clone(opt.Query || opt.params || {});
	  var headers = getSignHeaderObj(clone(opt.Headers || opt.headers || {}));
	  var Key = opt.Key || '';
	  var pathname;

	  if (opt.UseRawKey) {
	    pathname = opt.Pathname || opt.pathname || '/' + Key;
	  } else {
	    pathname = opt.Pathname || opt.pathname || Key;
	    pathname.indexOf('/') !== 0 && (pathname = '/' + pathname);
	  } // ForceSignHost明确传入false才不加入host签名


	  var forceSignHost = opt.ForceSignHost === false ? false : true; // 如果有传入存储桶且需要强制签名，那么签名默认加 Host 参与计算，避免跨桶访问

	  if (!headers.Host && !headers.host && opt.Bucket && opt.Region && forceSignHost) headers.Host = opt.Bucket + '.cos.' + opt.Region + '.myqcloud.com';
	  if (!SecretId) throw new Error('missing param SecretId');
	  if (!SecretKey) throw new Error('missing param SecretKey'); // 签名有效起止时间

	  var now = Math.round(getSkewTime(opt.SystemClockOffset) / 1000) - 1;
	  var exp = now;
	  var Expires = opt.Expires || opt.expires;

	  if (Expires === undefined) {
	    exp += 900; // 签名过期时间为当前 + 900s
	  } else {
	    exp += Expires * 1 || 0;
	  } // 要用到的 Authorization 参数列表


	  var qSignAlgorithm = 'sha1';
	  var qAk = SecretId;
	  var qSignTime = KeyTime || now + ';' + exp;
	  var qKeyTime = KeyTime || now + ';' + exp;
	  var qHeaderList = getObjectKeys(headers, true).join(';').toLowerCase();
	  var qUrlParamList = getObjectKeys(queryParams, true).join(';').toLowerCase(); // 签名算法说明文档：https://www.qcloud.com/document/product/436/7778
	  // 步骤一：计算 SignKey

	  var signKey = CryptoJS.HmacSHA1(qKeyTime, SecretKey).toString(); // 步骤二：构成 FormatString

	  var formatString = [method, pathname, util.obj2str(queryParams, true), util.obj2str(headers, true), ''].join('\n'); // 步骤三：计算 StringToSign

	  var stringToSign = ['sha1', qSignTime, CryptoJS.SHA1(formatString).toString(), ''].join('\n'); // 步骤四：计算 Signature

	  var qSignature = CryptoJS.HmacSHA1(stringToSign, signKey).toString(); // 步骤五：构造 Authorization

	  var authorization = ['q-sign-algorithm=' + qSignAlgorithm, 'q-ak=' + qAk, 'q-sign-time=' + qSignTime, 'q-key-time=' + qKeyTime, 'q-header-list=' + qHeaderList, 'q-url-param-list=' + qUrlParamList, 'q-signature=' + qSignature].join('&');
	  return authorization;
	};

	var readIntBE = function readIntBE(chunk, size, offset) {
	  var bytes = size / 8;
	  var buf = chunk.slice(offset, offset + bytes);
	  new Uint8Array(buf).reverse();
	  return new {
	    8: Uint8Array,
	    16: Uint16Array,
	    32: Uint32Array
	  }[size](buf)[0];
	};

	var buf2str = function buf2str(chunk, start, end, isUtf8) {
	  var buf = chunk.slice(start, end);
	  var str = '';
	  new Uint8Array(buf).forEach(function (charCode) {
	    str += String.fromCharCode(charCode);
	  });
	  if (isUtf8) str = decodeURIComponent(escape(str));
	  return str;
	};

	var parseSelectPayload = function parseSelectPayload(chunk) {
	  var header = {};
	  var body = buf2str(chunk);
	  var result = {
	    records: []
	  };

	  while (chunk.byteLength) {
	    var totalLength = readIntBE(chunk, 32, 0);
	    var headerLength = readIntBE(chunk, 32, 4);
	    var payloadRestLength = totalLength - headerLength - 16;
	    var offset = 0;
	    var content;
	    chunk = chunk.slice(12); // 获取 Message 的 header 信息

	    while (offset < headerLength) {
	      var headerNameLength = readIntBE(chunk, 8, offset);
	      var headerName = buf2str(chunk, offset + 1, offset + 1 + headerNameLength);
	      var headerValueLength = readIntBE(chunk, 16, offset + headerNameLength + 2);
	      var headerValue = buf2str(chunk, offset + headerNameLength + 4, offset + headerNameLength + 4 + headerValueLength);
	      header[headerName] = headerValue;
	      offset += headerNameLength + 4 + headerValueLength;
	    }

	    if (header[':event-type'] === 'Records') {
	      content = buf2str(chunk, offset, offset + payloadRestLength, true);
	      result.records.push(content);
	    } else if (header[':event-type'] === 'Stats') {
	      content = buf2str(chunk, offset, offset + payloadRestLength, true);
	      result.stats = util.xml2json(content).Stats;
	    } else if (header[':event-type'] === 'error') {
	      var errCode = header[':error-code'];
	      var errMessage = header[':error-message'];
	      var err = new Error(errMessage);
	      err.message = errMessage;
	      err.name = err.code = errCode;
	      result.error = err;
	    } else ;

	    chunk = chunk.slice(offset + payloadRestLength + 4);
	  }

	  return {
	    payload: result.records.join(''),
	    body: body
	  };
	};

	var getSourceParams = function getSourceParams(source) {
	  var parser = this.options.CopySourceParser;
	  if (parser) return parser(source);
	  var m = source.match(/^([^.]+-\d+)\.cos(v6|-cdc|-cdz|-internal)?\.([^.]+)\.((myqcloud\.com)|(tencentcos\.cn))\/(.+)$/);
	  if (!m) return null;
	  return {
	    Bucket: m[1],
	    Region: m[3],
	    Key: m[7]
	  };
	};

	var noop = function noop() {}; // 清除对象里值为的 undefined 或 null 的属性


	var clearKey = function clearKey(obj) {
	  var retObj = {};

	  for (var key in obj) {
	    if (obj.hasOwnProperty(key) && obj[key] !== undefined && obj[key] !== null) {
	      retObj[key] = obj[key];
	    }
	  }

	  return retObj;
	};

	var readAsBinaryString = function readAsBinaryString(blob, callback) {
	  var readFun;
	  var fr = new FileReader();

	  if (FileReader.prototype.readAsBinaryString) {
	    readFun = FileReader.prototype.readAsBinaryString;

	    fr.onload = function () {
	      callback(this.result);
	    };
	  } else if (FileReader.prototype.readAsArrayBuffer) {
	    // 在 ie11 添加 readAsBinaryString 兼容
	    readFun = function readFun(fileData) {
	      var binary = '';
	      var reader = new FileReader();

	      reader.onload = function (e) {
	        var bytes = new Uint8Array(reader.result);
	        var length = bytes.byteLength;

	        for (var i = 0; i < length; i++) {
	          binary += String.fromCharCode(bytes[i]);
	        }

	        callback(binary);
	      };

	      reader.readAsArrayBuffer(fileData);
	    };
	  } else {
	    console.error('FileReader not support readAsBinaryString');
	  }

	  readFun.call(fr, blob);
	};

	var fileSliceNeedCopy = function () {
	  var compareVersion = function compareVersion(a, b) {
	    a = a.split('.');
	    b = b.split('.');

	    for (var i = 0; i < b.length; i++) {
	      if (a[i] !== b[i]) {
	        return parseInt(a[i]) > parseInt(b[i]) ? 1 : -1;
	      }
	    }

	    return 0;
	  };

	  var check = function check(ua) {
	    if (!ua) return false;
	    var ChromeVersion = (ua.match(/Chrome\/([.\d]+)/) || [])[1];
	    var QBCoreVersion = (ua.match(/QBCore\/([.\d]+)/) || [])[1];
	    var QQBrowserVersion = (ua.match(/QQBrowser\/([.\d]+)/) || [])[1];
	    var need = ChromeVersion && compareVersion(ChromeVersion, '53.0.2785.116') < 0 && QBCoreVersion && compareVersion(QBCoreVersion, '3.53.991.400') < 0 && QQBrowserVersion && compareVersion(QQBrowserVersion, '9.0.2524.400') <= 0 || false;
	    return need;
	  };

	  return check(typeof navigator !== 'undefined' && navigator.userAgent);
	}(); // 获取文件分片


	var fileSlice = function fileSlice(file, start, end, isUseToUpload, callback) {
	  var blob;

	  if (file.slice) {
	    blob = file.slice(start, end);
	  } else if (file.mozSlice) {
	    blob = file.mozSlice(start, end);
	  } else if (file.webkitSlice) {
	    blob = file.webkitSlice(start, end);
	  }

	  if (isUseToUpload && fileSliceNeedCopy) {
	    var reader = new FileReader();

	    reader.onload = function (e) {
	      blob = null;
	      callback(new Blob([reader.result]));
	    };

	    reader.readAsArrayBuffer(blob);
	  } else {
	    callback(blob);
	  }
	}; // 获取文件内容的 MD5


	var getBodyMd5 = function getBodyMd5(UploadCheckContentMd5, Body, callback, onProgress) {
	  callback = callback || noop;

	  if (UploadCheckContentMd5) {
	    if (typeof Body === 'string') {
	      callback(util.md5(Body, true));
	    } else if (Blob && Body instanceof Blob) {
	      util.getFileMd5(Body, function (err, md5) {
	        callback(md5);
	      }, onProgress);
	    } else {
	      callback();
	    }
	  } else {
	    callback();
	  }
	}; // 获取文件 md5 值


	var md5ChunkSize = 1024 * 1024;

	var getFileMd5 = function getFileMd5(blob, callback, onProgress) {
	  var size = blob.size;
	  var loaded = 0;
	  var md5ctx = md5.getCtx();

	  var next = function next(start) {
	    if (start >= size) {
	      var hash = md5ctx.digest('hex');
	      callback(null, hash);
	      return;
	    }

	    var end = Math.min(size, start + md5ChunkSize);
	    util.fileSlice(blob, start, end, false, function (chunk) {
	      readAsBinaryString(chunk, function (content) {
	        chunk = null;
	        md5ctx = md5ctx.update(content, true);
	        loaded += content.length;
	        content = null;
	        if (onProgress) onProgress({
	          loaded: loaded,
	          total: size,
	          percent: Math.round(loaded / size * 10000) / 10000
	        });
	        next(start + md5ChunkSize);
	      });
	    });
	  };

	  next(0);
	};

	function clone(obj) {
	  return map(obj, function (v) {
	    return _typeof(v) === 'object' && v !== null ? clone(v) : v;
	  });
	}

	function attr(obj, name, defaultValue) {
	  return obj && name in obj ? obj[name] : defaultValue;
	}

	function extend(target, source) {
	  each(source, function (val, key) {
	    target[key] = source[key];
	  });
	  return target;
	}

	function isArray(arr) {
	  return arr instanceof Array;
	}

	function isInArray(arr, item) {
	  var flag = false;

	  for (var i = 0; i < arr.length; i++) {
	    if (item === arr[i]) {
	      flag = true;
	      break;
	    }
	  }

	  return flag;
	}

	function makeArray(arr) {
	  return isArray(arr) ? arr : [arr];
	}

	function each(obj, fn) {
	  for (var i in obj) {
	    if (obj.hasOwnProperty(i)) {
	      fn(obj[i], i);
	    }
	  }
	}

	function map(obj, fn) {
	  var o = isArray(obj) ? [] : {};

	  for (var i in obj) {
	    if (obj.hasOwnProperty(i)) {
	      o[i] = fn(obj[i], i);
	    }
	  }

	  return o;
	}

	function filter(obj, fn) {
	  var iaArr = isArray(obj);
	  var o = iaArr ? [] : {};

	  for (var i in obj) {
	    if (obj.hasOwnProperty(i)) {
	      if (fn(obj[i], i)) {
	        if (iaArr) {
	          o.push(obj[i]);
	        } else {
	          o[i] = obj[i];
	        }
	      }
	    }
	  }

	  return o;
	}

	var b64 = function b64(str) {
	  var i,
	      len,
	      char,
	      res = '';

	  for (i = 0, len = str.length / 2; i < len; i++) {
	    char = parseInt(str[i * 2] + str[i * 2 + 1], 16);
	    res += String.fromCharCode(char);
	  }

	  return btoa(res);
	};

	var uuid = function uuid() {
	  var S4 = function S4() {
	    return ((1 + Math.random()) * 0x10000 | 0).toString(16).substring(1);
	  };

	  return S4() + S4() + '-' + S4() + '-' + S4() + '-' + S4() + '-' + S4() + S4() + S4();
	};

	var hasMissingParams = function hasMissingParams(apiName, params) {
	  var Bucket = params.Bucket;
	  var Region = params.Region;
	  var Key = params.Key;
	  var Domain = this.options.Domain;
	  var checkBucket = !Domain || typeof Domain === 'string' && Domain.indexOf('{Bucket}') > -1;
	  var checkRegion = !Domain || typeof Domain === 'string' && Domain.indexOf('{Region}') > -1;

	  if (apiName.indexOf('Bucket') > -1 || apiName === 'deleteMultipleObject' || apiName === 'multipartList' || apiName === 'listObjectVersions') {
	    if (checkBucket && !Bucket) return 'Bucket';
	    if (checkRegion && !Region) return 'Region';
	  } else if (apiName.indexOf('Object') > -1 || apiName.indexOf('multipart') > -1 || apiName === 'sliceUploadFile' || apiName === 'abortUploadTask') {
	    if (checkBucket && !Bucket) return 'Bucket';
	    if (checkRegion && !Region) return 'Region';
	    if (!Key) return 'Key';
	  }

	  return false;
	};

	var formatParams = function formatParams(apiName, params) {
	  // 复制参数对象
	  params = extend({}, params); // 统一处理 Headers

	  if (apiName !== 'getAuth' && apiName !== 'getV4Auth' && apiName !== 'getObjectUrl') {
	    var Headers = params.Headers || {};

	    if (params && _typeof(params) === 'object') {
	      (function () {
	        for (var key in params) {
	          if (params.hasOwnProperty(key) && key.indexOf('x-cos-') > -1) {
	            Headers[key] = params[key];
	          }
	        }
	      })();

	      var headerMap = {
	        // params headers
	        'x-cos-mfa': 'MFA',
	        'Content-MD5': 'ContentMD5',
	        'Content-Length': 'ContentLength',
	        'Content-Type': 'ContentType',
	        Expect: 'Expect',
	        Expires: 'Expires',
	        'Cache-Control': 'CacheControl',
	        'Content-Disposition': 'ContentDisposition',
	        'Content-Encoding': 'ContentEncoding',
	        Range: 'Range',
	        'If-Modified-Since': 'IfModifiedSince',
	        'If-Unmodified-Since': 'IfUnmodifiedSince',
	        'If-Match': 'IfMatch',
	        'If-None-Match': 'IfNoneMatch',
	        'x-cos-copy-source': 'CopySource',
	        'x-cos-copy-source-Range': 'CopySourceRange',
	        'x-cos-metadata-directive': 'MetadataDirective',
	        'x-cos-copy-source-If-Modified-Since': 'CopySourceIfModifiedSince',
	        'x-cos-copy-source-If-Unmodified-Since': 'CopySourceIfUnmodifiedSince',
	        'x-cos-copy-source-If-Match': 'CopySourceIfMatch',
	        'x-cos-copy-source-If-None-Match': 'CopySourceIfNoneMatch',
	        'x-cos-acl': 'ACL',
	        'x-cos-grant-read': 'GrantRead',
	        'x-cos-grant-write': 'GrantWrite',
	        'x-cos-grant-full-control': 'GrantFullControl',
	        'x-cos-grant-read-acp': 'GrantReadAcp',
	        'x-cos-grant-write-acp': 'GrantWriteAcp',
	        'x-cos-storage-class': 'StorageClass',
	        'x-cos-traffic-limit': 'TrafficLimit',
	        'x-cos-mime-limit': 'MimeLimit',
	        // SSE-C
	        'x-cos-server-side-encryption-customer-algorithm': 'SSECustomerAlgorithm',
	        'x-cos-server-side-encryption-customer-key': 'SSECustomerKey',
	        'x-cos-server-side-encryption-customer-key-MD5': 'SSECustomerKeyMD5',
	        // SSE-COS、SSE-KMS
	        'x-cos-server-side-encryption': 'ServerSideEncryption',
	        'x-cos-server-side-encryption-cos-kms-key-id': 'SSEKMSKeyId',
	        'x-cos-server-side-encryption-context': 'SSEContext',
	        // 上传时图片处理
	        'Pic-Operations': 'PicOperations'
	      };
	      util.each(headerMap, function (paramKey, headerKey) {
	        if (params[paramKey] !== undefined) {
	          Headers[headerKey] = params[paramKey];
	        }
	      });
	      params.Headers = clearKey(Headers);
	    }
	  }

	  return params;
	};

	var apiWrapper = function apiWrapper(apiName, apiFn) {
	  return function (params, callback) {
	    var self = this; // 处理参数

	    if (typeof params === 'function') {
	      callback = params;
	      params = {};
	    } // 整理参数格式


	    params = formatParams(apiName, params); // tracker传递

	    var tracker;

	    if (self.options.EnableTracker) {
	      if (params.calledBySdk === 'sliceUploadFile') {
	        // 分块上传内部方法使用sliceUploadFile的子链路
	        tracker = params.tracker && params.tracker.generateSubTracker({
	          apiName: apiName
	        });
	      } else if (['uploadFile', 'uploadFiles'].includes(apiName)) {
	        // uploadFile、uploadFiles方法在内部处理，此处不处理
	        tracker = null;
	      } else {
	        var fileSize = -1;

	        if (params.Body) {
	          fileSize = typeof params.Body === 'string' ? params.Body.length : params.Body.size || params.Body.byteLength || -1;
	        }

	        tracker = new Tracker({
	          bucket: params.Bucket,
	          region: params.Region,
	          apiName: apiName,
	          fileKey: params.Key,
	          fileSize: fileSize,
	          deepTracker: self.options.DeepTracker,
	          customId: self.options.CustomId,
	          delay: self.options.TrackerDelay
	        });
	      }
	    }

	    params.tracker = tracker; // 代理回调函数

	    var formatResult = function formatResult(result) {
	      if (result && result.headers) {
	        result.headers['x-cos-request-id'] && (result.RequestId = result.headers['x-cos-request-id']);
	        result.headers['x-ci-request-id'] && (result.RequestId = result.headers['x-ci-request-id']);
	        result.headers['x-cos-version-id'] && (result.VersionId = result.headers['x-cos-version-id']);
	        result.headers['x-cos-delete-marker'] && (result.DeleteMarker = result.headers['x-cos-delete-marker']);
	      }

	      return result;
	    };

	    var _callback = function _callback(err, data) {
	      // 格式化上报参数并上报
	      tracker && tracker.formatResult(err, data);
	      callback && callback(formatResult(err), formatResult(data));
	    };

	    var checkParams = function checkParams() {
	      if (apiName !== 'getService' && apiName !== 'abortUploadTask') {
	        // 判断参数是否完整
	        var missingResult = hasMissingParams.call(self, apiName, params);

	        if (missingResult) {
	          return 'missing param ' + missingResult;
	        } // 判断 region 格式


	        if (params.Region) {
	          if (self.options.CompatibilityMode) {
	            if (!/^([a-z\d-.]+)$/.test(params.Region)) {
	              return 'Region format error.';
	            }
	          } else {
	            if (params.Region.indexOf('cos.') > -1) {
	              return 'param Region should not be start with "cos."';
	            } else if (!/^([a-z\d-]+)$/.test(params.Region)) {
	              return 'Region format error.';
	            }
	          } // 判断 region 格式


	          if (!self.options.CompatibilityMode && params.Region.indexOf('-') === -1 && params.Region !== 'yfb' && params.Region !== 'default' && params.Region !== 'accelerate') {
	            console.warn('warning: param Region format error, find help here: https://cloud.tencent.com/document/product/436/6224');
	          }
	        } // 兼容不带 AppId 的 Bucket


	        if (params.Bucket) {
	          if (!/^([a-z\d-]+)-(\d+)$/.test(params.Bucket)) {
	            if (params.AppId) {
	              params.Bucket = params.Bucket + '-' + params.AppId;
	            } else if (self.options.AppId) {
	              params.Bucket = params.Bucket + '-' + self.options.AppId;
	            } else {
	              return 'Bucket should format as "test-1250000000".';
	            }
	          }

	          if (params.AppId) {
	            console.warn('warning: AppId has been deprecated, Please put it at the end of parameter Bucket(E.g Bucket:"test-1250000000" ).');
	            delete params.AppId;
	          }
	        } // 如果 Key 是 / 开头，强制去掉第一个 /


	        if (!self.options.UseRawKey && params.Key && params.Key.substr(0, 1) === '/') {
	          params.Key = params.Key.substr(1);
	        }
	      }
	    };

	    var errMsg = checkParams();
	    var isSync = ['getAuth', 'getObjectUrl'].includes(apiName);

	    if (typeof Promise === 'function' && !isSync && !callback) {
	      return new Promise(function (resolve, reject) {
	        callback = function callback(err, data) {
	          err ? reject(err) : resolve(data);
	        };

	        if (errMsg) return _callback(util.error(new Error(errMsg)));
	        apiFn.call(self, params, _callback);
	      });
	    } else {
	      if (errMsg) return _callback(util.error(new Error(errMsg)));
	      var res = apiFn.call(self, params, _callback);
	      if (isSync) return res;
	    }
	  };
	};

	var throttleOnProgress = function throttleOnProgress(total, onProgress) {
	  var self = this;
	  var size0 = 0;
	  var size1 = 0;
	  var time0 = Date.now();
	  var time1;
	  var timer;

	  function update() {
	    timer = 0;

	    if (onProgress && typeof onProgress === 'function') {
	      time1 = Date.now();
	      var speed = Math.max(0, Math.round((size1 - size0) / ((time1 - time0) / 1000) * 100) / 100) || 0;
	      var percent;

	      if (size1 === 0 && total === 0) {
	        percent = 1;
	      } else {
	        percent = Math.floor(size1 / total * 100) / 100 || 0;
	      }

	      time0 = time1;
	      size0 = size1;

	      try {
	        onProgress({
	          loaded: size1,
	          total: total,
	          speed: speed,
	          percent: percent
	        });
	      } catch (e) {}
	    }
	  }

	  return function (info, immediately) {
	    if (info) {
	      size1 = info.loaded;
	      total = info.total;
	    }

	    if (immediately) {
	      clearTimeout(timer);
	      update();
	    } else {
	      if (timer) return;
	      timer = setTimeout(update, self.options.ProgressInterval);
	    }
	  };
	};

	var getFileSize = function getFileSize(api, params, callback) {
	  var size;

	  if (typeof params.Body === 'string') {
	    params.Body = new Blob([params.Body], {
	      type: 'text/plain'
	    });
	  } else if (params.Body instanceof ArrayBuffer) {
	    params.Body = new Blob([params.Body]);
	  }

	  if (params.Body && (params.Body instanceof Blob || params.Body.toString() === '[object File]' || params.Body.toString() === '[object Blob]')) {
	    size = params.Body.size;
	  } else {
	    callback(util.error(new Error('params body format error, Only allow File|Blob|String.')));
	    return;
	  }

	  params.ContentLength = size;
	  callback(null, size);
	}; // 获取调正的时间戳


	var getSkewTime = function getSkewTime(offset) {
	  return Date.now() + (offset || 0);
	};

	var error = function error(err, opt) {
	  var sourceErr = err;
	  err.message = err.message || null;

	  if (typeof opt === 'string') {
	    err.error = opt;
	    err.message = opt;
	  } else if (_typeof(opt) === 'object' && opt !== null) {
	    extend(err, opt);
	    if (opt.code || opt.name) err.code = opt.code || opt.name;
	    if (opt.message) err.message = opt.message;
	    if (opt.stack) err.stack = opt.stack;
	  }

	  if (typeof Object.defineProperty === 'function') {
	    Object.defineProperty(err, 'name', {
	      writable: true,
	      enumerable: false
	    });
	    Object.defineProperty(err, 'message', {
	      enumerable: true
	    });
	  }

	  err.name = opt && opt.name || err.name || err.code || 'Error';
	  if (!err.code) err.code = err.name;
	  if (!err.error) err.error = clone(sourceErr); // 兼容老的错误格式

	  return err;
	};

	var isWebWorker = function isWebWorker() {
	  // 有限判断 worker 环境的 constructor name 其次用 worker 独有的 FileReaderSync 兜底 详细参考 https://developer.mozilla.org/zh-CN/docs/Web/API/Web_Workers_API/Using_web_workers
	  return (typeof globalThis === "undefined" ? "undefined" : _typeof(globalThis)) === 'object' && (globalThis.constructor.name === 'DedicatedWorkerGlobalScope' || globalThis.FileReaderSync);
	};

	var isNode = function isNode() {
	  // 得兜底 web worker 环境中 webpack 用了 process 插件之类的情况
	  return (typeof window === "undefined" ? "undefined" : _typeof(window)) !== 'object' && (typeof process === "undefined" ? "undefined" : _typeof(process)) === 'object' && "function" === 'function' && !isWebWorker();
	};

	var isCIHost = function isCIHost(url) {
	  return /^https?:\/\/([^/]+\.)?ci\.[^/]+/.test(url);
	}; //判断是否是ios


	var isIOS = function () {
	  if ((typeof navigator === "undefined" ? "undefined" : _typeof(navigator)) !== 'object') {
	    return false;
	  }

	  var u = navigator.userAgent;
	  var isIOS = !!u.match(/\(i[^;]+;( U;)? CPU.+Mac OS X/); //ios终端

	  return isIOS;
	}(); // 判断是qq内置浏览器


	var isQQ = function () {
	  if ((typeof navigator === "undefined" ? "undefined" : _typeof(navigator)) !== 'object') {
	    return false;
	  }

	  return /\sQQ/i.test(navigator.userAgent);
	}();

	var encodeBase64 = function encodeBase64(str, safe) {
	  var base64Str = base64.encode(str); // 万象使用的安全base64格式需要特殊处理

	  if (safe) {
	    base64Str = base64Str.replaceAll('+', '-').replaceAll('/', '_').replaceAll('=', '');
	  }

	  return base64Str;
	};

	var util = {
	  noop: noop,
	  formatParams: formatParams,
	  apiWrapper: apiWrapper,
	  xml2json: xml2json,
	  json2xml: json2xml,
	  md5: md5,
	  clearKey: clearKey,
	  fileSlice: fileSlice,
	  getBodyMd5: getBodyMd5,
	  getFileMd5: getFileMd5,
	  b64: b64,
	  extend: extend,
	  isArray: isArray,
	  isInArray: isInArray,
	  makeArray: makeArray,
	  each: each,
	  map: map,
	  filter: filter,
	  clone: clone,
	  attr: attr,
	  uuid: uuid,
	  camSafeUrlEncode: camSafeUrlEncode,
	  throttleOnProgress: throttleOnProgress,
	  getFileSize: getFileSize,
	  getSkewTime: getSkewTime,
	  error: error,
	  obj2str: obj2str,
	  getAuth: getAuth,
	  parseSelectPayload: parseSelectPayload,
	  getSourceParams: getSourceParams,
	  isBrowser: true,
	  isNode: isNode,
	  isCIHost: isCIHost,
	  isIOS_QQ: isIOS && isQQ,
	  encodeBase64: encodeBase64
	};
	module.exports = util;
	/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../node_modules/process/browser.js */ "./node_modules/process/browser.js")));

	/***/ })

	/******/ });
	}); 
} (cosJsSdkV5));

var cosJsSdkV5Exports = cosJsSdkV5.exports;
var COS = /*@__PURE__*/getDefaultExportFromCjs(cosJsSdkV5Exports);

var PicGoUploader = /** @class */ (function () {
    function PicGoUploader(settings, plugin) {
        this.settings = settings;
        this.plugin = plugin;
    }
    PicGoUploader.prototype.uploadFiles = function (fileList) {
        return __awaiter(this, void 0, void 0, function () {
            var response, data, uploadUrlFullResultList;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, obsidian.requestUrl({
                            url: this.settings.uploadServer,
                            method: "POST",
                            headers: { "Content-Type": "application/json" },
                            body: JSON.stringify({ list: fileList }),
                        })];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.json];
                    case 2:
                        data = _a.sent();
                        // piclist
                        if (data.fullResult) {
                            uploadUrlFullResultList = data.fullResult || [];
                            this.settings.uploadedImages = __spreadArray(__spreadArray([], __read((this.settings.uploadedImages || [])), false), __read(uploadUrlFullResultList), false);
                        }
                        return [2 /*return*/, data];
                }
            });
        });
    };
    PicGoUploader.prototype.uploadFileByClipboard = function (clipboardData) {
        return __awaiter(this, void 0, void 0, function () {
            var res, data, uploadUrlFullResultList;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, obsidian.requestUrl({
                            url: this.settings.uploadServer,
                            method: "POST",
                        })];
                    case 1:
                        res = _a.sent();
                        return [4 /*yield*/, res.json];
                    case 2:
                        data = _a.sent();
                        // piclist
                        if (data.fullResult) {
                            uploadUrlFullResultList = data.fullResult || [];
                            this.settings.uploadedImages = __spreadArray(__spreadArray([], __read((this.settings.uploadedImages || [])), false), __read(uploadUrlFullResultList), false);
                            this.plugin.saveSettings();
                        }
                        if (res.status !== 200) {
                            ({ response: data, body: data.msg });
                            return [2 /*return*/, {
                                    code: -1,
                                    msg: data.msg,
                                    data: "",
                                }];
                        }
                        else {
                            return [2 /*return*/, {
                                    code: 0,
                                    msg: "success",
                                    data: typeof data.result == "string" ? data.result : data.result[0],
                                }];
                        }
                }
            });
        });
    };
    return PicGoUploader;
}());
var PicGoCoreUploader = /** @class */ (function () {
    function PicGoCoreUploader(settings, plugin) {
        this.settings = settings;
        this.plugin = plugin;
    }
    PicGoCoreUploader.prototype.uploadFiles = function (fileList) {
        return __awaiter(this, void 0, void 0, function () {
            var length, cli, command, res, splitList, splitListLength, data;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        length = fileList.length;
                        cli = this.settings.picgoCorePath || "picgo";
                        command = "".concat(cli, " upload ").concat(fileList
                            .map(function (item) { return "\"".concat(item, "\""); })
                            .join(" "));
                        return [4 /*yield*/, this.exec(command)];
                    case 1:
                        res = _a.sent();
                        splitList = res.split("\n");
                        splitListLength = splitList.length;
                        data = splitList.splice(splitListLength - 1 - length, length);
                        if (res.includes("PicGo ERROR")) {
                            console.log(command, res);
                            return [2 /*return*/, {
                                    success: false,
                                    msg: "失败",
                                }];
                        }
                        else {
                            return [2 /*return*/, {
                                    success: true,
                                    result: data,
                                }];
                        }
                }
            });
        });
    };
    // PicGo-Core 上传处理
    PicGoCoreUploader.prototype.uploadFileByClipboard = function (clipboardData) {
        return __awaiter(this, void 0, void 0, function () {
            var res, splitList, lastImage;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.uploadByClip()];
                    case 1:
                        res = _a.sent();
                        splitList = res.split("\n");
                        lastImage = getLastImage(splitList);
                        if (lastImage) {
                            return [2 /*return*/, {
                                    code: 0,
                                    msg: "success",
                                    data: lastImage,
                                }];
                        }
                        else {
                            console.log(splitList);
                            // new Notice(`"Please check PicGo-Core config"\n${res}`);
                            return [2 /*return*/, {
                                    code: -1,
                                    msg: "\"Please check PicGo-Core config\"\n".concat(res),
                                    data: "",
                                }];
                        }
                }
            });
        });
    };
    // PicGo-Core的剪切上传反馈
    PicGoCoreUploader.prototype.uploadByClip = function () {
        return __awaiter(this, void 0, void 0, function () {
            var command, res;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (this.settings.picgoCorePath) {
                            command = "".concat(this.settings.picgoCorePath, " upload");
                        }
                        else {
                            command = "picgo upload";
                        }
                        return [4 /*yield*/, this.exec(command)];
                    case 1:
                        res = _a.sent();
                        // const res = await this.spawnChild();
                        return [2 /*return*/, res];
                }
            });
        });
    };
    PicGoCoreUploader.prototype.exec = function (command) {
        return __awaiter(this, void 0, void 0, function () {
            var stdout, res;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, require$$0$1.exec(command)];
                    case 1:
                        stdout = (_a.sent()).stdout;
                        return [4 /*yield*/, streamToString(stdout)];
                    case 2:
                        res = _a.sent();
                        return [2 /*return*/, res];
                }
            });
        });
    };
    PicGoCoreUploader.prototype.spawnChild = function () {
        var _a, e_1, _b, _c, _d, e_2, _e, _f;
        return __awaiter(this, void 0, void 0, function () {
            var spawn, child, data, _g, _h, _j, chunk, e_1_1, error, _k, _l, _m, chunk, e_2_1, exitCode;
            return __generator(this, function (_o) {
                switch (_o.label) {
                    case 0:
                        spawn = require("child_process").spawn;
                        child = spawn("picgo", ["upload"], {
                            shell: true,
                        });
                        data = "";
                        _o.label = 1;
                    case 1:
                        _o.trys.push([1, 6, 7, 12]);
                        _g = true, _h = __asyncValues(child.stdout);
                        _o.label = 2;
                    case 2: return [4 /*yield*/, _h.next()];
                    case 3:
                        if (!(_j = _o.sent(), _a = _j.done, !_a)) return [3 /*break*/, 5];
                        _c = _j.value;
                        _g = false;
                        try {
                            chunk = _c;
                            data += chunk;
                        }
                        finally {
                            _g = true;
                        }
                        _o.label = 4;
                    case 4: return [3 /*break*/, 2];
                    case 5: return [3 /*break*/, 12];
                    case 6:
                        e_1_1 = _o.sent();
                        e_1 = { error: e_1_1 };
                        return [3 /*break*/, 12];
                    case 7:
                        _o.trys.push([7, , 10, 11]);
                        if (!(!_g && !_a && (_b = _h.return))) return [3 /*break*/, 9];
                        return [4 /*yield*/, _b.call(_h)];
                    case 8:
                        _o.sent();
                        _o.label = 9;
                    case 9: return [3 /*break*/, 11];
                    case 10:
                        if (e_1) throw e_1.error;
                        return [7 /*endfinally*/];
                    case 11: return [7 /*endfinally*/];
                    case 12:
                        error = "";
                        _o.label = 13;
                    case 13:
                        _o.trys.push([13, 18, 19, 24]);
                        _k = true, _l = __asyncValues(child.stderr);
                        _o.label = 14;
                    case 14: return [4 /*yield*/, _l.next()];
                    case 15:
                        if (!(_m = _o.sent(), _d = _m.done, !_d)) return [3 /*break*/, 17];
                        _f = _m.value;
                        _k = false;
                        try {
                            chunk = _f;
                            error += chunk;
                        }
                        finally {
                            _k = true;
                        }
                        _o.label = 16;
                    case 16: return [3 /*break*/, 14];
                    case 17: return [3 /*break*/, 24];
                    case 18:
                        e_2_1 = _o.sent();
                        e_2 = { error: e_2_1 };
                        return [3 /*break*/, 24];
                    case 19:
                        _o.trys.push([19, , 22, 23]);
                        if (!(!_k && !_d && (_e = _l.return))) return [3 /*break*/, 21];
                        return [4 /*yield*/, _e.call(_l)];
                    case 20:
                        _o.sent();
                        _o.label = 21;
                    case 21: return [3 /*break*/, 23];
                    case 22:
                        if (e_2) throw e_2.error;
                        return [7 /*endfinally*/];
                    case 23: return [7 /*endfinally*/];
                    case 24: return [4 /*yield*/, new Promise(function (resolve, reject) {
                            child.on("close", resolve);
                        })];
                    case 25:
                        exitCode = _o.sent();
                        if (exitCode) {
                            throw new Error("subprocess error exit ".concat(exitCode, ", ").concat(error));
                        }
                        return [2 /*return*/, data];
                }
            });
        });
    };
    return PicGoCoreUploader;
}());
var BaseUploader = /** @class */ (function () {
    function BaseUploader(settings, plugin) {
        this.settings = settings;
        this.plugin = plugin;
    }
    BaseUploader.prototype.uploadFiles = function (fileList) {
        return __awaiter(this, void 0, void 0, function () {
            var urls, fileList_1, fileList_1_1, imagePath, imageData, response, fileName, imageBase64String, imageUrl, e_3_1;
            var e_3, _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        console.log('uploadFiles', fileList);
                        urls = [];
                        _b.label = 1;
                    case 1:
                        _b.trys.push([1, 10, 11, 12]);
                        fileList_1 = __values(fileList), fileList_1_1 = fileList_1.next();
                        _b.label = 2;
                    case 2:
                        if (!!fileList_1_1.done) return [3 /*break*/, 9];
                        imagePath = fileList_1_1.value;
                        imageData = void 0;
                        if (!imagePath.startsWith('http')) return [3 /*break*/, 5];
                        return [4 /*yield*/, obsidian.requestUrl(imagePath.toString())];
                    case 3:
                        response = _b.sent();
                        return [4 /*yield*/, Buffer.from(response.text)];
                    case 4:
                        imageData = _b.sent();
                        return [3 /*break*/, 6];
                    case 5:
                        imageData = require$$0__namespace.readFileSync(imagePath.toString());
                        _b.label = 6;
                    case 6:
                        fileName = this.settings.rename
                            ? "".concat(getCurrentTimestamp()).concat(path__namespace.extname(imagePath.toString()))
                            : path__namespace.basename(imagePath.toString());
                        imageBase64String = imageData.toString('base64');
                        return [4 /*yield*/, this.upload(imageBase64String, fileName)];
                    case 7:
                        imageUrl = _b.sent();
                        urls.push(imageUrl);
                        _b.label = 8;
                    case 8:
                        fileList_1_1 = fileList_1.next();
                        return [3 /*break*/, 2];
                    case 9: return [3 /*break*/, 12];
                    case 10:
                        e_3_1 = _b.sent();
                        e_3 = { error: e_3_1 };
                        return [3 /*break*/, 12];
                    case 11:
                        try {
                            if (fileList_1_1 && !fileList_1_1.done && (_a = fileList_1.return)) _a.call(fileList_1);
                        }
                        finally { if (e_3) throw e_3.error; }
                        return [7 /*endfinally*/];
                    case 12:
                        console.log('urls', urls);
                        return [2 /*return*/, {
                                success: true,
                                result: urls,
                            }];
                }
            });
        });
    };
    BaseUploader.prototype.uploadFileByClipboard = function (clipboardData) {
        return __awaiter(this, void 0, void 0, function () {
            var urls, i, fileName, imageBase64String, imageUrl;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        console.log('uploadFileByClipboard', clipboardData.types);
                        urls = [];
                        i = 0;
                        _a.label = 1;
                    case 1:
                        if (!(i < clipboardData.files.length)) return [3 /*break*/, 5];
                        fileName = "".concat(getCurrentTimestamp()).concat(path__namespace.extname(clipboardData.files[i].name));
                        return [4 /*yield*/, fileToBase64(clipboardData.files[i])];
                    case 2:
                        imageBase64String = _a.sent();
                        return [4 /*yield*/, this.upload(imageBase64String, fileName)];
                    case 3:
                        imageUrl = _a.sent();
                        urls.push(imageUrl);
                        _a.label = 4;
                    case 4:
                        i++;
                        return [3 /*break*/, 1];
                    case 5:
                        console.log('urls', urls);
                        return [2 /*return*/, {
                                code: 0,
                                msg: "success",
                                data: urls[0],
                            }];
                }
            });
        });
    };
    return BaseUploader;
}());
var BlogUploader = /** @class */ (function (_super) {
    __extends(BlogUploader, _super);
    function BlogUploader() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    BlogUploader.prototype.upload = function (imageData, fileName) {
        return __awaiter(this, void 0, void 0, function () {
            var metaWeblogUrl, blogId, username, password, imageDataInfo, xmlData, headers, response, mediaInfo, imageUrl;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        metaWeblogUrl = this.settings.blogSetting.blogUrl;
                        blogId = this.settings.blogSetting.blogId;
                        username = this.settings.blogSetting.blogUserName;
                        password = this.settings.blogSetting.blogPassword;
                        imageDataInfo = {
                            name: 'image.jpg',
                            type: 'image/jpeg',
                            bits: imageData, // Convert binary data to Base64 string
                        };
                        xmlData = "<?xml version=\"1.0\"?>\n            <methodCall>\n                <methodName>metaWeblog.newMediaObject</methodName>\n                <params>\n                    <param>\n                        <value>\n                            <string>".concat(blogId, "</string>\n                        </value>\n                    </param>\n                    <param>\n                        <value>\n                            <string>").concat(username, "</string>\n                        </value>\n                    </param>\n                    <param>\n                        <value>\n                            <string>").concat(password, "</string>\n                        </value>\n                    </param>\n                    <param>\n                        <value>\n                            <struct>\n                                <member>\n                                    <name>name</name>\n                                    <value>\n                                        <string>").concat(imageDataInfo.name, "</string>\n                                    </value>\n                                </member>\n                                <member>\n                                    <name>type</name>\n                                    <value>\n                                        <string>").concat(imageDataInfo.type, "</string>\n                                    </value>\n                                </member>\n                                <member>\n                                    <name>bits</name>\n                                    <value>\n                                        <base64>").concat(imageDataInfo.bits, "</base64>\n                                    </value>\n                                </member>\n                            </struct>\n                        </value>\n                    </param>\n                </params>\n            </methodCall>");
                        headers = {
                            'Content-Type': 'text/xml', // Set the correct Content-Type for XML-RPC
                        };
                        return [4 /*yield*/, obsidian.requestUrl({
                                url: metaWeblogUrl,
                                method: 'POST',
                                headers: headers,
                                body: xmlData,
                            })];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.text];
                    case 2:
                        mediaInfo = _a.sent();
                        return [4 /*yield*/, this.parseMediaInfo(mediaInfo)];
                    case 3:
                        imageUrl = _a.sent();
                        console.log('Image URL:', imageUrl);
                        return [2 /*return*/, imageUrl];
                }
            });
        });
    };
    BlogUploader.prototype.parseMediaInfo = function (mediaInfo) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, new Promise(function (resolve, reject) {
                        parseString(mediaInfo, function (err, result) {
                            if (err) {
                                reject(err);
                            }
                            else {
                                var imageUrl = result.methodResponse.params[0].param[0].value[0].struct[0].member[0]
                                    .value[0].string[0];
                                resolve(imageUrl);
                            }
                        });
                    })];
            });
        });
    };
    return BlogUploader;
}(BaseUploader));
var GithubUploader = /** @class */ (function (_super) {
    __extends(GithubUploader, _super);
    function GithubUploader() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    GithubUploader.prototype.upload = function (imageData, fileName) {
        return __awaiter(this, void 0, void 0, function () {
            var fileKey, apiUrl, requestData, response, customUrl, imageUrl;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        fileKey = path__namespace.join("/", this.settings.githubSetting.path, "/", fileName);
                        apiUrl = "https://api.github.com/repos/".concat(this.settings.githubSetting.repo, "/contents").concat(fileKey);
                        requestData = {
                            message: "Upload ".concat(fileKey),
                            branch: this.settings.githubSetting.branch,
                            content: imageData,
                        };
                        return [4 /*yield*/, obsidian.requestUrl({
                                url: apiUrl,
                                method: 'PUT',
                                headers: {
                                    Authorization: "token ".concat(this.settings.githubSetting.token),
                                    'Content-Type': 'application/json',
                                },
                                body: JSON.stringify(requestData),
                            })];
                    case 1:
                        response = _a.sent();
                        customUrl = this.settings.githubSetting.customUrl.trim();
                        imageUrl = customUrl === '' ? response.json.content.download_url : customUrl + response.json.content.path;
                        return [2 /*return*/, imageUrl];
                }
            });
        });
    };
    return GithubUploader;
}(BaseUploader));
var GiteeUploader = /** @class */ (function (_super) {
    __extends(GiteeUploader, _super);
    function GiteeUploader() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    GiteeUploader.prototype.upload = function (imageData, fileName) {
        return __awaiter(this, void 0, void 0, function () {
            var fileKey, apiUrl, requestData, response, downloadUrl;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        fileKey = path__namespace.join("/", this.settings.giteeSetting.path, "/", fileName);
                        apiUrl = "https://gitee.com/api/v5/repos/".concat(this.settings.giteeSetting.repo, "/contents").concat(fileKey);
                        requestData = {
                            access_token: this.settings.giteeSetting.token,
                            message: "Upload ".concat(fileKey),
                            branch: this.settings.giteeSetting.branch,
                            content: imageData,
                        };
                        return [4 /*yield*/, obsidian.requestUrl({
                                url: apiUrl,
                                method: 'POST',
                                headers: {
                                    'Content-Type': 'application/json',
                                },
                                body: JSON.stringify(requestData),
                            })];
                    case 1:
                        response = _a.sent();
                        console.log("gitee 200: ", response);
                        downloadUrl = response.json.content.download_url;
                        return [2 /*return*/, downloadUrl];
                }
            });
        });
    };
    return GiteeUploader;
}(BaseUploader));
var TencentCosUploader = /** @class */ (function (_super) {
    __extends(TencentCosUploader, _super);
    function TencentCosUploader() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.cos = new COS({
            SecretId: _this.settings.tencentSetting.secretId,
            SecretKey: _this.settings.tencentSetting.secretKey,
        });
        return _this;
    }
    TencentCosUploader.prototype.upload = function (imageData, fileName) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [2 /*return*/, new Promise(function (resolve, reject) {
                        var fileKey = path__namespace.join("/", _this.settings.tencentSetting.path, "/", fileName);
                        _this.cos.putObject({
                            Bucket: _this.settings.tencentSetting.bucketName,
                            Region: _this.settings.tencentSetting.region,
                            Key: fileKey,
                            StorageClass: 'STANDARD',
                            Body: _this.base64ToBlob(imageData),
                        }, function (err, data) {
                            if (err) {
                                console.log("cos upload:", err);
                                reject(err);
                            }
                            else {
                                var location_1 = data.Location || '';
                                resolve("https://".concat(location_1));
                            }
                        });
                    })];
            });
        });
    };
    TencentCosUploader.prototype.base64ToBlob = function (base64String, contentType) {
        if (contentType === void 0) { contentType = ''; }
        // 解码 base64 字符串为二进制数据
        var binaryString = atob(base64String);
        var byteArray = new Uint8Array(binaryString.length);
        for (var i = 0; i < binaryString.length; i++) {
            byteArray[i] = binaryString.charCodeAt(i);
        }
        // 创建 Blob 对象
        if (contentType === '') {
            contentType = 'application/octet-stream'; // 默认为二进制流
        }
        return new Blob([byteArray], { type: contentType });
    };
    return TencentCosUploader;
}(BaseUploader));

var PicGoDeleter = /** @class */ (function () {
    function PicGoDeleter(plugin) {
        this.plugin = plugin;
    }
    PicGoDeleter.prototype.deleteImage = function (configMap) {
        return __awaiter(this, void 0, void 0, function () {
            var response, data;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, obsidian.requestUrl({
                            url: this.plugin.settings.deleteServer,
                            method: "POST",
                            headers: { "Content-Type": "application/json" },
                            body: JSON.stringify({
                                list: configMap,
                            }),
                        })];
                    case 1:
                        response = _a.sent();
                        data = response.json;
                        return [2 /*return*/, data];
                }
            });
        });
    };
    return PicGoDeleter;
}());

// ![](./dsa/aa.png) local image should has ext
// ![](https://dasdasda) internet image should not has ext
// MARK [[./dsa/aa.png]] 
var REGEX_FILE = /\!\[(.*?)\]\((\S+\.\w+)\)|\!\[(.*?)\]\((https?:\/\/.*?)\)/g;
var REGEX_WIKI_FILE = /\!\[\[(.*?)(\s*?\|.*?)?\]\]/g;
var Helper = /** @class */ (function () {
    function Helper(app) {
        this.app = app;
    }
    Helper.prototype.getFrontmatterValue = function (key, defaultValue) {
        if (defaultValue === void 0) { defaultValue = undefined; }
        var file = this.app.workspace.getActiveFile();
        if (!file) {
            return undefined;
        }
        var path = file.path;
        var cache = this.app.metadataCache.getCache(path);
        var value = defaultValue;
        if ((cache === null || cache === void 0 ? void 0 : cache.frontmatter) && cache.frontmatter.hasOwnProperty(key)) {
            value = cache.frontmatter[key];
        }
        return value;
    };
    Helper.prototype.getEditor = function () {
        var mdView = this.app.workspace.getActiveViewOfType(obsidian.MarkdownView);
        if (mdView) {
            return mdView.editor;
        }
        else {
            return null;
        }
    };
    Helper.prototype.getValue = function () {
        var editor = this.getEditor();
        return editor.getValue();
    };
    Helper.prototype.setValue = function (value) {
        var editor = this.getEditor();
        var _a = editor.getScrollInfo(), left = _a.left, top = _a.top;
        var position = editor.getCursor();
        editor.setValue(value);
        editor.scrollTo(left, top);
        editor.setCursor(position);
    };
    // get all file urls, include local and internet
    Helper.prototype.getAllFiles = function () {
        var editor = this.getEditor();
        var value = editor.getValue();
        return this.getImageLink(value);
    };
    Helper.prototype.getImageLink = function (value) {
        var e_1, _a, e_2, _b;
        var matches = value.matchAll(REGEX_FILE);
        var WikiMatches = value.matchAll(REGEX_WIKI_FILE);
        var fileArray = [];
        try {
            for (var matches_1 = __values(matches), matches_1_1 = matches_1.next(); !matches_1_1.done; matches_1_1 = matches_1.next()) {
                var match = matches_1_1.value;
                var source = match[0];
                var name_1 = match[1];
                var path = match[2];
                if (name_1 === undefined) {
                    name_1 = match[3];
                }
                if (path === undefined) {
                    path = match[4];
                }
                fileArray.push({
                    path: path,
                    name: name_1,
                    source: source,
                });
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (matches_1_1 && !matches_1_1.done && (_a = matches_1.return)) _a.call(matches_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        try {
            for (var WikiMatches_1 = __values(WikiMatches), WikiMatches_1_1 = WikiMatches_1.next(); !WikiMatches_1_1.done; WikiMatches_1_1 = WikiMatches_1.next()) {
                var match = WikiMatches_1_1.value;
                var name_2 = path$4.parse(match[1]).name;
                var path = match[1];
                var source = match[0];
                if (match[2]) {
                    name_2 = "".concat(name_2).concat(match[2]);
                }
                fileArray.push({
                    path: path,
                    name: name_2,
                    source: source,
                });
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (WikiMatches_1_1 && !WikiMatches_1_1.done && (_b = WikiMatches_1.return)) _b.call(WikiMatches_1);
            }
            finally { if (e_2) throw e_2.error; }
        }
        console.log(fileArray);
        return fileArray;
    };
    Helper.prototype.hasBlackDomain = function (src, blackDomains) {
        if (blackDomains.trim() === "") {
            return false;
        }
        var blackDomainList = blackDomains.split(",").filter(function (item) { return item !== ""; });
        var url = new URL(src);
        var domain = url.hostname;
        return blackDomainList.some(function (blackDomain) { return domain.includes(blackDomain); });
    };
    return Helper;
}());

// العربية
var ar = {};

// čeština
var cz = {};

// Dansk
var da = {};

// Deutsch
var de = {};

// English
var en = {
    // setting.ts
    "Plugin Settings": "Plugin Settings",
    "Auto pasted upload": "Auto pasted upload",
    "If you set this value true, when you paste image, it will be auto uploaded(you should set the picGo server rightly)": "If you set this value true, when you paste image, it will be auto uploaded",
    "Default uploader": "Default uploader",
    "PicGo server": "PicGo server",
    "Please input PicGo server": "Please input PicGo server",
    "PicGo delete server": "PicGo server delete route(you need to use PicList app)",
    "PicList desc": "Search PicList on Github to download and install",
    "Please input PicGo delete server": "Please input PicGo delete server",
    "Delete image using PicList": "Delete image using PicList",
    "PicGo-Core path": "PicGo-Core path",
    "Delete successfully": "Delete successfully",
    "Delete failed": "Delete failed",
    "Image size suffix": "Image size suffix",
    "Image size suffix Description": "like |300 for resize image in ob.",
    "Please input image size suffix": "Please input image size suffix",
    "Error, could not delete": "Error, could not delete",
    "Please input PicGo-Core path, default using environment variables": "Please input PicGo-Core path, default using environment variables",
    "Work on network": "Work on network",
    "Work on network Description": "Allow upload network image by 'Upload all' command.\n Or when you paste, md standard image link in your clipboard will be auto upload.",
    fixPath: "fixPath",
    fixPathWarning: "This option is used to fix PicGo-core upload failures on Linux and Mac. It modifies the PATH variable within Obsidian. If Obsidian encounters any bugs, turn off the option, try again! ",
    "Upload when clipboard has image and text together": "Upload when clipboard has image and text together",
    "When you copy, some application like Excel will image and text to clipboard, you can upload or not.": "When you copy, some application like Excel will image and text to clipboard, you can upload or not.",
    "Network Domain Black List": "Network Domain Black List",
    "Network Domain Black List Description": "Image in the domain list will not be upload,use comma separated",
    "Delete source file after you upload file": "Delete source file after you upload file",
    "Delete source file in ob assets after you upload file.": "Delete source file in ob assets after you upload file.",
    "Image desc": "Image desc",
    reserve: "default",
    "remove all": "none",
    "remove default": "remove image.png",
    "Blog URL": "Blog URL",
    "Blog ID": "Blog ID",
    "Blog User Name": "Blog User Name",
    "Blog Token": "Blog Token",
    "Please input blog url": "Please input blog url",
    "Please input blog ID": "Please input blog ID",
    "Please input blog user name": "Please input blog user name",
    "Please input blog token": "Please input blog token",
    "Repository": "Repository",
    "Please input your repository": "Please input your repository",
    "Branch": "Branch",
    "Please input your branch": "Please input your branch",
    "Token": "Token",
    "Please input your token": "Please input your token",
    "Path": "Path",
    "Please input your path": "Please input your path",
    "Custom URL": "Custom URL",
    "Please input custom URL": "Please input custom URL",
    "Rename": "Rename",
    "Rename Desc": "Whether to rename the image with a timestamp",
    "Secret ID": "Secret ID",
    "Please input your secret ID": "Please input your secret ID",
    "Secret Key": "Secret Key",
    "Please input your secret key": "Please input your secret key",
    "Region": "Region",
    "Please input your region": "Please input your region",
    "Bucket": "Bucket",
    "Please input your bucket name": "Please input your bucket name"
};

// British English
var enGB = {};

// Español
var es = {};

// français
var fr = {};

// हिन्दी
var hi = {};

// Bahasa Indonesia
var id = {};

// Italiano
var it = {};

// 日本語
var ja = {};

// 한국어
var ko = {};

// Nederlands
var nl = {};

// Norsk
var no = {};

// język polski
var pl = {};

// Português
var pt = {};

// Português do Brasil
// Brazilian Portuguese
var ptBR = {};

// Română
var ro = {};

// русский
var ru = {};

// Türkçe
var tr = {};

// 简体中文
var zhCN = {
    // setting.ts
    "Plugin Settings": "插件设置",
    "Auto pasted upload": "剪切板自动上传",
    "If you set this value true, when you paste image, it will be auto uploaded(you should set the picGo server rightly)": "启用该选项后，粘贴图片时会自动上传",
    "Default uploader": "默认上传器",
    "PicGo server": "PicGo server",
    "Please input PicGo server": "请输入 PicGo server",
    "PicGo delete server": "PicGo server 删除接口(请使用PicList来启用此功能)",
    "PicList desc": "PicList是PicGo二次开发版，请Github搜索PicList下载",
    "Please input PicGo delete server": "请输入 PicGo server 删除接口",
    "Delete image using PicList": "使用 PicList 删除图片",
    "PicGo-Core path": "PicGo-Core 路径",
    "Delete successfully": "删除成功",
    "Delete failed": "删除失败",
    "Error, could not delete": "错误，无法删除",
    "Image size suffix": "图片大小后缀",
    "Image size suffix Description": "比如：|300 用于调整图片大小",
    "Please input image size suffix": "请输入图片大小后缀",
    "Please input PicGo-Core path, default using environment variables": "请输入 PicGo-Core path，默认使用环境变量",
    "Work on network": "应用网络图片",
    "Work on network Description": "当你上传所有图片时，也会上传网络图片。以及当你进行黏贴时，剪切板中的标准 md 图片会被上传",
    fixPath: "修正PATH变量",
    fixPathWarning: "此选项用于修复Linux和Mac上 PicGo-Core 上传失败的问题。它会修改 Obsidian 内的 PATH 变量，如果 Obsidian 遇到任何BUG，先关闭这个选项试试！",
    "Upload when clipboard has image and text together": "当剪切板同时拥有文本和图片剪切板数据时是否上传图片",
    "When you copy, some application like Excel will image and text to clipboard, you can upload or not.": "当你复制时，某些应用例如 Excel 会在剪切板同时文本和图像数据，确认是否上传。",
    "Network Domain Black List": "网络图片域名黑名单",
    "Network Domain Black List Description": "黑名单域名中的图片将不会被上传，用英文逗号分割",
    "Delete source file after you upload file": "上传文件后移除源文件",
    "Delete source file in ob assets after you upload file.": "上传文件后移除在ob附件文件夹中的文件",
    "Image desc": "图片描述",
    reserve: "默认",
    "remove all": "无",
    "remove default": "移除image.png",
    "Blog URL": "Blog URL",
    "Blog ID": "Blog UserId",
    "Blog User Name": "博客用户名",
    "Blog Token": "博客登录令牌",
    "Please input blog url": "请输入 blog url",
    "Please input blog ID": "请输入 blog user id",
    "Please input blog user name": "请输入用户名",
    "Please input blog token": "请输入登录令牌（部署密码）",
    "Repository": "仓库",
    "Please input your repository": "请输入仓库名，例如：sancijun/images",
    "Branch": "分支",
    "Please input your branch": "请输入分支名，默认为 master",
    "Token": "令牌",
    "Please input your token": "请输入个人令牌",
    "Path": "路径",
    "Please input your path": "请求输入图片存储路径",
    "Custom URL": "自定义域名",
    "Please input custom URL": "请输入自定义域名",
    "Rename": "重命名",
    "Rename Desc": "是否使用当前时间戳重命名文件",
    "Secret ID": "Secret ID",
    "Please input your secret ID": "请输入 Secret ID",
    "Secret Key": "Secret Key",
    "Please input your secret key": "请输入 Secret Key",
    "Region": "Region",
    "Please input your region": "请输入 Region",
    "Bucket": "Bucket",
    "Please input your bucket name": "请输入 Bucket Name"
};

// 繁體中文
var zhTW = {};

var localeMap = {
    ar: ar,
    cs: cz,
    da: da,
    de: de,
    en: en,
    'en-gb': enGB,
    es: es,
    fr: fr,
    hi: hi,
    id: id,
    it: it,
    ja: ja,
    ko: ko,
    nl: nl,
    nn: no,
    pl: pl,
    pt: pt,
    'pt-br': ptBR,
    ro: ro,
    ru: ru,
    tr: tr,
    'zh-cn': zhCN,
    'zh-tw': zhTW,
};
var locale = localeMap[obsidian.moment.locale()];
function t(str) {
    return (locale && locale[str]) || en[str];
}

var DEFAULT_SETTINGS = {
    uploadByClipSwitch: true,
    uploader: "PicGo",
    uploadServer: "http://127.0.0.1:36677/upload",
    deleteServer: "http://127.0.0.1:36677/delete",
    imageSizeSuffix: "",
    picgoCorePath: "",
    workOnNetWork: false,
    fixPath: false,
    applyImage: true,
    newWorkBlackDomains: "",
    deleteSource: false,
    imageDesc: "origin",
    blogSetting: {
        blogUrl: "",
        blogId: "",
        blogUserName: "",
        blogPassword: "",
    },
    githubSetting: {
        repo: 'sancijun/images',
        branch: 'master',
        token: '',
        path: 'pics/',
        customUrl: "https://cdn.jsdelivr.net/gh/sancijun/images/"
    },
    giteeSetting: {
        repo: 'sancijun/pictures',
        branch: 'master',
        token: '',
        path: '/imgs/',
        customUrl: 'https://cdn.jsdelivr.net/gh/sancijun/images/'
    },
    tencentSetting: {
        secretId: '',
        secretKey: '',
        region: 'ap-guangzhou',
        bucketName: 'sancijun-1255318116',
        path: '/test/',
    },
    rename: true,
};
var SettingTab = /** @class */ (function (_super) {
    __extends(SettingTab, _super);
    function SettingTab(app, plugin) {
        var _this = _super.call(this, app, plugin) || this;
        _this.plugin = plugin;
        return _this;
    }
    SettingTab.prototype.display = function () {
        var _this = this;
        var containerEl = this.containerEl;
        var os = getOS();
        containerEl.empty();
        containerEl.createEl("h2", { text: t("Plugin Settings") });
        var contentHTML = "\n      <div>\n        <a href=\"https://space.bilibili.com/96271327\" target=\"_blank\">\n          <img src=\"https://img.shields.io/badge/-B\u7AD9-9378f0?\" alt=\"Bilibili\" />\n        </a>\n        <a href=\"https://img2023.cnblogs.com/blog/2740513/202308/2740513-20230805232943210-456006284.jpg\" target=\"_blank\">\n          <img src=\"https://img.shields.io/badge/-\u6296\u97F3-9378f0?\" alt=\"TikTok\" />\n        </a>\n        <a href=\"https://img2023.cnblogs.com/blog/2740513/202308/2740513-20230805222711650-1692038416.jpg\" target=\"_blank\">\n          <img src=\"https://img.shields.io/badge/-\u516C\u4F17\u53F7-9378f0?logo=Weibo\" alt=\"\u516C\u4F17\u53F7\" />\n        </a>\n        <a href=\"https://img2023.cnblogs.com/blog/2740513/202308/2740513-20230805222553308-968510341.jpg\" target=\"_blank\">\n          <img src=\"https://img.shields.io/badge/-\u5FAE\u4FE1-9378f0\" alt=\"\u5FAE\u4FE1\" />\n        </a>\n      </div>\n    ";
        var contentDiv = containerEl.createEl("div");
        contentDiv.innerHTML = contentHTML;
        new obsidian.Setting(containerEl)
            .setName(t("Auto pasted upload"))
            .setDesc(t("If you set this value true, when you paste image, it will be auto uploaded(you should set the picGo server rightly)"))
            .addToggle(function (toggle) {
            return toggle
                .setValue(_this.plugin.settings.uploadByClipSwitch)
                .onChange(function (value) { return __awaiter(_this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            this.plugin.settings.uploadByClipSwitch = value;
                            return [4 /*yield*/, this.plugin.saveSettings()];
                        case 1:
                            _a.sent();
                            return [2 /*return*/];
                    }
                });
            }); });
        });
        new obsidian.Setting(containerEl)
            .setName(t("Default uploader"))
            .setDesc(t("Default uploader"))
            .addDropdown(function (cb) {
            return cb
                .addOption("Blog", "Blog")
                .addOption("GitHub", "GitHub")
                .addOption("Gitee", "Gitee")
                .addOption("Tencent", "Tencent")
                .addOption("PicGo", "PicGo(app)")
                .addOption("PicGo-Core", "PicGo-Core")
                .setValue(_this.plugin.settings.uploader)
                .onChange(function (value) { return __awaiter(_this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            this.plugin.settings.uploader = value;
                            this.display();
                            return [4 /*yield*/, this.plugin.saveSettings()];
                        case 1:
                            _a.sent();
                            return [2 /*return*/];
                    }
                });
            }); });
        });
        if (this.plugin.settings.uploader === "Blog") {
            new obsidian.Setting(containerEl)
                .setName(t("Blog URL"))
                .setDesc(t("Blog URL"))
                .addText(function (text) {
                return text
                    .setPlaceholder(t("Please input blog url"))
                    .setValue(_this.plugin.settings.blogSetting.blogUrl)
                    .onChange(function (key) { return __awaiter(_this, void 0, void 0, function () {
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                this.plugin.settings.blogSetting.blogUrl = key;
                                return [4 /*yield*/, this.plugin.saveSettings()];
                            case 1:
                                _a.sent();
                                return [2 /*return*/];
                        }
                    });
                }); });
            });
            new obsidian.Setting(containerEl)
                .setName(t("Blog ID"))
                .setDesc(t("Blog ID"))
                .addText(function (text) {
                return text
                    .setPlaceholder(t("Please input blog ID"))
                    .setValue(_this.plugin.settings.blogSetting.blogId)
                    .onChange(function (key) { return __awaiter(_this, void 0, void 0, function () {
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                this.plugin.settings.blogSetting.blogId = key;
                                return [4 /*yield*/, this.plugin.saveSettings()];
                            case 1:
                                _a.sent();
                                return [2 /*return*/];
                        }
                    });
                }); });
            });
            new obsidian.Setting(containerEl)
                .setName(t("Blog User Name"))
                .setDesc(t("Blog User Name"))
                .addText(function (text) {
                return text
                    .setPlaceholder(t("Please input blog user name"))
                    .setValue(_this.plugin.settings.blogSetting.blogUserName)
                    .onChange(function (key) { return __awaiter(_this, void 0, void 0, function () {
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                this.plugin.settings.blogSetting.blogUserName = key;
                                return [4 /*yield*/, this.plugin.saveSettings()];
                            case 1:
                                _a.sent();
                                return [2 /*return*/];
                        }
                    });
                }); });
            });
            new obsidian.Setting(containerEl)
                .setName(t("Blog Token"))
                .setDesc(t("Blog Token"))
                .addText(function (text) {
                return text
                    .setPlaceholder(t("Please input blog token"))
                    .setValue(_this.plugin.settings.blogSetting.blogPassword)
                    .onChange(function (key) { return __awaiter(_this, void 0, void 0, function () {
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                this.plugin.settings.blogSetting.blogPassword = key;
                                return [4 /*yield*/, this.plugin.saveSettings()];
                            case 1:
                                _a.sent();
                                return [2 /*return*/];
                        }
                    });
                }); });
            });
        }
        if (this.plugin.settings.uploader === "GitHub") {
            new obsidian.Setting(containerEl)
                .setName(t("Repository"))
                .addText(function (text) {
                return text
                    .setPlaceholder(t("Please input your repository"))
                    .setValue(_this.plugin.settings.githubSetting.repo)
                    .onChange(function (key) { return __awaiter(_this, void 0, void 0, function () {
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                this.plugin.settings.githubSetting.repo = key;
                                return [4 /*yield*/, this.plugin.saveSettings()];
                            case 1:
                                _a.sent();
                                return [2 /*return*/];
                        }
                    });
                }); });
            });
            new obsidian.Setting(containerEl)
                .setName(t("Branch"))
                .addText(function (text) {
                return text
                    .setPlaceholder(t("Please input your branch"))
                    .setValue(_this.plugin.settings.githubSetting.branch)
                    .onChange(function (key) { return __awaiter(_this, void 0, void 0, function () {
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                this.plugin.settings.githubSetting.branch = key;
                                return [4 /*yield*/, this.plugin.saveSettings()];
                            case 1:
                                _a.sent();
                                return [2 /*return*/];
                        }
                    });
                }); });
            });
            new obsidian.Setting(containerEl)
                .setName(t("Token"))
                .addText(function (text) {
                return text
                    .setPlaceholder(t("Please input your token"))
                    .setValue(_this.plugin.settings.githubSetting.token)
                    .onChange(function (key) { return __awaiter(_this, void 0, void 0, function () {
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                this.plugin.settings.githubSetting.token = key;
                                return [4 /*yield*/, this.plugin.saveSettings()];
                            case 1:
                                _a.sent();
                                return [2 /*return*/];
                        }
                    });
                }); });
            });
            new obsidian.Setting(containerEl)
                .setName(t("Path"))
                .addText(function (text) {
                return text
                    .setPlaceholder(t("Please input your path"))
                    .setValue(_this.plugin.settings.githubSetting.path)
                    .onChange(function (key) { return __awaiter(_this, void 0, void 0, function () {
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                this.plugin.settings.githubSetting.path = key;
                                return [4 /*yield*/, this.plugin.saveSettings()];
                            case 1:
                                _a.sent();
                                return [2 /*return*/];
                        }
                    });
                }); });
            });
            new obsidian.Setting(containerEl)
                .setName(t("Custom URL"))
                .addText(function (text) {
                return text
                    .setPlaceholder(t("Please input custom URL"))
                    .setValue(_this.plugin.settings.githubSetting.customUrl)
                    .onChange(function (key) { return __awaiter(_this, void 0, void 0, function () {
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                this.plugin.settings.githubSetting.customUrl = key;
                                return [4 /*yield*/, this.plugin.saveSettings()];
                            case 1:
                                _a.sent();
                                return [2 /*return*/];
                        }
                    });
                }); });
            });
        }
        if (this.plugin.settings.uploader === "Gitee") {
            new obsidian.Setting(containerEl)
                .setName(t("Repository"))
                .addText(function (text) {
                return text
                    .setPlaceholder(t("Please input your repository"))
                    .setValue(_this.plugin.settings.giteeSetting.repo)
                    .onChange(function (key) { return __awaiter(_this, void 0, void 0, function () {
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                this.plugin.settings.giteeSetting.repo = key;
                                return [4 /*yield*/, this.plugin.saveSettings()];
                            case 1:
                                _a.sent();
                                return [2 /*return*/];
                        }
                    });
                }); });
            });
            new obsidian.Setting(containerEl)
                .setName(t("Branch"))
                .addText(function (text) {
                return text
                    .setPlaceholder(t("Please input your branch"))
                    .setValue(_this.plugin.settings.giteeSetting.branch)
                    .onChange(function (key) { return __awaiter(_this, void 0, void 0, function () {
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                this.plugin.settings.giteeSetting.branch = key;
                                return [4 /*yield*/, this.plugin.saveSettings()];
                            case 1:
                                _a.sent();
                                return [2 /*return*/];
                        }
                    });
                }); });
            });
            new obsidian.Setting(containerEl)
                .setName(t("Token"))
                .addText(function (text) {
                return text
                    .setPlaceholder(t("Please input your token"))
                    .setValue(_this.plugin.settings.giteeSetting.token)
                    .onChange(function (key) { return __awaiter(_this, void 0, void 0, function () {
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                this.plugin.settings.giteeSetting.token = key;
                                return [4 /*yield*/, this.plugin.saveSettings()];
                            case 1:
                                _a.sent();
                                return [2 /*return*/];
                        }
                    });
                }); });
            });
            new obsidian.Setting(containerEl)
                .setName(t("Path"))
                .addText(function (text) {
                return text
                    .setPlaceholder(t("Please input your path"))
                    .setValue(_this.plugin.settings.giteeSetting.path)
                    .onChange(function (key) { return __awaiter(_this, void 0, void 0, function () {
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                this.plugin.settings.giteeSetting.path = key;
                                return [4 /*yield*/, this.plugin.saveSettings()];
                            case 1:
                                _a.sent();
                                return [2 /*return*/];
                        }
                    });
                }); });
            });
            new obsidian.Setting(containerEl)
                .setName(t("Custom URL"))
                .addText(function (text) {
                return text
                    .setPlaceholder(t("Please input custom URL"))
                    .setValue(_this.plugin.settings.giteeSetting.customUrl)
                    .onChange(function (key) { return __awaiter(_this, void 0, void 0, function () {
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                this.plugin.settings.giteeSetting.customUrl = key;
                                return [4 /*yield*/, this.plugin.saveSettings()];
                            case 1:
                                _a.sent();
                                return [2 /*return*/];
                        }
                    });
                }); });
            });
        }
        if (this.plugin.settings.uploader === "Tencent") {
            new obsidian.Setting(containerEl)
                .setName(t("Secret ID"))
                .addText(function (text) {
                return text
                    .setPlaceholder(t("Please input your secret ID"))
                    .setValue(_this.plugin.settings.tencentSetting.secretId)
                    .onChange(function (key) { return __awaiter(_this, void 0, void 0, function () {
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                this.plugin.settings.tencentSetting.secretId = key;
                                return [4 /*yield*/, this.plugin.saveSettings()];
                            case 1:
                                _a.sent();
                                return [2 /*return*/];
                        }
                    });
                }); });
            });
            new obsidian.Setting(containerEl)
                .setName(t("Secret Key"))
                .addText(function (text) {
                return text
                    .setPlaceholder(t("Please input your secret key"))
                    .setValue(_this.plugin.settings.tencentSetting.secretKey)
                    .onChange(function (key) { return __awaiter(_this, void 0, void 0, function () {
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                this.plugin.settings.tencentSetting.secretKey = key;
                                return [4 /*yield*/, this.plugin.saveSettings()];
                            case 1:
                                _a.sent();
                                return [2 /*return*/];
                        }
                    });
                }); });
            });
            new obsidian.Setting(containerEl)
                .setName(t("Region"))
                .addText(function (text) {
                return text
                    .setPlaceholder(t("Please input your region"))
                    .setValue(_this.plugin.settings.tencentSetting.region)
                    .onChange(function (key) { return __awaiter(_this, void 0, void 0, function () {
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                this.plugin.settings.tencentSetting.region = key;
                                return [4 /*yield*/, this.plugin.saveSettings()];
                            case 1:
                                _a.sent();
                                return [2 /*return*/];
                        }
                    });
                }); });
            });
            new obsidian.Setting(containerEl)
                .setName(t("Bucket"))
                .addText(function (text) {
                return text
                    .setPlaceholder(t("Please input your bucket name"))
                    .setValue(_this.plugin.settings.tencentSetting.bucketName)
                    .onChange(function (key) { return __awaiter(_this, void 0, void 0, function () {
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                this.plugin.settings.tencentSetting.bucketName = key;
                                return [4 /*yield*/, this.plugin.saveSettings()];
                            case 1:
                                _a.sent();
                                return [2 /*return*/];
                        }
                    });
                }); });
            });
            new obsidian.Setting(containerEl)
                .setName(t("Path"))
                .addText(function (text) {
                return text
                    .setPlaceholder(t("Please input your path"))
                    .setValue(_this.plugin.settings.tencentSetting.path)
                    .onChange(function (key) { return __awaiter(_this, void 0, void 0, function () {
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                this.plugin.settings.tencentSetting.path = key;
                                return [4 /*yield*/, this.plugin.saveSettings()];
                            case 1:
                                _a.sent();
                                return [2 /*return*/];
                        }
                    });
                }); });
            });
        }
        if (this.plugin.settings.uploader === "PicGo") {
            new obsidian.Setting(containerEl)
                .setName(t("PicGo server"))
                .setDesc(t("PicGo server"))
                .addText(function (text) {
                return text
                    .setPlaceholder(t("Please input PicGo server"))
                    .setValue(_this.plugin.settings.uploadServer)
                    .onChange(function (key) { return __awaiter(_this, void 0, void 0, function () {
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                this.plugin.settings.uploadServer = key;
                                return [4 /*yield*/, this.plugin.saveSettings()];
                            case 1:
                                _a.sent();
                                return [2 /*return*/];
                        }
                    });
                }); });
            });
            new obsidian.Setting(containerEl)
                .setName(t("PicGo delete server"))
                .setDesc(t("PicList desc"))
                .addText(function (text) {
                return text
                    .setPlaceholder(t("Please input PicGo delete server"))
                    .setValue(_this.plugin.settings.deleteServer)
                    .onChange(function (key) { return __awaiter(_this, void 0, void 0, function () {
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                this.plugin.settings.deleteServer = key;
                                return [4 /*yield*/, this.plugin.saveSettings()];
                            case 1:
                                _a.sent();
                                return [2 /*return*/];
                        }
                    });
                }); });
            });
        }
        if (this.plugin.settings.uploader === "PicGo-Core") {
            new obsidian.Setting(containerEl)
                .setName(t("PicGo-Core path"))
                .setDesc(t("Please input PicGo-Core path, default using environment variables"))
                .addText(function (text) {
                return text
                    .setPlaceholder("")
                    .setValue(_this.plugin.settings.picgoCorePath)
                    .onChange(function (value) { return __awaiter(_this, void 0, void 0, function () {
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                this.plugin.settings.picgoCorePath = value;
                                return [4 /*yield*/, this.plugin.saveSettings()];
                            case 1:
                                _a.sent();
                                return [2 /*return*/];
                        }
                    });
                }); });
            });
            if (os !== "Windows") {
                new obsidian.Setting(containerEl)
                    .setName(t("fixPath"))
                    .setDesc(t("fixPathWarning"))
                    .addToggle(function (toggle) {
                    return toggle
                        .setValue(_this.plugin.settings.fixPath)
                        .onChange(function (value) { return __awaiter(_this, void 0, void 0, function () {
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    this.plugin.settings.fixPath = value;
                                    return [4 /*yield*/, this.plugin.saveSettings()];
                                case 1:
                                    _a.sent();
                                    return [2 /*return*/];
                            }
                        });
                    }); });
                });
            }
        }
        new obsidian.Setting(containerEl)
            .setName(t("Rename"))
            .setDesc(t("Rename Desc"))
            .addToggle(function (toggle) {
            return toggle
                .setValue(_this.plugin.settings.rename)
                .onChange(function (value) { return __awaiter(_this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            this.plugin.settings.rename = value;
                            this.display();
                            return [4 /*yield*/, this.plugin.saveSettings()];
                        case 1:
                            _a.sent();
                            return [2 /*return*/];
                    }
                });
            }); });
        });
        // image desc setting
        new obsidian.Setting(containerEl)
            .setName(t("Image desc"))
            .setDesc(t("Image desc"))
            .addDropdown(function (cb) {
            return cb
                .addOption("origin", t("reserve")) // 保留全部
                .addOption("none", t("remove all")) // 移除全部
                .addOption("removeDefault", t("remove default")) // 只移除默认即 image.png
                .setValue(_this.plugin.settings.imageDesc)
                .onChange(function (value) { return __awaiter(_this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            this.plugin.settings.imageDesc = value;
                            this.display();
                            return [4 /*yield*/, this.plugin.saveSettings()];
                        case 1:
                            _a.sent();
                            return [2 /*return*/];
                    }
                });
            }); });
        });
        new obsidian.Setting(containerEl)
            .setName(t("Image size suffix"))
            .setDesc(t("Image size suffix Description"))
            .addText(function (text) {
            return text
                .setPlaceholder(t("Please input image size suffix"))
                .setValue(_this.plugin.settings.imageSizeSuffix)
                .onChange(function (key) { return __awaiter(_this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            this.plugin.settings.imageSizeSuffix = key;
                            return [4 /*yield*/, this.plugin.saveSettings()];
                        case 1:
                            _a.sent();
                            return [2 /*return*/];
                    }
                });
            }); });
        });
        new obsidian.Setting(containerEl)
            .setName(t("Work on network"))
            .setDesc(t("Work on network Description"))
            .addToggle(function (toggle) {
            return toggle
                .setValue(_this.plugin.settings.workOnNetWork)
                .onChange(function (value) { return __awaiter(_this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            this.plugin.settings.workOnNetWork = value;
                            this.display();
                            return [4 /*yield*/, this.plugin.saveSettings()];
                        case 1:
                            _a.sent();
                            return [2 /*return*/];
                    }
                });
            }); });
        });
        new obsidian.Setting(containerEl)
            .setName(t("Network Domain Black List"))
            .setDesc(t("Network Domain Black List Description"))
            .addTextArea(function (textArea) {
            return textArea
                .setValue(_this.plugin.settings.newWorkBlackDomains)
                .onChange(function (value) { return __awaiter(_this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            this.plugin.settings.newWorkBlackDomains = value;
                            return [4 /*yield*/, this.plugin.saveSettings()];
                        case 1:
                            _a.sent();
                            return [2 /*return*/];
                    }
                });
            }); });
        });
        new obsidian.Setting(containerEl)
            .setName(t("Upload when clipboard has image and text together"))
            .setDesc(t("When you copy, some application like Excel will image and text to clipboard, you can upload or not."))
            .addToggle(function (toggle) {
            return toggle
                .setValue(_this.plugin.settings.applyImage)
                .onChange(function (value) { return __awaiter(_this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            this.plugin.settings.applyImage = value;
                            this.display();
                            return [4 /*yield*/, this.plugin.saveSettings()];
                        case 1:
                            _a.sent();
                            return [2 /*return*/];
                    }
                });
            }); });
        });
        new obsidian.Setting(containerEl)
            .setName(t("Delete source file after you upload file"))
            .setDesc(t("Delete source file in ob assets after you upload file."))
            .addToggle(function (toggle) {
            return toggle
                .setValue(_this.plugin.settings.deleteSource)
                .onChange(function (value) { return __awaiter(_this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            this.plugin.settings.deleteSource = value;
                            this.display();
                            return [4 /*yield*/, this.plugin.saveSettings()];
                        case 1:
                            _a.sent();
                            return [2 /*return*/];
                    }
                });
            }); });
        });
    };
    return SettingTab;
}(obsidian.PluginSettingTab));

var imageAutoUploadPlugin = /** @class */ (function (_super) {
    __extends(imageAutoUploadPlugin, _super);
    function imageAutoUploadPlugin() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.addMenu = function (menu, imgPath, editor) {
            menu.addItem(function (item) {
                return item
                    .setIcon("trash-2")
                    .setTitle(t("Delete image using PicList"))
                    .onClick(function () { return __awaiter(_this, void 0, void 0, function () {
                    var selectedItem, res, selection;
                    return __generator(this, function (_b) {
                        switch (_b.label) {
                            case 0:
                                _b.trys.push([0, 3, , 4]);
                                selectedItem = this.settings.uploadedImages.find(function (item) { return item.imgUrl === imgPath; });
                                if (!selectedItem) return [3 /*break*/, 2];
                                return [4 /*yield*/, this.picGoDeleter.deleteImage([selectedItem])];
                            case 1:
                                res = _b.sent();
                                if (res.success) {
                                    new obsidian.Notice(t("Delete successfully"));
                                    selection = editor.getSelection();
                                    if (selection) {
                                        editor.replaceSelection("");
                                    }
                                    this.settings.uploadedImages =
                                        this.settings.uploadedImages.filter(function (item) { return item.imgUrl !== imgPath; });
                                    this.saveSettings();
                                }
                                else {
                                    new obsidian.Notice(t("Delete failed"));
                                }
                                _b.label = 2;
                            case 2: return [3 /*break*/, 4];
                            case 3:
                                _b.sent();
                                new obsidian.Notice(t("Error, could not delete"));
                                return [3 /*break*/, 4];
                            case 4: return [2 /*return*/];
                        }
                    });
                }); });
            });
        };
        return _this;
    }
    imageAutoUploadPlugin.prototype.loadSettings = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _a, _b, _c, _d;
            return __generator(this, function (_e) {
                switch (_e.label) {
                    case 0:
                        _a = this;
                        _c = (_b = Object).assign;
                        _d = [DEFAULT_SETTINGS];
                        return [4 /*yield*/, this.loadData()];
                    case 1:
                        _a.settings = _c.apply(_b, _d.concat([_e.sent()]));
                        return [2 /*return*/];
                }
            });
        });
    };
    imageAutoUploadPlugin.prototype.saveSettings = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.saveData(this.settings)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    imageAutoUploadPlugin.prototype.onunload = function () { };
    imageAutoUploadPlugin.prototype.onload = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.loadSettings()];
                    case 1:
                        _a.sent();
                        this.helper = new Helper(this.app);
                        this.picGoUploader = new PicGoUploader(this.settings, this);
                        this.picGoDeleter = new PicGoDeleter(this);
                        this.picGoCoreUploader = new PicGoCoreUploader(this.settings, this);
                        this.blogUploader = new BlogUploader(this.settings, this);
                        this.githubUploader = new GithubUploader(this.settings, this);
                        this.giteeUploader = new GiteeUploader(this.settings, this);
                        this.tencentCosUploader = new TencentCosUploader(this.settings, this);
                        if (this.settings.uploader === "PicGo") {
                            this.uploader = this.picGoUploader;
                        }
                        else if (this.settings.uploader === "PicGo-Core") {
                            this.uploader = this.picGoCoreUploader;
                            if (this.settings.fixPath) {
                                fixPath();
                            }
                        }
                        else if (this.settings.uploader === "Blog") {
                            this.uploader = this.blogUploader;
                        }
                        else if (this.settings.uploader === "GitHub") {
                            this.uploader = this.githubUploader;
                        }
                        else if (this.settings.uploader === "Gitee") {
                            this.uploader = this.giteeUploader;
                        }
                        else if (this.settings.uploader === "Tencent") {
                            this.uploader = this.tencentCosUploader;
                        }
                        else {
                            new obsidian.Notice("unknown uploader");
                        }
                        obsidian.addIcon("upload", "<svg t=\"1636630783429\" class=\"icon\" viewBox=\"0 0 100 100\" version=\"1.1\" p-id=\"4649\" xmlns=\"http://www.w3.org/2000/svg\">\n      <path d=\"M 71.638 35.336 L 79.408 35.336 C 83.7 35.336 87.178 38.662 87.178 42.765 L 87.178 84.864 C 87.178 88.969 83.7 92.295 79.408 92.295 L 17.249 92.295 C 12.957 92.295 9.479 88.969 9.479 84.864 L 9.479 42.765 C 9.479 38.662 12.957 35.336 17.249 35.336 L 25.019 35.336 L 25.019 42.765 L 17.249 42.765 L 17.249 84.864 L 79.408 84.864 L 79.408 42.765 L 71.638 42.765 L 71.638 35.336 Z M 49.014 10.179 L 67.326 27.688 L 61.835 32.942 L 52.849 24.352 L 52.849 59.731 L 45.078 59.731 L 45.078 24.455 L 36.194 32.947 L 30.702 27.692 L 49.012 10.181 Z\" p-id=\"4650\" fill=\"#8a8a8a\"></path>\n    </svg>");
                        this.addSettingTab(new SettingTab(this.app, this));
                        this.addCommand({
                            id: "Upload all images",
                            name: "Upload all images",
                            checkCallback: function (checking) {
                                var leaf = _this.app.workspace.activeLeaf;
                                if (leaf) {
                                    if (!checking) {
                                        _this.uploadAllFile();
                                    }
                                    return true;
                                }
                                return false;
                            },
                        });
                        this.addCommand({
                            id: "Download all images",
                            name: "Download all images",
                            checkCallback: function (checking) {
                                var leaf = _this.app.workspace.activeLeaf;
                                if (leaf) {
                                    if (!checking) {
                                        _this.downloadAllImageFiles();
                                    }
                                    return true;
                                }
                                return false;
                            },
                        });
                        this.setupPasteHandler();
                        this.registerFileMenu();
                        this.registerSelection();
                        return [2 /*return*/];
                }
            });
        });
    };
    imageAutoUploadPlugin.prototype.registerSelection = function () {
        var _this = this;
        this.registerEvent(this.app.workspace.on("editor-menu", function (menu, editor, info) {
            if (_this.app.workspace.getLeavesOfType("markdown").length === 0) {
                return;
            }
            var selection = editor.getSelection();
            if (selection) {
                var markdownRegex = /!\[.*\]\((.*)\)/g;
                var markdownMatch = markdownRegex.exec(selection);
                if (markdownMatch && markdownMatch.length > 1) {
                    var markdownUrl_1 = markdownMatch[1];
                    if (_this.settings.uploadedImages.find(function (item) { return item.imgUrl === markdownUrl_1; })) {
                        _this.addMenu(menu, markdownUrl_1, editor);
                    }
                }
            }
        }));
    };
    imageAutoUploadPlugin.prototype.downloadAllImageFiles = function () {
        return __awaiter(this, void 0, void 0, function () {
            var folderPath, fileArray, imageArray, nameSet, fileArray_1, fileArray_1_1, file, url, asset, name_1, response, activeFolder, abstractActiveFolder, e_1_1, value;
            var e_1, _a;
            var _this = this;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        folderPath = this.getFileAssetPath();
                        fileArray = this.helper.getAllFiles();
                        if (!require$$0.existsSync(folderPath)) {
                            require$$0.mkdirSync(folderPath);
                        }
                        imageArray = [];
                        nameSet = new Set();
                        _b.label = 1;
                    case 1:
                        _b.trys.push([1, 6, 7, 8]);
                        fileArray_1 = __values(fileArray), fileArray_1_1 = fileArray_1.next();
                        _b.label = 2;
                    case 2:
                        if (!!fileArray_1_1.done) return [3 /*break*/, 5];
                        file = fileArray_1_1.value;
                        if (!file.path.startsWith("http")) {
                            return [3 /*break*/, 4];
                        }
                        url = file.path;
                        asset = getUrlAsset(url);
                        name_1 = decodeURI(path$4.parse(asset).name).replaceAll(/[\\\\/:*?\"<>|]/g, "-");
                        // 如果文件名已存在，则用随机值替换，不对文件后缀进行判断
                        if (require$$0.existsSync(path$4.join(folderPath))) {
                            name_1 = (Math.random() + 1).toString(36).substr(2, 5);
                        }
                        if (nameSet.has(name_1)) {
                            name_1 = "".concat(name_1, "-").concat((Math.random() + 1).toString(36).substr(2, 5));
                        }
                        nameSet.add(name_1);
                        return [4 /*yield*/, this.download(url, folderPath, name_1)];
                    case 3:
                        response = _b.sent();
                        if (response.ok) {
                            activeFolder = obsidian.normalizePath(this.app.workspace.getActiveFile().parent.path);
                            abstractActiveFolder = this.app.vault.adapter.getFullPath(activeFolder);
                            imageArray.push({
                                source: file.source,
                                name: name_1,
                                path: obsidian.normalizePath(path$4.relative(abstractActiveFolder, response.path)),
                            });
                        }
                        _b.label = 4;
                    case 4:
                        fileArray_1_1 = fileArray_1.next();
                        return [3 /*break*/, 2];
                    case 5: return [3 /*break*/, 8];
                    case 6:
                        e_1_1 = _b.sent();
                        e_1 = { error: e_1_1 };
                        return [3 /*break*/, 8];
                    case 7:
                        try {
                            if (fileArray_1_1 && !fileArray_1_1.done && (_a = fileArray_1.return)) _a.call(fileArray_1);
                        }
                        finally { if (e_1) throw e_1.error; }
                        return [7 /*endfinally*/];
                    case 8:
                        value = this.helper.getValue();
                        imageArray.map(function (image) {
                            var name = _this.handleName(image.name);
                            value = value.replace(image.source, "![".concat(name, "](").concat(encodeURI(image.path), ")"));
                        });
                        this.helper.setValue(value);
                        new obsidian.Notice("all: ".concat(fileArray.length, "\nsuccess: ").concat(imageArray.length, "\nfailed: ").concat(fileArray.length - imageArray.length));
                        return [2 /*return*/];
                }
            });
        });
    };
    // 获取当前文件所属的附件文件夹
    imageAutoUploadPlugin.prototype.getFileAssetPath = function () {
        var basePath = this.app.vault.adapter.getBasePath();
        // @ts-ignore
        var assetFolder = this.app.vault.config.attachmentFolderPath;
        var activeFile = this.app.vault.getAbstractFileByPath(this.app.workspace.getActiveFile().path);
        // 当前文件夹下的子文件夹
        if (assetFolder.startsWith("./")) {
            var activeFolder = decodeURI(path$4.resolve(basePath, activeFile.parent.path));
            return path$4.join(activeFolder, assetFolder);
        }
        else {
            // 根文件夹
            return path$4.join(basePath, assetFolder);
        }
    };
    imageAutoUploadPlugin.prototype.download = function (url, folderPath, name) {
        return __awaiter(this, void 0, void 0, function () {
            var response, type, buffer, path;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, obsidian.requestUrl({ url: url })];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, imageType(new Uint8Array(response.arrayBuffer))];
                    case 2:
                        type = _a.sent();
                        if (response.status !== 200) {
                            return [2 /*return*/, {
                                    ok: false,
                                    msg: "error",
                                }];
                        }
                        if (!type) {
                            return [2 /*return*/, {
                                    ok: false,
                                    msg: "error",
                                }];
                        }
                        buffer = Buffer.from(response.arrayBuffer);
                        try {
                            path = path$4.join(folderPath, "".concat(name, ".").concat(type.ext));
                            require$$0.writeFileSync(path, buffer);
                            return [2 /*return*/, {
                                    ok: true,
                                    msg: "ok",
                                    path: path,
                                    type: type,
                                }];
                        }
                        catch (err) {
                            return [2 /*return*/, {
                                    ok: false,
                                    msg: err,
                                }];
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    imageAutoUploadPlugin.prototype.registerFileMenu = function () {
        var _this = this;
        this.registerEvent(this.app.workspace.on("file-menu", function (menu, file, source, leaf) {
            if (source === "canvas-menu")
                return false;
            if (!isAssetTypeAnImage(file.path))
                return false;
            menu.addItem(function (item) {
                item
                    .setTitle("Upload")
                    .setIcon("upload")
                    .onClick(function () {
                    if (!(file instanceof obsidian.TFile)) {
                        return false;
                    }
                    _this.fileMenuUpload(file);
                });
            });
        }));
    };
    imageAutoUploadPlugin.prototype.fileMenuUpload = function (file) {
        var e_2, _a;
        var _this = this;
        var content = this.helper.getValue();
        var basePath = this.app.vault.adapter.getBasePath();
        var imageList = [];
        var fileArray = this.helper.getAllFiles();
        try {
            for (var fileArray_2 = __values(fileArray), fileArray_2_1 = fileArray_2.next(); !fileArray_2_1.done; fileArray_2_1 = fileArray_2.next()) {
                var match = fileArray_2_1.value;
                var imageName = match.name;
                var encodedUri = match.path;
                var fileName = path$4.basename(decodeURI(encodedUri));
                if (file && file.name === fileName) {
                    var abstractImageFile = path$4.join(basePath, file.path);
                    if (isAssetTypeAnImage(abstractImageFile)) {
                        imageList.push({
                            path: abstractImageFile,
                            name: imageName,
                            source: match.source,
                        });
                    }
                }
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (fileArray_2_1 && !fileArray_2_1.done && (_a = fileArray_2.return)) _a.call(fileArray_2);
            }
            finally { if (e_2) throw e_2.error; }
        }
        if (imageList.length === 0) {
            new obsidian.Notice("没有解析到图像文件");
            return;
        }
        this.uploader.uploadFiles(imageList.map(function (item) { return item.path; })).then(function (res) {
            if (res.success) {
                var uploadUrlList_1 = res.result;
                imageList.map(function (item) {
                    var uploadImage = uploadUrlList_1.shift();
                    var name = _this.handleName(item.name);
                    content = content.replaceAll(item.source, "![".concat(name, "](").concat(uploadImage, ")"));
                });
                _this.helper.setValue(content);
                if (_this.settings.deleteSource) {
                    imageList.map(function (image) {
                        if (!image.path.startsWith("http")) {
                            require$$0.unlink(image.path, function () { });
                        }
                    });
                }
            }
            else {
                new obsidian.Notice("Upload error");
            }
        });
    };
    imageAutoUploadPlugin.prototype.filterFile = function (fileArray) {
        var e_3, _a;
        var imageList = [];
        try {
            for (var fileArray_3 = __values(fileArray), fileArray_3_1 = fileArray_3.next(); !fileArray_3_1.done; fileArray_3_1 = fileArray_3.next()) {
                var match = fileArray_3_1.value;
                if (match.path.startsWith("http")) {
                    if (this.settings.workOnNetWork) {
                        if (!this.helper.hasBlackDomain(match.path, this.settings.newWorkBlackDomains)) {
                            imageList.push({
                                path: match.path,
                                name: match.name,
                                source: match.source,
                            });
                        }
                    }
                }
                else {
                    imageList.push({
                        path: match.path,
                        name: match.name,
                        source: match.source,
                    });
                }
            }
        }
        catch (e_3_1) { e_3 = { error: e_3_1 }; }
        finally {
            try {
                if (fileArray_3_1 && !fileArray_3_1.done && (_a = fileArray_3.return)) _a.call(fileArray_3);
            }
            finally { if (e_3) throw e_3.error; }
        }
        return imageList;
    };
    imageAutoUploadPlugin.prototype.getFile = function (fileName, fileMap) {
        if (!fileMap) {
            fileMap = arrayToObject(this.app.vault.getFiles(), "name");
        }
        return fileMap[fileName];
    };
    // uploda all file
    imageAutoUploadPlugin.prototype.uploadAllFile = function () {
        var e_4, _a;
        var _this = this;
        var content = this.helper.getValue();
        var basePath = this.app.vault.adapter.getBasePath();
        var activeFile = this.app.workspace.getActiveFile();
        var fileMap = arrayToObject(this.app.vault.getFiles(), "name");
        var filePathMap = arrayToObject(this.app.vault.getFiles(), "path");
        var imageList = [];
        var fileArray = this.filterFile(this.helper.getAllFiles());
        try {
            for (var fileArray_4 = __values(fileArray), fileArray_4_1 = fileArray_4.next(); !fileArray_4_1.done; fileArray_4_1 = fileArray_4.next()) {
                var match = fileArray_4_1.value;
                var imageName = match.name;
                var encodedUri = match.path;
                if (encodedUri.startsWith("http")) {
                    imageList.push({
                        path: match.path,
                        name: imageName,
                        source: match.source,
                    });
                }
                else {
                    var fileName = path$4.basename(decodeURI(encodedUri));
                    var file = void 0;
                    // 绝对路径
                    if (filePathMap[decodeURI(encodedUri)]) {
                        file = filePathMap[decodeURI(encodedUri)];
                    }
                    // 相对路径
                    if ((!file && decodeURI(encodedUri).startsWith("./")) ||
                        decodeURI(encodedUri).startsWith("../")) {
                        var filePath = path$4.resolve(path$4.join(basePath, path$4.dirname(activeFile.path)), decodeURI(encodedUri));
                        if (require$$0.existsSync(filePath)) {
                            var path = obsidian.normalizePath(path$4.relative(basePath, path$4.resolve(path$4.join(basePath, path$4.dirname(activeFile.path)), decodeURI(encodedUri))));
                            file = filePathMap[path];
                        }
                    }
                    // 尽可能短路径
                    if (!file) {
                        file = this.getFile(fileName, fileMap);
                    }
                    if (file) {
                        var abstractImageFile = path$4.join(basePath, file.path);
                        if (isAssetTypeAnImage(abstractImageFile)) {
                            imageList.push({
                                path: abstractImageFile,
                                name: imageName,
                                source: match.source,
                            });
                        }
                    }
                }
            }
        }
        catch (e_4_1) { e_4 = { error: e_4_1 }; }
        finally {
            try {
                if (fileArray_4_1 && !fileArray_4_1.done && (_a = fileArray_4.return)) _a.call(fileArray_4);
            }
            finally { if (e_4) throw e_4.error; }
        }
        if (imageList.length === 0) {
            new obsidian.Notice("没有解析到图像文件");
            return;
        }
        else {
            new obsidian.Notice("\u5171\u627E\u5230".concat(imageList.length, "\u4E2A\u56FE\u50CF\u6587\u4EF6\uFF0C\u5F00\u59CB\u4E0A\u4F20"));
        }
        this.uploader.uploadFiles(imageList.map(function (item) { return item.path; })).then(function (res) {
            if (res.success) {
                var uploadUrlList_2 = res.result;
                imageList.map(function (item) {
                    var uploadImage = uploadUrlList_2.shift();
                    var name = _this.handleName(item.name);
                    content = content.replaceAll(item.source, "![".concat(name, "](").concat(uploadImage, ")"));
                });
                _this.helper.setValue(content);
                if (_this.settings.deleteSource) {
                    imageList.map(function (image) {
                        if (!image.path.startsWith("http")) {
                            require$$0.unlink(image.path, function () { });
                        }
                    });
                }
            }
            else {
                new obsidian.Notice("Upload error");
            }
        });
    };
    // 剪切板上传
    imageAutoUploadPlugin.prototype.setupPasteHandler = function () {
        var _this = this;
        this.registerEvent(this.app.workspace.on("editor-paste", function (evt, editor, markdownView) {
            var allowUpload = _this.helper.getFrontmatterValue("image-auto-upload", _this.settings.uploadByClipSwitch);
            evt.clipboardData.files;
            if (!allowUpload) {
                return;
            }
            // 剪贴板内容有md格式的图片时
            if (_this.settings.workOnNetWork) {
                var clipboardValue = evt.clipboardData.getData("text/plain");
                var imageList_1 = _this.helper
                    .getImageLink(clipboardValue)
                    .filter(function (image) { return image.path.startsWith("http"); })
                    .filter(function (image) {
                    return !_this.helper.hasBlackDomain(image.path, _this.settings.newWorkBlackDomains);
                });
                if (imageList_1.length !== 0) {
                    _this.uploader
                        .uploadFiles(imageList_1.map(function (item) { return item.path; }))
                        .then(function (res) {
                        var value = _this.helper.getValue();
                        if (res.success) {
                            var uploadUrlList_3 = res.result;
                            imageList_1.map(function (item) {
                                var uploadImage = uploadUrlList_3.shift();
                                var name = _this.handleName(item.name);
                                value = value.replaceAll(item.source, "![".concat(name, "](").concat(uploadImage, ")"));
                            });
                            _this.helper.setValue(value);
                        }
                        else {
                            new obsidian.Notice("Upload error");
                        }
                    });
                }
            }
            // 剪贴板中是图片时进行上传
            if (_this.canUpload(evt.clipboardData)) {
                _this.uploadFileAndEmbedImgurImage(editor, function (editor, pasteId) { return __awaiter(_this, void 0, void 0, function () {
                    var res, url;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0: return [4 /*yield*/, this.uploader.uploadFileByClipboard(evt.clipboardData)];
                            case 1:
                                res = _a.sent();
                                if (res.code !== 0) {
                                    this.handleFailedUpload(editor, pasteId, res.msg);
                                    return [2 /*return*/];
                                }
                                url = res.data;
                                return [2 /*return*/, url];
                        }
                    });
                }); }, evt.clipboardData).catch();
                evt.preventDefault();
            }
        }));
        this.registerEvent(this.app.workspace.on("editor-drop", function (evt, editor, markdownView) { return __awaiter(_this, void 0, void 0, function () {
            var allowUpload, files, sendFiles_1, files_1, data;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        allowUpload = this.helper.getFrontmatterValue("image-auto-upload", this.settings.uploadByClipSwitch);
                        files = evt.dataTransfer.files;
                        if (!allowUpload) {
                            return [2 /*return*/];
                        }
                        if (!(files.length !== 0 && files[0].type.startsWith("image"))) return [3 /*break*/, 2];
                        sendFiles_1 = [];
                        files_1 = evt.dataTransfer.files;
                        Array.from(files_1).forEach(function (item, index) {
                            sendFiles_1.push(item.path);
                        });
                        evt.preventDefault();
                        return [4 /*yield*/, this.uploader.uploadFiles(sendFiles_1)];
                    case 1:
                        data = _a.sent();
                        if (data.success) {
                            data.result.map(function (value) {
                                var pasteId = (Math.random() + 1).toString(36).substr(2, 5);
                                _this.insertTemporaryText(editor, pasteId);
                                _this.embedMarkDownImage(editor, pasteId, value, files_1[0].name);
                            });
                        }
                        else {
                            new obsidian.Notice("Upload error");
                        }
                        _a.label = 2;
                    case 2: return [2 /*return*/];
                }
            });
        }); }));
    };
    imageAutoUploadPlugin.prototype.canUpload = function (clipboardData) {
        this.settings.applyImage;
        var files = clipboardData.files;
        var text = clipboardData.getData("text");
        var hasImageFile = files.length !== 0 && files[0].type.startsWith("image");
        if (hasImageFile) {
            if (!!text) {
                return this.settings.applyImage;
            }
            else {
                return true;
            }
        }
        else {
            return false;
        }
    };
    imageAutoUploadPlugin.prototype.uploadFileAndEmbedImgurImage = function (editor, callback, clipboardData) {
        return __awaiter(this, void 0, void 0, function () {
            var pasteId, name, url, e_5;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        pasteId = (Math.random() + 1).toString(36).substr(2, 5);
                        this.insertTemporaryText(editor, pasteId);
                        name = clipboardData.files[0].name;
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, callback(editor, pasteId)];
                    case 2:
                        url = _a.sent();
                        this.embedMarkDownImage(editor, pasteId, url, name);
                        return [3 /*break*/, 4];
                    case 3:
                        e_5 = _a.sent();
                        this.handleFailedUpload(editor, pasteId, e_5);
                        return [3 /*break*/, 4];
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    imageAutoUploadPlugin.prototype.insertTemporaryText = function (editor, pasteId) {
        var progressText = imageAutoUploadPlugin.progressTextFor(pasteId);
        editor.replaceSelection(progressText + "\n");
    };
    imageAutoUploadPlugin.progressTextFor = function (id) {
        return "![Uploading file...".concat(id, "]()");
    };
    imageAutoUploadPlugin.prototype.embedMarkDownImage = function (editor, pasteId, imageUrl, name) {
        if (name === void 0) { name = ""; }
        var progressText = imageAutoUploadPlugin.progressTextFor(pasteId);
        name = this.handleName(name);
        var markDownImage = "![".concat(name, "](").concat(imageUrl, ")");
        imageAutoUploadPlugin.replaceFirstOccurrence(editor, progressText, markDownImage);
    };
    imageAutoUploadPlugin.prototype.handleFailedUpload = function (editor, pasteId, reason) {
        new obsidian.Notice(reason);
        console.error("Failed request: ", reason);
        var progressText = imageAutoUploadPlugin.progressTextFor(pasteId);
        imageAutoUploadPlugin.replaceFirstOccurrence(editor, progressText, "⚠️upload failed, check dev console");
    };
    imageAutoUploadPlugin.prototype.handleName = function (name) {
        var imageSizeSuffix = this.settings.imageSizeSuffix || "";
        if (this.settings.imageDesc === "origin") {
            return "".concat(name).concat(imageSizeSuffix);
        }
        else if (this.settings.imageDesc === "none") {
            return "";
        }
        else if (this.settings.imageDesc === "removeDefault") {
            if (name === "image.png") {
                return "";
            }
            else {
                return "".concat(name).concat(imageSizeSuffix);
            }
        }
        else {
            return "".concat(name).concat(imageSizeSuffix);
        }
    };
    imageAutoUploadPlugin.replaceFirstOccurrence = function (editor, target, replacement) {
        var lines = editor.getValue().split("\n");
        for (var i = 0; i < lines.length; i++) {
            var ch = lines[i].indexOf(target);
            if (ch != -1) {
                var from = { line: i, ch: ch };
                var to = { line: i, ch: ch + target.length };
                editor.replaceRange(replacement, from, to);
                break;
            }
        }
    };
    return imageAutoUploadPlugin;
}(obsidian.Plugin));

module.exports = imageAutoUploadPlugin;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
